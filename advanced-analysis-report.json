{
  "timestamp": "2025-06-28T12:53:19.800Z",
  "projectInfo": {
    "name": "if-wave-social",
    "version": "0.1.0",
    "dependencies": [
      "core-js",
      "vue"
    ],
    "devDependencies": [
      "@babel/core",
      "@babel/eslint-parser",
      "@vue/cli-plugin-babel",
      "@vue/cli-plugin-eslint",
      "@vue/cli-service",
      "eslint",
      "eslint-plugin-vue",
      "gh-pages"
    ],
    "scripts": {
      "serve": "vue-cli-service serve",
      "build": "vue-cli-service build",
      "lint": "vue-cli-service lint",
      "predeploy": "npm run build",
      "deploy": "gh-pages -d dist"
    },
    "framework": "Vue.js"
  },
  "codeAnalysis": {
    "components": [
      {
        "name": "ChatScreen",
        "path": "src\\components\\ChatScreen.vue",
        "size": 20165,
        "sections": {
          "template": "<div class=\"chat-container\">\r\n    <!-- Header do Chat -->\r\n    <div class=\"chat-header\">\r\n      <button class=\"back-btn\" @click=\"$emit('back')\">\r\n        <IconComponent name=\"back\" :size=\"20\" />\r\n      </button>\r\n      <div class=\"chat-user-info\">\r\n        <img :src=\"chatUser.avatar\" :alt=\"chatUser.name\" class=\"chat-avatar\" />\r\n        <div class=\"user-details\">\r\n          <h3 class=\"user-name\">{{ chatUser.name }}</h3>\r\n          <span class=\"user-status\" :class=\"{ online: chatUser.online }\">\r\n            {{ chatUser.online ? 'Online' : 'Offline' }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"chat-actions\">\r\n        <button class=\"action-btn\" @click=\"toggleUserInfo\">\r\n          <IconComponent name=\"menu\" :size=\"20\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Área de mensagens -->\r\n    <div class=\"messages-area\" ref=\"messagesArea\">\r\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"message\" :class=\"{ 'my-message': message.isOwn }\">\r\n        <div class=\"message-bubble\">\r\n          <p class=\"message-text\">{{ message.text }}</p>\r\n          <div class=\"message-info\">\r\n            <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\r\n            <span v-if=\"message.isOwn && message.status\" class=\"message-status\" :class=\"message.status\">\r\n              <IconComponent \r\n                :name=\"getStatusIcon(message.status)\" \r\n                :size=\"12\" \r\n                v-if=\"message.status !== 'sending'\"\r\n              />\r\n              <div v-else class=\"sending-spinner\"></div>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"isTyping\" class=\"typing-indicator\">\r\n        <div class=\"typing-bubble\">\r\n          <div class=\"typing-dots\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Input de mensagem -->\r\n    <div class=\"message-input-area\">\r\n      <div class=\"input-container\">\r\n        <button class=\"attachment-btn\" @click=\"showAttachmentOptions = !showAttachmentOptions\">\r\n          <IconComponent name=\"attach\" :size=\"20\" />\r\n        </button>\r\n        <input \r\n          type=\"text\" \r\n          v-model=\"newMessage\" \r\n          @keyup.enter=\"sendMessage\"\r\n          @input=\"handleTyping\"\r\n          placeholder=\"Digite uma mensagem...\"\r\n          class=\"message-input\"\r\n          maxlength=\"500\"\r\n        />\r\n        <button \r\n          class=\"send-btn\" \r\n          @click=\"sendMessage\" \r\n          :disabled=\"!newMessage.trim()\"\r\n          :class=\"{ active: newMessage.trim() }\"\r\n        >\r\n          <IconComponent name=\"send\" :size=\"20\" />\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Opções de anexo -->\r\n      <div v-if=\"showAttachmentOptions\" class=\"attachment-options\">\r\n        <button class=\"attachment-option\" @click=\"selectImage\">\r\n          <IconComponent name=\"image\" :size=\"16\" />\r\n          Imagem\r\n        </button>\r\n        <button class=\"attachment-option\" @click=\"selectDocument\">\r\n          <IconComponent name=\"document\" :size=\"16\" />\r\n          Documento\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Info do usuário (lateral) -->\r\n    <div v-if=\"showUserInfo\" class=\"user-info-panel\" @click.self=\"toggleUserInfo\">\r\n      <div class=\"user-info-content\">\r\n        <button class=\"close-info-btn\" @click=\"toggleUserInfo\">\r\n          <IconComponent name=\"close\" :size=\"20\" />\r\n        </button>\r\n        \r\n        <div class=\"user-profile\">\r\n          <img :src=\"chatUser.avatar\" :alt=\"chatUser.name\" class=\"profile-avatar\" />\r\n          <h3>{{ chatUser.name }}</h3>\r\n          <p>{{ chatUser.course }}</p>\r\n          <p>{{ chatUser.campus }}</p>\r\n        </div>\r\n\r\n        <div class=\"user-actions\">\r\n          <button class=\"action-item\" @click=\"viewProfile\">\r\n            <IconComponent name=\"profile\" :size=\"18\" />\r\n            Ver perfil\r\n          </button>\r\n          <button class=\"action-item\" @click=\"muteConversation\">\r\n            <IconComponent name=\"mute\" :size=\"18\" />\r\n            {{ isMuted ? 'Desmutar' : 'Mutar' }} conversa\r\n          </button>\r\n          <button class=\"action-item danger\" @click=\"blockUser\">\r\n            <IconComponent name=\"block\" :size=\"18\" />\r\n            Bloquear usuário\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>",
          "script": "import IconComponent from './IconComponent.vue'\r\n\r\nexport default {\r\n  name: 'ChatScreen',\r\n  components: {\r\n    IconComponent\r\n  },\r\n  props: {\r\n    chatUser: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      newMessage: '',\r\n      showAttachmentOptions: false,\r\n      showUserInfo: false,\r\n      isTyping: false,\r\n      isMuted: false,\r\n      typingTimeout: null,\r\n      messages: []\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadMessages()\r\n    this.scrollToBottom()\r\n    // Simular status online do usuário\r\n    this.simulateUserActivity()\r\n  },\r\n  methods: {\r\n    loadMessages() {\r\n      // Carregar mensagens do localStorage ou simular algumas\r\n      const chatId = this.getChatId()\r\n      const savedMessages = localStorage.getItem(`ifwave_chat_${chatId}`)\r\n      \r\n      if (savedMessages) {\r\n        this.messages = JSON.parse(savedMessages)\r\n      } else {\r\n        // Simular algumas mensagens iniciais\r\n        this.messages = [\r\n          {\r\n            id: 1,\r\n            text: 'Oi! Como está indo com os estudos?',\r\n            timestamp: Date.now() - 3600000, // 1 hora atrás\r\n            isOwn: false,\r\n            status: 'read'\r\n          },\r\n          {\r\n            id: 2,\r\n            text: 'Oi! Está indo bem, obrigado por perguntar. E você?',\r\n            timestamp: Date.now() - 3300000, // 55 min atrás\r\n            isOwn: true,\r\n            status: 'read'\r\n          },\r\n          {\r\n            id: 3,\r\n            text: 'Também está bem! Você viu o trabalho que o professor passou?',\r\n            timestamp: Date.now() - 3000000, // 50 min atrás\r\n            isOwn: false,\r\n            status: 'read'\r\n          }\r\n        ]\r\n        this.saveMessages()\r\n      }\r\n    },\r\n\r\n    getChatId() {\r\n      // Gerar ID único para a conversa baseado nos IDs dos usuários\r\n      const ids = [this.currentUser.id, this.chatUser.id].sort()\r\n      return `${ids[0]}_${ids[1]}`\r\n    },\r\n\r\n    saveMessages() {\r\n      const chatId = this.getChatId()\r\n      localStorage.setItem(`ifwave_chat_${chatId}`, JSON.stringify(this.messages))\r\n      \r\n      // Atualizar última mensagem na lista de conversas\r\n      this.updateLastMessage()\r\n    },\r\n\r\n    updateLastMessage() {\r\n      if (this.messages.length === 0) return\r\n      \r\n      const lastMessage = this.messages[this.messages.length - 1]\r\n      const conversations = JSON.parse(localStorage.getItem('ifwave_conversations') || '[]')\r\n      const chatId = this.getChatId()\r\n      \r\n      const existingConv = conversations.find(conv => conv.id === chatId)\r\n      const conversationData = {\r\n        id: chatId,\r\n        userId: this.chatUser.id,\r\n        name: this.chatUser.name,\r\n        avatar: this.chatUser.avatar,\r\n        course: this.chatUser.course,\r\n        lastMessage: lastMessage.text,\r\n        lastMessageTime: this.formatTime(lastMessage.timestamp),\r\n        timestamp: lastMessage.timestamp,\r\n        unread: !lastMessage.isOwn,\r\n        unreadCount: !lastMessage.isOwn ? 1 : 0,\r\n        online: this.chatUser.online\r\n      }\r\n      \r\n      if (existingConv) {\r\n        Object.assign(existingConv, conversationData)\r\n      } else {\r\n        conversations.push(conversationData)\r\n      }\r\n      \r\n      // Ordenar por timestamp mais recente\r\n      conversations.sort((a, b) => b.timestamp - a.timestamp)\r\n      \r\n      localStorage.setItem('ifwave_conversations', JSON.stringify(conversations))\r\n    },\r\n\r\n    sendMessage() {\r\n      if (!this.newMessage.trim()) return\r\n\r\n      const message = {\r\n        id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        text: this.newMessage.trim(),\r\n        timestamp: Date.now(),\r\n        isOwn: true,\r\n        status: 'sending',\r\n        senderId: this.currentUser.id,\r\n        receiverId: this.chatUser.id\r\n      }\r\n\r\n      this.messages.push(message)\r\n      this.newMessage = ''\r\n      this.scrollToBottom()\r\n\r\n      // Simular envio\r\n      setTimeout(() => {\r\n        message.status = 'sent'\r\n        this.saveMessages()\r\n        this.updateLastMessage()\r\n        \r\n        // Notificar sobre nova mensagem\r\n        this.$emit('message-sent', {\r\n          chatId: this.getChatId(),\r\n          message: message,\r\n          recipient: this.chatUser\r\n        })\r\n        \r\n        // Simular resposta automática às vezes (apenas para demonstração)\r\n        if (Math.random() > 0.7) {\r\n          this.simulateReply()\r\n        }\r\n      }, 1000)\r\n\r\n      // Simular entrega\r\n      setTimeout(() => {\r\n        if (message.status === 'sent') {\r\n          message.status = 'delivered'\r\n          this.saveMessages()\r\n        }\r\n      }, 2000)\r\n\r\n      // Simular leitura\r\n      setTimeout(() => {\r\n        if (message.status === 'delivered') {\r\n          message.status = 'read'\r\n          this.saveMessages()\r\n        }\r\n      }, 5000)\r\n    },\r\n\r\n    simulateReply() {\r\n      const replies = [\r\n        'Entendi! 👍',\r\n        'Obrigado pela informação!',\r\n        'Vamos nos falar depois',\r\n        'Perfeito! 😊',\r\n        'Combinado',\r\n        'Pode deixar!',\r\n        'Beleza',\r\n        'Ok, valeu!',\r\n        'Ótima ideia!',\r\n        'Vou pensar sobre isso',\r\n        'Me conta mais depois',\r\n        'Legal! 🙂'\r\n      ]\r\n\r\n      setTimeout(() => {\r\n        this.isTyping = true\r\n        \r\n        setTimeout(() => {\r\n          this.isTyping = false\r\n          const reply = {\r\n            id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            text: replies[Math.floor(Math.random() * replies.length)],\r\n            timestamp: Date.now(),\r\n            isOwn: false,\r\n            status: 'delivered',\r\n            senderId: this.chatUser.id,\r\n            receiverId: this.currentUser.id\r\n          }\r\n          \r\n          this.messages.push(reply)\r\n          this.scrollToBottom()\r\n          this.saveMessages()\r\n          this.updateLastMessage()\r\n          \r\n          // Simular leitura da resposta\r\n          setTimeout(() => {\r\n            reply.status = 'read'\r\n            this.saveMessages()\r\n          }, 2000)\r\n        }, 1500 + Math.random() * 2000) // Tempo variável de digitação\r\n      }, 500 + Math.random() * 1500) // Tempo antes de começar a digitar\r\n    },\r\n\r\n    handleTyping() {\r\n      // Simular indicador de digitação\r\n      clearTimeout(this.typingTimeout)\r\n      this.typingTimeout = setTimeout(() => {\r\n        // Parar de mostrar \"digitando\"\r\n      }, 1000)\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const messagesArea = this.$refs.messagesArea\r\n        if (messagesArea) {\r\n          messagesArea.scrollTop = messagesArea.scrollHeight\r\n        }\r\n      })\r\n    },\r\n\r\n    formatTime(timestamp) {\r\n      const date = new Date(timestamp)\r\n      const now = new Date()\r\n      const diffInHours = (now - date) / (1000 * 60 * 60)\r\n      \r\n      if (diffInHours < 24) {\r\n        return date.toLocaleTimeString('pt-BR', { \r\n          hour: '2-digit', \r\n          minute: '2-digit' \r\n        })\r\n      } else if (diffInHours < 168) { // 7 dias\r\n        return date.toLocaleDateString('pt-BR', { \r\n          weekday: 'short',\r\n          hour: '2-digit', \r\n          minute: '2-digit' \r\n        })\r\n      } else {\r\n        return date.toLocaleDateString('pt-BR', {\r\n          day: '2-digit',\r\n          month: '2-digit',\r\n          hour: '2-digit', \r\n          minute: '2-digit' \r\n        })\r\n      }\r\n    },\r\n\r\n    getStatusIcon(status) {\r\n      switch (status) {\r\n        case 'sent': return 'check'\r\n        case 'delivered': return 'check-double'\r\n        case 'read': return 'check-double'\r\n        default: return 'check'\r\n      }\r\n    },\r\n\r\n    toggleUserInfo() {\r\n      this.showUserInfo = !this.showUserInfo\r\n    },\r\n\r\n    simulateUserActivity() {\r\n      // Simular mudanças de status online/offline usando uma variável local\r\n      setInterval(() => {\r\n        // Emitir evento para o componente pai atualizar o status\r\n        this.$emit('user-status-change', {\r\n          userId: this.chatUser.id,\r\n          online: Math.random() > 0.3\r\n        })\r\n      }, 30000) // A cada 30 segundos\r\n    },\r\n\r\n    viewProfile() {\r\n      this.$emit('view-profile', this.chatUser)\r\n    },\r\n\r\n    muteConversation() {\r\n      this.isMuted = !this.isMuted\r\n      // Salvar preferência no localStorage\r\n      const chatId = this.getChatId()\r\n      localStorage.setItem(`ifwave_muted_${chatId}`, this.isMuted.toString())\r\n    },\r\n\r\n    blockUser() {\r\n      if (confirm(`Tem certeza que deseja bloquear ${this.chatUser.name}?`)) {\r\n        // Implementar lógica de bloqueio\r\n        const blockedUsers = JSON.parse(localStorage.getItem('ifwave_blocked_users') || '[]')\r\n        if (!blockedUsers.includes(this.chatUser.id)) {\r\n          blockedUsers.push(this.chatUser.id)\r\n          localStorage.setItem('ifwave_blocked_users', JSON.stringify(blockedUsers))\r\n        }\r\n        this.$emit('user-blocked', this.chatUser)\r\n      }\r\n    },\r\n\r\n    selectImage() {\r\n      // Implementar seleção de imagem\r\n      this.showAttachmentOptions = false\r\n    },\r\n\r\n    selectDocument() {\r\n      // Implementar seleção de documento\r\n      this.showAttachmentOptions = false\r\n    }\r\n  }\r\n}",
          "style": ".chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background: var(--background);\r\n  position: relative;\r\n}\r\n\r\n/* Header do Chat */\r\n.chat-header {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 12px 16px;\r\n  background: var(--card);\r\n  border-bottom: 1px solid var(--border);\r\n  gap: 12px;\r\n}\r\n\r\n.back-btn {\r\n  background: none;\r\n  border: none;\r\n  color: var(--foreground);\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.back-btn:hover {\r\n  background: var(--background);\r\n}\r\n\r\n.chat-user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  flex: 1;\r\n}\r\n\r\n.chat-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.user-details {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.user-name {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: var(--foreground);\r\n}\r\n\r\n.user-status {\r\n  font-size: 12px;\r\n  color: #8e8e8e;\r\n}\r\n\r\n.user-status.online {\r\n  color: #44b883;\r\n}\r\n\r\n.chat-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  color: var(--foreground);\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.action-btn:hover {\r\n  background: var(--background);\r\n}\r\n\r\n/* Área de mensagens */\r\n.messages-area {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.message.my-message {\r\n  justify-content: flex-end;\r\n}\r\n\r\n.message-bubble {\r\n  max-width: 70%;\r\n  padding: 12px 16px;\r\n  border-radius: 18px;\r\n  background: var(--card);\r\n  border: 1px solid var(--border);\r\n}\r\n\r\n.my-message .message-bubble {\r\n  background: #0095f6;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.message-text {\r\n  margin: 0 0 4px 0;\r\n  line-height: 1.4;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.message-info {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  gap: 4px;\r\n  margin-top: 4px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 11px;\r\n  opacity: 0.7;\r\n}\r\n\r\n.my-message .message-time {\r\n  color: rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n.message-status {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.message-status.read {\r\n  color: #0095f6;\r\n}\r\n\r\n.sending-spinner {\r\n  width: 12px;\r\n  height: 12px;\r\n  border: 2px solid rgba(255, 255, 255, 0.3);\r\n  border-top-color: rgba(255, 255, 255, 0.8);\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n\r\n/* Indicador de digitação */\r\n.typing-indicator {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.typing-bubble {\r\n  background: var(--card);\r\n  border: 1px solid var(--border);\r\n  border-radius: 18px;\r\n  padding: 12px 16px;\r\n}\r\n\r\n.typing-dots {\r\n  display: flex;\r\n  gap: 4px;\r\n  align-items: center;\r\n}\r\n\r\n.typing-dots span {\r\n  width: 6px;\r\n  height: 6px;\r\n  background: #8e8e8e;\r\n  border-radius: 50%;\r\n  animation: bounce 1.4s ease-in-out infinite both;\r\n}\r\n\r\n.typing-dots span:nth-child(1) { animation-delay: -0.32s; }\r\n.typing-dots span:nth-child(2) { animation-delay: -0.16s; }\r\n\r\n@keyframes bounce {\r\n  0%, 80%, 100% { transform: scale(0); opacity: 0.5; }\r\n  40% { transform: scale(1); opacity: 1; }\r\n}\r\n\r\n/* Input de mensagem */\r\n.message-input-area {\r\n  background: var(--card);\r\n  border-top: 1px solid var(--border);\r\n  padding: 12px 16px;\r\n}\r\n\r\n.input-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.attachment-btn {\r\n  background: none;\r\n  border: none;\r\n  color: var(--foreground);\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.attachment-btn:hover {\r\n  background: var(--background);\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  border: 1px solid var(--border);\r\n  border-radius: 20px;\r\n  padding: 10px 16px;\r\n  background: var(--background);\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n  outline: none;\r\n  resize: none;\r\n}\r\n\r\n.message-input:focus {\r\n  border-color: #0095f6;\r\n}\r\n\r\n.send-btn {\r\n  background: #e0e0e0;\r\n  border: none;\r\n  color: #8e8e8e;\r\n  cursor: pointer;\r\n  padding: 10px;\r\n  border-radius: 50%;\r\n  transition: all 0.2s;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.send-btn.active {\r\n  background: #0095f6;\r\n  color: white;\r\n}\r\n\r\n.send-btn:disabled {\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* Opções de anexo */\r\n.attachment-options {\r\n  display: flex;\r\n  gap: 8px;\r\n  margin-top: 8px;\r\n  padding: 8px;\r\n  background: var(--background);\r\n  border-radius: 12px;\r\n}\r\n\r\n.attachment-option {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  padding: 8px 12px;\r\n  background: var(--card);\r\n  border: 1px solid var(--border);\r\n  border-radius: 8px;\r\n  color: var(--foreground);\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.attachment-option:hover {\r\n  background: var(--background);\r\n}\r\n\r\n/* Painel de informações do usuário */\r\n.user-info-panel {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  z-index: 1000;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.user-info-content {\r\n  width: 300px;\r\n  height: 100%;\r\n  background: var(--card);\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.close-info-btn {\r\n  background: none;\r\n  border: none;\r\n  color: var(--foreground);\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  float: right;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.user-profile {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.profile-avatar {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.user-profile h3 {\r\n  margin: 0 0 8px 0;\r\n  color: var(--foreground);\r\n}\r\n\r\n.user-profile p {\r\n  margin: 4px 0;\r\n  color: #8e8e8e;\r\n  font-size: 14px;\r\n}\r\n\r\n.user-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.action-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 12px;\r\n  background: var(--background);\r\n  border: 1px solid var(--border);\r\n  border-radius: 8px;\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.action-item:hover {\r\n  background: var(--card);\r\n}\r\n\r\n.action-item.danger {\r\n  color: #e74c3c;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .user-info-content {\r\n    width: 280px;\r\n  }\r\n  \r\n  .message-bubble {\r\n    max-width: 85%;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 40
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 20
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "live_streaming",
            "category": "advanced",
            "weight": 4,
            "confidence": 80
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "offline_support",
            "category": "technical",
            "weight": 4,
            "confidence": 40
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "internationalization",
            "category": "technical",
            "weight": 3,
            "confidence": 60
          }
        ],
        "complexity": {
          "lines": 834,
          "functions": 11,
          "conditions": 53,
          "loops": 18,
          "score": 14.76019184652278
        },
        "imports": [
          "./IconComponent.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [
          "back",
          "message-sent",
          "user-status-change",
          "view-profile",
          "user-blocked"
        ],
        "props": [
          "chatUser",
          "required"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": false,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 67
        }
      },
      {
        "name": "Feed",
        "path": "src\\components\\Feed.vue",
        "size": 8740,
        "sections": {
          "template": "<div class=\"feed-container\">\r\n    <header class=\"feed-header\">\r\n      <span class=\"logo\">Velo</span>\r\n      <span\r\n        v-if=\"currentTab !== 'profile' && currentTab !== 'notifications'\"\r\n        class=\"notification-icon\"\r\n        title=\"Notificações\"\r\n        @click=\"currentTab = 'notifications'\"\r\n      >\r\n        <img \r\n          :src=\"require('@/assets/icons/notifications.svg')\" \r\n          alt=\"Notificações\"\r\n          width=\"28\" \r\n          height=\"28\" \r\n          style=\"object-fit: contain; filter: currentColor;\"\r\n        />\r\n        <span\r\n          v-if=\"notificacoesNaoLidas > 0\"\r\n          class=\"badge\"\r\n          :class=\"{\r\n            urgente: notificacaoUrgente,\r\n            positiva: notificacaoPositiva\r\n          }\"\r\n        >{{ notificacoesNaoLidas }}</span>\r\n      </span>\r\n    </header>\r\n    <transition name=\"fade\" mode=\"out-in\">\r\n      <main :key=\"currentTab\" :class=\"{ 'no-navbar': currentTab === 'notifications' }\">\r\n        <HomeScreen v-if=\"currentTab === 'home'\" :posts=\"posts\" />\r\n        <SearchScreen v-else-if=\"currentTab === 'search'\" />\r\n        <PublishScreen v-else-if=\"currentTab === 'publish'\" />\r\n        <MessagesScreen v-else-if=\"currentTab === 'messages'\" :current-user=\"currentUser\" />\r\n        <ProfileScreen v-else-if=\"currentTab === 'profile'\" :current-user=\"currentUser\" />\r\n        <NotificationsScreen \r\n          v-else-if=\"currentTab === 'notifications'\" \r\n          :notifications=\"notificacoes\" \r\n          @back=\"goBack\" \r\n        />\r\n      </main>\r\n    </transition>\r\n    <nav class=\"bottom-navbar\" :class=\"{ 'hidden': currentTab === 'notifications' }\">\r\n      <button class=\"nav-btn\" title=\"Início\" @click=\"currentTab = 'home'\">\r\n        <span class=\"nav-icon\">\r\n          <IconComponent name=\"home\" :size=\"24\" />\r\n        </span>\r\n        <span class=\"nav-label\">Início</span>\r\n      </button>\r\n      <button class=\"nav-btn\" title=\"Buscar\" @click=\"currentTab = 'search'\">\r\n        <span class=\"nav-icon\">\r\n          <IconComponent name=\"search\" :size=\"24\" />\r\n        </span>\r\n        <span class=\"nav-label\">Buscar</span>\r\n      </button>\r\n      <button class=\"nav-btn publish\" title=\"Publicar\" @click=\"currentTab = 'publish'\">\r\n        <span class=\"nav-icon\">\r\n          <IconComponent name=\"publish\" :size=\"24\" />\r\n        </span>\r\n        <span class=\"nav-label\">Publicar</span>\r\n      </button>\r\n      <button class=\"nav-btn\" title=\"Mensagens\" @click=\"currentTab = 'messages'\">\r\n        <span class=\"nav-icon\">\r\n          <IconComponent name=\"messages\" :size=\"24\" />\r\n        </span>\r\n        <span class=\"nav-label\">Mensagem</span>\r\n      </button>\r\n      <button class=\"nav-btn\" title=\"Perfil\" @click=\"currentTab = 'profile'\">\r\n        <span class=\"nav-icon\">\r\n          <IconComponent name=\"profile\" :size=\"24\" />\r\n        </span>\r\n        <span class=\"nav-label\">Perfil</span>\r\n      </button>\r\n    </nav>\r\n  </div>",
          "script": "import HomeScreen from './HomeScreen.vue'\r\nimport SearchScreen from './SearchScreen.vue'\r\nimport PublishScreen from './PublishScreen.vue'\r\nimport MessagesScreen from './MessagesScreen.vue'\r\nimport ProfileScreen from './ProfileScreen.vue'\r\nimport NotificationsScreen from './NotificationsScreen.vue'\r\nimport IconComponent from './IconComponent.vue'\r\n\r\nexport default {\r\n  name: 'FeedPosts',\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      default: () => null\r\n    }\r\n  },\r\n  components: {\r\n    HomeScreen,\r\n    SearchScreen,\r\n    PublishScreen,\r\n    MessagesScreen,\r\n    ProfileScreen,\r\n    NotificationsScreen,\r\n    IconComponent\r\n  },\r\n  data() {\r\n    return {\r\n      currentTab: 'home',\r\n      previousTab: 'home', // Para rastrear a tela anterior\r\n      posts: [\r\n        {\r\n          user: 'ana_silva',\r\n          image: 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=400&q=80',\r\n          caption: 'Curtindo o dia!'\r\n        },\r\n        {\r\n          user: 'joao_p',\r\n          image: 'https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=400&q=80',\r\n          caption: 'Vista incrível!'\r\n        }\r\n      ],\r\n      notificacoesNaoLidas: 3, // Altere para testar\r\n      notificacaoUrgente: false, // true para badge vermelho\r\n      notificacaoPositiva: true, // true para badge verde\r\n      notificacoes: [\r\n        {\r\n          id: 1,\r\n          type: 'like',\r\n          username: 'ana.silva',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 15),\r\n          read: false,\r\n          preview: 'https://picsum.photos/50/50?random=10'\r\n        },\r\n        {\r\n          id: 2,\r\n          type: 'comment',\r\n          username: 'carlos.pereira',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60),\r\n          read: false,\r\n          comment: 'Excelente trabalho!',\r\n          preview: 'https://picsum.photos/50/50?random=11'\r\n        },\r\n        {\r\n          id: 3,\r\n          type: 'follow',\r\n          username: 'lucia.ferreira',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3),\r\n          read: true,\r\n          following: false\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    goBack() {\r\n      this.currentTab = this.previousTab\r\n    }\r\n  },\r\n  watch: {\r\n    currentTab(newTab, oldTab) {\r\n      // Atualiza a aba anterior apenas se não estivermos voltando das notificações\r\n      if (newTab !== 'notifications' && oldTab !== 'notifications') {\r\n        this.previousTab = oldTab\r\n      }\r\n    }\r\n  }\r\n}",
          "style": ".fade-enter-active, .fade-leave-active {\r\n  transition: opacity 0.3s;\r\n}\r\n.fade-enter-from, .fade-leave-to {\r\n  opacity: 0;\r\n}\r\n.feed-container {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  background: var(--card);\r\n  border: 1px solid var(--border);\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  color: var(--foreground);\r\n}\r\n.feed-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 12px 16px;\r\n  border-bottom: 1px solid var(--border);\r\n  background: var(--background);\r\n}\r\n.logo {\r\n  font-family: 'Arial Black', Arial, sans-serif;\r\n  font-size: 1.5em;\r\n  color: var(--primary);\r\n}\r\n.notification-icon {\r\n  margin-left: auto;\r\n  cursor: pointer;\r\n  color: var(--primary);\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 8px;\r\n  border-radius: 12px;\r\n}\r\n.notification-icon:hover {\r\n  color: var(--accent);\r\n  background: var(--background);\r\n  transform: scale(1.05);\r\n}\r\n.badge {\r\n  position: absolute;\r\n  top: -6px;\r\n  right: -10px;\r\n  min-width: 20px;\r\n  height: 20px;\r\n  padding: 0 6px;\r\n  background: var(--accent);\r\n  color: #fff;\r\n  border-radius: 12px;\r\n  font-size: 0.85em;\r\n  font-weight: bold;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 2px solid var(--card);\r\n  box-shadow: 0 1px 4px rgba(0,0,0,0.08);\r\n  z-index: 10;\r\n  transition: background 0.2s;\r\n}\r\n.badge.urgente {\r\n  background: #e74c3c; /* vermelho */\r\n}\r\n.badge.positiva {\r\n  background: var(--verde-energia); /* verde */\r\n}\r\nmain {\r\n  padding: 16px 0;\r\n  padding-bottom: 70px; /* espaço para a navbar */\r\n}\r\n\r\nmain.no-navbar {\r\n  padding-bottom: 0; /* remove espaço quando navbar está escondida */\r\n}\r\n\r\n/* Navbar inferior */\r\n.bottom-navbar {\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 100vw;\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  background: var(--card);\r\n  border-top: 1px solid var(--border);\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  height: 56px;\r\n  z-index: 100;\r\n}\r\n.nav-btn {\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: var(--foreground);\r\n  cursor: pointer;\r\n  flex: 1;\r\n  padding: 8px 4px;\r\n  transition: all 0.3s ease;\r\n  border-radius: 12px;\r\n  position: relative;\r\n}\r\n.nav-btn:active, .nav-btn:focus {\r\n  background: var(--background);\r\n}\r\n.nav-btn:hover {\r\n  background: var(--background);\r\n  transform: translateY(-2px);\r\n}\r\n.nav-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: 4px;\r\n  transition: all 0.3s ease;\r\n}\r\n.nav-label {\r\n  font-size: 0.75em;\r\n  font-weight: 500;\r\n  letter-spacing: 0.5px;\r\n}\r\n.publish {\r\n  color: var(--primary);\r\n  font-weight: bold;\r\n}\r\n\r\n.bottom-navbar.hidden {\r\n  display: none;\r\n}\r\n\r\n/* Responsividade */\r\n@media (max-width: 500px) {\r\n  .feed-container {\r\n    max-width: 100vw;\r\n    border: none;\r\n    color: var(--foreground);\r\n  }\r\n  .feed-header {\r\n    padding: 10px 6px;\r\n  }\r\n  main {\r\n    padding: 8px 0;\r\n    padding-bottom: 70px;\r\n  }\r\n  .bottom-navbar {\r\n    max-width: 100vw;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "feed_display",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 20
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "following",
            "category": "interaction",
            "weight": 6,
            "confidence": 40
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 40
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "accessibility",
            "category": "technical",
            "weight": 6,
            "confidence": 40
          }
        ],
        "complexity": {
          "lines": 327,
          "functions": 1,
          "conditions": 52,
          "loops": 9,
          "score": 27.767584097859327
        },
        "imports": [
          "./HomeScreen.vue",
          "./SearchScreen.vue",
          "./PublishScreen.vue",
          "./MessagesScreen.vue",
          "./ProfileScreen.vue",
          "./NotificationsScreen.vue",
          "./IconComponent.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [
          "currentUser",
          "default"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": false,
          "hasErrorHandling": false,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 50
        }
      },
      {
        "name": "HomeScreen",
        "path": "src\\components\\HomeScreen.vue",
        "size": 749,
        "sections": {
          "template": "<div>\r\n    <h2>Página Inicial</h2>\r\n    <transition-group name=\"list\" tag=\"div\">\r\n      <PostItem\r\n        v-for=\"(post, index) in posts\"\r\n        :key=\"post.user + index\"\r\n        :user=\"post.user\"\r\n        :image=\"post.image\"\r\n        :caption=\"post.caption\"\r\n      />\r\n    </transition-group>\r\n  </div>",
          "script": "import PostItem from './PostItem.vue'\r\n\r\nexport default {\r\n  name: 'HomeScreen',\r\n  props: {\r\n    posts: Array\r\n  },\r\n  components: {\r\n    PostItem\r\n  }\r\n}",
          "style": ".list-enter-active, .list-leave-active {\r\n  transition: all 0.4s;\r\n}\r\n.list-enter-from {\r\n  opacity: 0;\r\n  transform: translateY(20px);\r\n}\r\n.list-leave-to {\r\n  opacity: 0;\r\n  transform: translateY(-20px);\r\n}"
        },
        "features": [
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 40
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 42,
          "functions": 0,
          "conditions": 0,
          "loops": 3,
          "score": 8.57142857142857
        },
        "imports": [
          "./PostItem.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [
          "posts"
        ],
        "quality": {
          "hasComments": false,
          "hasValidation": false,
          "hasErrorHandling": false,
          "hasTypeChecking": false,
          "usesModernSyntax": false,
          "hasAccessibility": false,
          "score": 0
        }
      },
      {
        "name": "IconComponent",
        "path": "src\\components\\IconComponent.vue",
        "size": 10800,
        "sections": {
          "template": "<!-- SVG para todos os ícones -->\r\n  <svg \r\n    :width=\"size\" \r\n    :height=\"size\" \r\n    :viewBox=\"viewBox\" \r\n    fill=\"none\" \r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    :class=\"iconClass\"\r\n  >\r\n    <path v-if=\"name === 'home'\" d=\"M9.135 20.773v-3.057c0-.78.637-1.414 1.423-1.414h2.875c.377 0 .74.15 1.006.414.267.265.417.625.417 1v3.057c-.002.325.126.637.356.867.23.23.544.36.87.36h1.962a3.46 3.46 0 002.443-1 3.41 3.41 0 001.013-2.422V9.867c0-.735-.328-1.431-.895-1.902l-6.671-5.29a3.097 3.097 0 00-3.949.072L3.467 7.965A2.474 2.474 0 002.5 9.867v8.702C2.5 20.464 4.047 22 5.956 22h1.916c.68 0 1.231-.544 1.236-1.218l.027-.009z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'search'\" d=\"M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z\" fill=\"currentColor\"/>\r\n    \r\n    <g v-else-if=\"name === 'publish'\">\r\n      <path d=\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\" fill=\"currentColor\"/>\r\n      <circle cx=\"12\" cy=\"12\" r=\"3\" fill=\"white\"/>\r\n    </g>\r\n    \r\n    <path v-else-if=\"name === 'messages'\" d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'profile'\" d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\" fill=\"currentColor\"/>\r\n    \r\n    <!-- Ícone de notificação - fallback para caso de erro -->\r\n    <path v-else-if=\"name === 'notifications'\" d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\" fill=\"currentColor\"/>\r\n    \r\n    <!-- Ícone de editar -->\r\n    <path v-else-if=\"name === 'edit'\" d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\" fill=\"currentColor\"/>\r\n    \r\n    <!-- Ícone de configurações -->\r\n    <path v-else-if=\"name === 'settings'\" d=\"M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.82,11.69,4.82,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z\" fill=\"currentColor\"/>\r\n    \r\n    <!-- Ícone de grupo -->\r\n    <path v-else-if=\"name === 'group'\" d=\"M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zM4 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm5 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zM1 18v-1c0-1.33.87-2.52 2.16-2.93L7 13.05c-.26.67-.42 1.39-.42 2.15 0 .95.21 1.85.58 2.66-.05.04-.12.06-.16.14H1zm22 0h-6c-.04-.08-.11-.1-.16-.14.37-.81.58-1.71.58-2.66 0-.76-.16-1.48-.42-2.15l3.84 1.02C21.13 14.48 22 15.67 22 17v1zM12.5 11.5c.91 0 1.63-.3 2.16-.85.54-.54.84-1.27.84-2.15 0-.91-.3-1.63-.84-2.16C14.13 5.8 13.41 5.5 12.5 5.5s-1.63.3-2.16.84C9.8 6.87 9.5 7.59 9.5 8.5c0 .88.3 1.61.84 2.15.53.55 1.25.85 2.16.85zM7.5 12c-.17 0-.33.02-.5.05.17-.38.5-.76.5-1.22C7.5 9.68 6.82 9 6 9s-1.5.68-1.5 1.83c0 .46.33.84.5 1.22-.17-.03-.33-.05-.5-.05C3.12 12 2 13.12 2 14.5V16h4v-.5C6 14.12 7.12 13 8.5 13c.17 0 .33.02.5.05-.17.38-.5.76-.5 1.22 0 1.15.68 1.83 1.5 1.83s1.5-.68 1.5-1.83c0-.46-.33-.84-.5-1.22.17.03.33.05.5.05 1.38 0 2.5-1.12 2.5-2.5V12h-4z\" fill=\"currentColor\"/>\r\n    \r\n    <!-- Ícone de fechar -->\r\n    <path v-else-if=\"name === 'close'\" d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'menu'\" d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'grid'\" d=\"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'code'\" d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0L19.2 12l-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'bookmark'\" d=\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'calendar'\" d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'heart'\" d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'comment'\" d=\"M21.99 4c0-1.1-.89-2-2-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'share'\" d=\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'qr'\" d=\"M3 11h8V3H3v8zm2-6h4v4H5V5zm8-2v8h8V3h-8zm6 6h-4V5h4v4zM3 21h8v-8H3v8zm2-6h4v4H5v-4zm13-2h2v2h-2zm0 4h2v2h-2zm-2 0h2v2h-2zm2 2h2v2h-2zm0 2h2v2h-2z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'chart'\" d=\"M3.5 18.49l6-6.01 4 4L22 6.92l-1.41-1.41-7.09 7.97-4-4L2 16.99z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'logout'\" d=\"M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'github'\" d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'linkedin'\" d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\" fill=\"currentColor\"/>\r\n    \r\n    <!-- Ícones adicionais para chat -->\r\n    <path v-else-if=\"name === 'back'\" d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'send'\" d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'attach'\" d=\"M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'image'\" d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'document'\" d=\"M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h8l6-6V4c0-1.1-.9-2-2-2H6zm7 7V3.5L18.5 9H13z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'check'\" d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'check-double'\" d=\"M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'mute'\" d=\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'block'\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z\" fill=\"currentColor\"/>\r\n    \r\n    <path v-else-if=\"name === 'camera'\" d=\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\" fill=\"currentColor\"/>\r\n  </svg>",
          "script": "export default {\r\n  name: 'IconComponent',\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    size: {\r\n      type: [String, Number],\r\n      default: 24\r\n    },\r\n    viewBox: {\r\n      type: String,\r\n      default: '0 0 24 24'\r\n    }\r\n  },\r\n  computed: {\r\n    iconClass() {\r\n      return `icon icon-${this.name}`\r\n    }\r\n  }\r\n}",
          "style": ".icon {\r\n  transition: all 0.2s ease;\r\n  color: inherit;\r\n}\r\n\r\n.icon:hover {\r\n  transform: scale(1.1);\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 40
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 20
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 20
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 20
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "sharing",
            "category": "interaction",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 20
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 123,
          "functions": 0,
          "conditions": 67,
          "loops": 1,
          "score": 82.6829268292683
        },
        "imports": [],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [
          "name",
          "required"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": false,
          "hasTypeChecking": false,
          "usesModernSyntax": false,
          "hasAccessibility": false,
          "score": 33
        }
      },
      {
        "name": "LoginForm",
        "path": "src\\components\\LoginForm.vue",
        "size": 8340,
        "sections": {
          "template": "<div class=\"form-container\">\r\n    <h2>Login - IF Wave</h2>\r\n    <form @submit.prevent=\"login\">\r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"email\" \r\n          type=\"email\" \r\n          placeholder=\"E-mail institucional\" \r\n          required \r\n          :class=\"{ 'error': errors.email }\"\r\n          @blur=\"validateEmail\"\r\n        />\r\n        <span v-if=\"errors.email\" class=\"error-msg\">{{ errors.email }}</span>\r\n      </div>\r\n      \r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"password\" \r\n          type=\"password\" \r\n          placeholder=\"Senha\" \r\n          required \r\n          :class=\"{ 'error': errors.password }\"\r\n          @blur=\"validatePassword\"\r\n        />\r\n        <span v-if=\"errors.password\" class=\"error-msg\">{{ errors.password }}</span>\r\n      </div>\r\n      \r\n      <button type=\"submit\" :disabled=\"isLoading || !isFormValid\" class=\"submit-btn\">\r\n        <span v-if=\"isLoading\" class=\"loading\">Entrando...</span>\r\n        <span v-else>Entrar</span>\r\n      </button>\r\n    </form>\r\n    \r\n    <button class=\"link-btn\" @click=\"$emit('go-register')\">\r\n      Não tem conta? Cadastre-se\r\n    </button>\r\n    \r\n    <div v-if=\"message\" :class=\"['message', messageType]\">\r\n      {{ message }}\r\n    </div>\r\n  </div>",
          "script": "export default {\r\n  name: 'LoginForm',\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      message: '',\r\n      messageType: '',\r\n      isLoading: false,\r\n      errors: {\r\n        email: '',\r\n        password: ''\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    isFormValid() {\r\n      return this.email && \r\n             this.password && \r\n             !this.errors.email && \r\n             !this.errors.password &&\r\n             this.isInstitutionalEmail(this.email)\r\n    }\r\n  },\r\n  methods: {\r\n    isInstitutionalEmail(email) {\r\n      const institutionalDomains = [\r\n        '@estudante.ifmt.edu.br',\r\n        '@professor.ifmt.edu.br',\r\n        '@ifmt.edu.br'\r\n      ]\r\n      return institutionalDomains.some(domain => email.endsWith(domain))\r\n    },\r\n\r\n    validateEmail() {\r\n      this.errors.email = ''\r\n      \r\n      if (!this.email) {\r\n        this.errors.email = 'E-mail é obrigatório'\r\n        return false\r\n      }\r\n      \r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n      if (!emailRegex.test(this.email)) {\r\n        this.errors.email = 'E-mail inválido'\r\n        return false\r\n      }\r\n      \r\n      if (!this.isInstitutionalEmail(this.email)) {\r\n        this.errors.email = 'Use apenas e-mail institucional do IFMT'\r\n        return false\r\n      }\r\n      \r\n      return true\r\n    },\r\n\r\n    validatePassword() {\r\n      this.errors.password = ''\r\n      \r\n      if (!this.password) {\r\n        this.errors.password = 'Senha é obrigatória'\r\n        return false\r\n      }\r\n      \r\n      if (this.password.length < 6) {\r\n        this.errors.password = 'Senha deve ter pelo menos 6 caracteres'\r\n        return false\r\n      }\r\n      \r\n      return true\r\n    },\r\n\r\n    // Simula hash de senha (apenas para demonstração)\r\n    hashPassword(password) {\r\n      // Em produção, use uma biblioteca de hash real como bcrypt\r\n      let hash = 0\r\n      for (let i = 0; i < password.length; i++) {\r\n        const char = password.charCodeAt(i)\r\n        hash = ((hash << 5) - hash) + char\r\n        hash = hash & hash // Converte para 32bit integer\r\n      }\r\n      return Math.abs(hash).toString(16)\r\n    },\r\n\r\n    // Simula verificação no banco de dados\r\n    findUserByEmail(email) {\r\n      const users = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\r\n      return users.find(user => user.email === email)\r\n    },\r\n\r\n    // Verifica se a senha está correta\r\n    verifyPassword(inputPassword, storedPasswordHash) {\r\n      const inputHash = this.hashPassword(inputPassword)\r\n      return inputHash === storedPasswordHash\r\n    },\r\n\r\n    async login() {\r\n      // Reset de erros e mensagens\r\n      this.errors = { email: '', password: '' }\r\n      this.message = ''\r\n      \r\n      // Validação dos campos\r\n      const emailValid = this.validateEmail()\r\n      const passwordValid = this.validatePassword()\r\n      \r\n      if (!emailValid || !passwordValid) {\r\n        return\r\n      }\r\n      \r\n      this.isLoading = true\r\n      \r\n      try {\r\n        // Simula delay de requisição\r\n        await new Promise(resolve => setTimeout(resolve, 1500))\r\n        \r\n        // Verifica se o usuário existe\r\n        const user = this.findUserByEmail(this.email)\r\n        \r\n        if (!user) {\r\n          this.message = 'E-mail não encontrado. Verifique ou crie uma conta.'\r\n          this.messageType = 'error'\r\n          this.errors.email = 'Usuário não cadastrado'\r\n          this.isLoading = false\r\n          return\r\n        }\r\n        \r\n        // Verifica a senha\r\n        if (!this.verifyPassword(this.password, user.passwordHash)) {\r\n          this.message = 'Senha incorreta. Tente novamente.'\r\n          this.messageType = 'error'\r\n          this.errors.password = 'Senha incorreta'\r\n          this.isLoading = false\r\n          return\r\n        }\r\n        \r\n        // Login bem-sucedido\r\n        this.message = `Bem-vindo(a), ${user.name}!`\r\n        this.messageType = 'success'\r\n        \r\n        // Salva sessão do usuário\r\n        localStorage.setItem('ifwave_current_user', JSON.stringify({\r\n          id: user.id,\r\n          name: user.name,\r\n          email: user.email,\r\n          course: user.course,\r\n          campus: user.campus,\r\n          loginTime: new Date().toISOString()\r\n        }))\r\n        \r\n        // Redireciona após 1.5 segundos\r\n        setTimeout(() => {\r\n          this.$emit('logged-in', user)\r\n        }, 1500)\r\n        \r\n      } catch (error) {\r\n        this.message = 'Erro interno. Tente novamente.'\r\n        this.messageType = 'error'\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    }\r\n  }\r\n}",
          "style": ".form-container {\r\n  background: #fff;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 8px;\r\n  padding: 24px 16px;\r\n  max-width: 320px;\r\n  margin: 32px auto;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.04);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 24px;\r\n  color: #262626;\r\n  font-size: 1.2em;\r\n  font-weight: 600;\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 16px;\r\n}\r\n\r\ninput {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  background: #fafafa;\r\n  transition: all 0.2s ease;\r\n  box-sizing: border-box;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border-color: #0095f6;\r\n  background: #fff;\r\n}\r\n\r\ninput.error {\r\n  border-color: #ed4956;\r\n  background: #fff5f5;\r\n}\r\n\r\n.error-msg {\r\n  display: block;\r\n  color: #ed4956;\r\n  font-size: 12px;\r\n  margin-top: 4px;\r\n  line-height: 1.3;\r\n}\r\n\r\n.submit-btn {\r\n  background: #0095f6;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 6px;\r\n  padding: 12px 0;\r\n  width: 100%;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  margin-top: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  position: relative;\r\n}\r\n\r\n.submit-btn:hover:not(:disabled) {\r\n  background: #0077c2;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background: #b2dffc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.loading {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.loading:before {\r\n  content: '';\r\n  width: 16px;\r\n  height: 16px;\r\n  border: 2px solid #ffffff;\r\n  border-top: 2px solid transparent;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-right: 8px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.link-btn {\r\n  background: none;\r\n  color: #0095f6;\r\n  border: none;\r\n  margin-top: 16px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-size: 13px;\r\n  width: 100%;\r\n  padding: 8px 0;\r\n  transition: color 0.2s ease;\r\n}\r\n\r\n.link-btn:hover {\r\n  color: #0077c2;\r\n  text-decoration: underline;\r\n}\r\n\r\n.message {\r\n  margin-top: 16px;\r\n  padding: 12px;\r\n  border-radius: 6px;\r\n  font-size: 13px;\r\n  text-align: center;\r\n  line-height: 1.4;\r\n}\r\n\r\n.message.success {\r\n  background: #d4edda;\r\n  color: #155724;\r\n  border: 1px solid #c3e6cb;\r\n}\r\n\r\n.message.error {\r\n  background: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .form-container {\r\n    margin: 16px;\r\n    max-width: none;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 100
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 60
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 60
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 356,
          "functions": 4,
          "conditions": 28,
          "loops": 9,
          "score": 17.078651685393258
        },
        "imports": [],
        "exports": [
          "default"
        ],
        "events": [
          "go-register",
          "logged-in"
        ],
        "props": [],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": true,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": false,
          "score": 67
        }
      },
      {
        "name": "MessagesScreen",
        "path": "src\\components\\MessagesScreen.vue",
        "size": 27271,
        "sections": {
          "template": "<div>\r\n    <!-- Lista de mensagens -->\r\n    <div class=\"messages-container\" v-if=\"!selectedChat\">\r\n      <!-- Verificação se o usuário está logado -->\r\n      <div v-if=\"!currentUser || !currentUser.id\" class=\"loading-state\">\r\n        <div class=\"loading-icon\">\r\n          <IconComponent name=\"messages\" :size=\"64\" />\r\n        </div>\r\n        <h3>Carregando...</h3>\r\n        <p>Aguarde enquanto carregamos suas mensagens.</p>\r\n      </div>\r\n\r\n      <!-- Conteúdo principal (só mostra se usuário estiver logado) -->\r\n      <div v-else>\r\n        <!-- Header da tela de mensagens -->\r\n        <div class=\"messages-header\">\r\n          <h2 class=\"messages-title\">Mensagens</h2>\r\n          <div class=\"header-actions\">\r\n            <button class=\"action-btn\" title=\"Nova mensagem\" @click=\"showNewMessage = true\">\r\n              <IconComponent name=\"edit\" :size=\"20\" />\r\n            </button>\r\n            <button class=\"action-btn\" title=\"Configurações\">\r\n              <IconComponent name=\"settings\" :size=\"20\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Barra de pesquisa -->\r\n        <div class=\"search-bar\">\r\n          <div class=\"search-input-container\">\r\n            <IconComponent name=\"search\" :size=\"16\" class=\"search-icon\" />\r\n            <input \r\n              type=\"text\" \r\n              placeholder=\"Pesquisar conversas...\" \r\n              v-model=\"searchQuery\"\r\n              class=\"search-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Seção de conversas ativas -->\r\n        <div class=\"active-conversations\" v-if=\"activeChats.length > 0\">\r\n          <h3 class=\"section-title\">Conversas Ativas</h3>\r\n          <div class=\"chat-list\">\r\n            <div \r\n              v-for=\"chat in filteredChats\" \r\n              :key=\"chat.id\"\r\n              class=\"chat-item\"\r\n              :class=\"{ 'unread': chat.unread }\"\r\n              @click=\"openChat(chat)\"\r\n            >\r\n              <div class=\"chat-avatar\">\r\n                <img :src=\"chat.avatar\" :alt=\"chat.name\" />\r\n                <span v-if=\"chat.online\" class=\"online-indicator\"></span>\r\n              </div>\r\n              <div class=\"chat-info\">\r\n                <div class=\"chat-header\">\r\n                  <span class=\"chat-name\">{{ chat.name }}</span>\r\n                  <span class=\"chat-course\">{{ chat.course }}</span>\r\n                  <span class=\"chat-time\">{{ chat.lastMessageTime }}</span>\r\n                </div>\r\n                <div class=\"chat-preview\">\r\n                  <span class=\"last-message\">{{ chat.lastMessage }}</span>\r\n                  <span v-if=\"chat.unreadCount > 0\" class=\"unread-badge\">{{ chat.unreadCount }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Seção de usuários disponíveis -->\r\n        <div class=\"available-users\" v-if=\"availableUsers.length > 0\">\r\n          <h3 class=\"section-title\">Usuários Disponíveis</h3>\r\n          <div class=\"user-list\">\r\n            <div \r\n              v-for=\"user in availableUsers\" \r\n              :key=\"user.id\"\r\n              class=\"user-item\"\r\n              @click=\"startChatWith(user)\"\r\n            >\r\n              <div class=\"user-avatar\">\r\n                <img :src=\"user.avatar\" :alt=\"user.name\" />\r\n                <span v-if=\"user.online\" class=\"online-indicator\"></span>\r\n              </div>\r\n              <div class=\"user-info\">\r\n                <div class=\"user-header\">\r\n                  <span class=\"user-name\">{{ user.name }}</span>\r\n                  <span class=\"user-course\">{{ user.course }}</span>\r\n                </div>\r\n                <div class=\"user-details\">\r\n                  <span class=\"user-campus\">{{ user.campus }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Estado vazio -->\r\n        <div v-if=\"!hasAnyConversations && availableUsers.length === 0\" class=\"empty-state\">\r\n          <div class=\"empty-icon\">\r\n            <IconComponent name=\"messages\" :size=\"64\" />\r\n          </div>\r\n          <h3 class=\"empty-title\">Nenhuma conversa ainda</h3>\r\n          <p class=\"empty-description\">\r\n            Comece uma conversa com seus colegas de classe cadastrados.\r\n          </p>\r\n          <button class=\"start-chat-btn\" @click=\"showNewMessage = true\">\r\n            <IconComponent name=\"edit\" :size=\"20\" />\r\n            Iniciar conversa\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Estado quando não há conversas ativas mas há usuários disponíveis -->\r\n        <div v-else-if=\"!hasAnyConversations && availableUsers.length > 0\" class=\"welcome-state\">\r\n          <div class=\"welcome-icon\">\r\n            <IconComponent name=\"messages\" :size=\"48\" />\r\n          </div>\r\n          <h3>Bem-vindo às Mensagens!</h3>\r\n          <p>Você pode iniciar uma conversa com qualquer usuário cadastrado abaixo.</p>\r\n        </div>\r\n\r\n        <!-- Modal de nova mensagem -->\r\n        <div v-if=\"showNewMessage\" class=\"modal-overlay\" @click=\"showNewMessage = false\">\r\n          <div class=\"new-message-modal\" @click.stop>\r\n            <div class=\"modal-header\">\r\n              <h3>Nova Conversa</h3>\r\n              <button @click=\"showNewMessage = false\" class=\"close-btn\">\r\n                <IconComponent name=\"close\" :size=\"20\" />\r\n              </button>\r\n            </div>\r\n            <div class=\"modal-content\">\r\n              <div class=\"search-contacts\">\r\n                <div class=\"search-input-container\">\r\n                  <IconComponent name=\"search\" :size=\"16\" class=\"search-icon\" />\r\n                  <input \r\n                    type=\"text\" \r\n                    placeholder=\"Pesquisar por nome, curso ou campus...\" \r\n                    v-model=\"newMessageQuery\"\r\n                    class=\"contact-search\"\r\n                    @input=\"filterContacts\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div class=\"contact-suggestions\">\r\n                <h4>\r\n                  <IconComponent name=\"group\" :size=\"18\" />\r\n                  Usuários Disponíveis ({{ filteredContacts.length }})\r\n                </h4>\r\n                <div class=\"suggestion-list\" v-if=\"filteredContacts.length > 0\">\r\n                  <div \r\n                    v-for=\"contact in filteredContacts\" \r\n                    :key=\"contact.id\"\r\n                    class=\"suggestion-item\"\r\n                    @click=\"selectContact(contact)\"\r\n                  >\r\n                    <img :src=\"contact.avatar\" :alt=\"contact.name\" class=\"suggestion-avatar\" />\r\n                    <div class=\"suggestion-info\">\r\n                      <span class=\"suggestion-name\">{{ contact.name }}</span>\r\n                      <span class=\"suggestion-detail\">{{ contact.course }}</span>\r\n                      <span class=\"suggestion-campus\">{{ contact.campus }}</span>\r\n                    </div>\r\n                    <div class=\"suggestion-actions\">\r\n                      <span v-if=\"contact.online\" class=\"online-indicator\" title=\"Online\"></span>\r\n                      <button class=\"start-chat-btn-small\" title=\"Iniciar conversa\">\r\n                        <IconComponent name=\"messages\" :size=\"16\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div v-else class=\"no-results\">\r\n                  <div class=\"no-results-icon\">\r\n                    <IconComponent name=\"search\" :size=\"32\" />\r\n                  </div>\r\n                  <p v-if=\"newMessageQuery\">Nenhum usuário encontrado para \"{{ newMessageQuery }}\"</p>\r\n                  <p v-else>Nenhum usuário disponível para conversar</p>\r\n                  <small>Tente pesquisar por nome, curso ou campus</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Tela de Chat -->\r\n    <ChatScreen \r\n      v-if=\"selectedChat\"\r\n      :chatUser=\"selectedChat\"\r\n      :currentUser=\"currentUser\"\r\n      @back=\"backToMessages\"\r\n      @view-profile=\"viewProfile\"\r\n      @user-blocked=\"handleUserBlocked\"\r\n      @user-status-change=\"handleUserStatusChange\"\r\n      @message-sent=\"handleMessageSent\"\r\n    />\r\n  </div>",
          "script": "import IconComponent from './IconComponent.vue'\r\nimport ChatScreen from './ChatScreen.vue'\r\n\r\nexport default {\r\n  name: 'MessagesScreen',\r\n  components: {\r\n    IconComponent,\r\n    ChatScreen\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      showNewMessage: false,\r\n      newMessageQuery: '',\r\n      selectedChat: null,\r\n      activeChats: [],\r\n      availableUsers: []\r\n    }\r\n  },\r\n  computed: {\r\n    filteredChats() {\r\n      if (!this.searchQuery) return this.activeChats\r\n      return this.activeChats.filter(chat => \r\n        chat.name.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n        chat.course.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      )\r\n    },\r\n    \r\n    filteredContacts() {\r\n      let contacts = this.availableUsers.filter(user => {\r\n        // Verificar se currentUser existe e tem id antes de comparar\r\n        const currentUserId = this.currentUser && this.currentUser.id ? this.currentUser.id : null\r\n        return currentUserId && user.id !== currentUserId && // Não mostrar o próprio usuário\r\n               !this.isBlocked(user.id) // Não mostrar usuários bloqueados\r\n      })\r\n      \r\n      if (this.newMessageQuery) {\r\n        contacts = contacts.filter(contact =>\r\n          contact.name.toLowerCase().includes(this.newMessageQuery.toLowerCase()) ||\r\n          contact.course.toLowerCase().includes(this.newMessageQuery.toLowerCase()) ||\r\n          contact.campus.toLowerCase().includes(this.newMessageQuery.toLowerCase())\r\n        )\r\n      }\r\n      \r\n      return contacts\r\n    },\r\n    \r\n    hasAnyConversations() {\r\n      return this.activeChats.length > 0\r\n    }\r\n  },\r\n  mounted() {\r\n    // Verificar se currentUser está disponível antes de carregar dados\r\n    if (this.currentUser && this.currentUser.id) {\r\n      this.loadRegisteredUsers()\r\n      this.loadActiveConversations()\r\n    } else {\r\n      // Se não há usuário logado, aguardar um pouco e tentar novamente\r\n      setTimeout(() => {\r\n        if (this.currentUser && this.currentUser.id) {\r\n          this.loadRegisteredUsers()\r\n          this.loadActiveConversations()\r\n        }\r\n      }, 500)\r\n    }\r\n  },\r\n  methods: {\r\n    loadRegisteredUsers() {\r\n      // Carregar todos os usuários cadastrados do localStorage\r\n      const users = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\r\n      \r\n      this.availableUsers = users\r\n        .filter(user => user && typeof user === 'object' && user.id) // Filtrar apenas objetos válidos com id\r\n        .map(user => ({\r\n          ...user,\r\n          online: Math.random() > 0.5, // Simular status online\r\n          avatar: user.avatar || this.generateAvatar(user.name || 'Usuário')\r\n        }))\r\n        .filter(user => {\r\n          // Verificar se currentUser existe e tem id antes de comparar\r\n          return this.currentUser && this.currentUser.id && user.id !== this.currentUser.id\r\n        })\r\n    },\r\n\r\n    loadActiveConversations() {\r\n      // Carregar conversas ativas do localStorage\r\n      const conversations = JSON.parse(localStorage.getItem('ifwave_conversations') || '[]')\r\n      \r\n      this.activeChats = conversations.map(conv => {\r\n        // Buscar dados atualizados do usuário\r\n        const user = this.availableUsers.find(u => u.id === conv.userId)\r\n        if (user) {\r\n          return {\r\n            ...conv,\r\n            name: user.name,\r\n            course: user.course,\r\n            campus: user.campus,\r\n            avatar: user.avatar,\r\n            online: user.online\r\n          }\r\n        }\r\n        return conv\r\n      }).filter(conv => conv && !this.isBlocked(conv.userId))\r\n      \r\n      // Ordenar por timestamp mais recente\r\n      this.activeChats.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0))\r\n    },\r\n\r\n    generateAvatar(name) {\r\n      const avatars = [\r\n        'https://images.unsplash.com/photo-1494790108755-2616b612b750?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1522071820081-009f0129c71c?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?auto=format&fit=crop&w=150&q=80'\r\n      ]\r\n      // Usar o hash do nome para escolher um avatar consistente\r\n      const hash = name.split('').reduce((a, b) => {\r\n        a = ((a << 5) - a) + b.charCodeAt(0)\r\n        return a & a\r\n      }, 0)\r\n      return avatars[Math.abs(hash) % avatars.length]\r\n    },\r\n\r\n    isBlocked(userId) {\r\n      const blockedUsers = JSON.parse(localStorage.getItem('ifwave_blocked_users') || '[]')\r\n      return blockedUsers.includes(userId)\r\n    },\r\n\r\n    openChat(chat) {\r\n      // Buscar dados completos do usuário\r\n      const user = this.availableUsers.find(u => u.id === chat.userId) || {\r\n        id: chat.userId,\r\n        name: chat.name,\r\n        course: chat.course,\r\n        campus: chat.campus || 'IFMT',\r\n        avatar: chat.avatar,\r\n        online: chat.online || false\r\n      }\r\n      \r\n      this.selectedChat = user\r\n      \r\n      // Marcar conversa como lida\r\n      this.markAsRead(chat.id)\r\n    },\r\n\r\n    startChatWith(user) {\r\n      this.selectedChat = user\r\n    },\r\n\r\n    selectContact(contact) {\r\n      this.showNewMessage = false\r\n      this.newMessageQuery = ''\r\n      \r\n      // Verificar se já existe uma conversa com este usuário\r\n      const existingChat = this.activeChats.find(chat => chat.userId === contact.id)\r\n      \r\n      if (existingChat) {\r\n        // Abrir conversa existente\r\n        this.selectedChat = contact\r\n        this.markAsRead(existingChat.id)\r\n      } else {\r\n        // Criar nova conversa\r\n        this.createNewConversation(contact)\r\n        this.selectedChat = contact\r\n      }\r\n    },\r\n\r\n    createNewConversation(contact) {\r\n      const conversations = JSON.parse(localStorage.getItem('ifwave_conversations') || '[]')\r\n      const chatId = `chat_${this.currentUser.id}_${contact.id}`\r\n      \r\n      const newConversation = {\r\n        id: chatId,\r\n        userId: contact.id,\r\n        name: contact.name,\r\n        avatar: contact.avatar,\r\n        course: contact.course,\r\n        campus: contact.campus,\r\n        lastMessage: '',\r\n        lastMessageTime: '',\r\n        timestamp: Date.now(),\r\n        unread: false,\r\n        unreadCount: 0,\r\n        online: contact.online || false\r\n      }\r\n      \r\n      conversations.unshift(newConversation) // Adicionar no início\r\n      localStorage.setItem('ifwave_conversations', JSON.stringify(conversations))\r\n      this.loadActiveConversations()\r\n    },\r\n\r\n    markAsRead(chatId) {\r\n      const conversations = JSON.parse(localStorage.getItem('ifwave_conversations') || '[]')\r\n      const conv = conversations.find(c => c.id === chatId)\r\n      if (conv) {\r\n        conv.unread = false\r\n        conv.unreadCount = 0\r\n        localStorage.setItem('ifwave_conversations', JSON.stringify(conversations))\r\n        this.loadActiveConversations()\r\n      }\r\n    },\r\n\r\n    handleUserBlocked() {\r\n      // Remover usuário da lista e fechar chat\r\n      this.selectedChat = null\r\n      this.loadActiveConversations()\r\n      this.loadRegisteredUsers()\r\n    },\r\n\r\n    handleUserStatusChange(data) {\r\n      // Atualizar status online do usuário\r\n      const user = this.availableUsers.find(u => u.id === data.userId)\r\n      if (user) {\r\n        user.online = data.online\r\n      }\r\n      \r\n      const chat = this.activeChats.find(c => c.userId === data.userId)\r\n      if (chat) {\r\n        chat.online = data.online\r\n      }\r\n    },\r\n\r\n    viewProfile(user) {\r\n      // Emitir evento para o componente pai navegar para o perfil\r\n      this.$emit('view-profile', user)\r\n    },\r\n\r\n    backToMessages() {\r\n      this.selectedChat = null\r\n      // Recarregar conversas para mostrar atualizações\r\n      this.loadActiveConversations()\r\n    },\r\n\r\n    handleMessageSent(data) {\r\n      // Atualizar lista de conversas quando mensagem é enviada\r\n      setTimeout(() => {\r\n        this.loadActiveConversations()\r\n      }, 100)\r\n      \r\n      // Exibir notificação de sucesso (opcional)\r\n      console.log('Mensagem enviada para:', data.recipient.name)\r\n    },\r\n\r\n    filterContacts() {\r\n      // Este método é chamado automaticamente pelo computed filteredContacts\r\n      // Mas pode ser usado para ações adicionais quando o usuário digita\r\n    },\r\n  },\r\n  \r\n  watch: {\r\n    // Atualizar conversas quando houver mudanças\r\n    '$route'() {\r\n      this.loadActiveConversations()\r\n    }\r\n  }\r\n}",
          "style": ".messages-container {\r\n  background: var(--background);\r\n  color: var(--foreground);\r\n  min-height: 100vh;\r\n  font-family: 'Roboto', 'Open Sans', Arial, sans-serif;\r\n}\r\n\r\n/* Header */\r\n.messages-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid var(--border);\r\n  background: var(--card);\r\n}\r\n\r\n.messages-title {\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n  color: var(--primary);\r\n  margin: 0;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  gap: 12px;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  color: var(--primary);\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.action-btn:hover {\r\n  background: var(--background);\r\n  transform: scale(1.1);\r\n}\r\n\r\n/* Barra de pesquisa */\r\n.search-bar {\r\n  padding: 16px 20px;\r\n  background: var(--card);\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.search-input-container {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.search-icon {\r\n  position: absolute;\r\n  left: 12px;\r\n  color: var(--foreground);\r\n  opacity: 0.6;\r\n  z-index: 1;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 12px 12px 12px 40px;\r\n  border: 1px solid var(--border);\r\n  border-radius: 24px;\r\n  background: var(--background);\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: border-color 0.2s ease;\r\n}\r\n\r\n.search-input:focus {\r\n  border-color: var(--primary);\r\n}\r\n\r\n/* Seções */\r\n.section-title {\r\n  font-size: 1.1em;\r\n  font-weight: 600;\r\n  color: var(--primary);\r\n  margin: 20px 20px 12px 20px;\r\n  padding-bottom: 8px;\r\n  border-bottom: 2px solid var(--verde-energia);\r\n}\r\n\r\n/* Lista de conversas */\r\n.chat-list, .group-list, .teacher-list, .user-list {\r\n  padding: 0 8px;\r\n}\r\n\r\n.chat-item, .group-item, .teacher-item, .user-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 12px 16px;\r\n  margin: 4px 0;\r\n  border-radius: 12px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  background: var(--card);\r\n}\r\n\r\n.chat-item:hover, .group-item:hover, .teacher-item:hover, .user-item:hover {\r\n  background: var(--background);\r\n  transform: translateX(4px);\r\n}\r\n\r\n.chat-item.unread {\r\n  background: linear-gradient(90deg, var(--card) 0%, rgba(46, 204, 113, 0.1) 100%);\r\n  border-left: 3px solid var(--verde-energia);\r\n}\r\n\r\n/* Avatares */\r\n.chat-avatar, .teacher-avatar, .user-avatar {\r\n  position: relative;\r\n  margin-right: 16px;\r\n}\r\n\r\n.chat-avatar img, .teacher-avatar img, .user-avatar img {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: 2px solid var(--border);\r\n}\r\n\r\n.online-indicator {\r\n  position: absolute;\r\n  bottom: 2px;\r\n  right: 2px;\r\n  width: 12px;\r\n  height: 12px;\r\n  background: var(--verde-energia);\r\n  border: 2px solid var(--card);\r\n  border-radius: 50%;\r\n}\r\n\r\n.group-avatar {\r\n  position: relative;\r\n  margin-right: 16px;\r\n  width: 48px;\r\n  height: 48px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.group-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  background: linear-gradient(135deg, var(--azul-ifmt), var(--roxo-inovador));\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n}\r\n\r\n.group-notification {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 12px;\r\n  height: 12px;\r\n  background: var(--amarelo-alegria);\r\n  border: 2px solid var(--card);\r\n  border-radius: 50%;\r\n}\r\n\r\n.teacher-status {\r\n  position: absolute;\r\n  bottom: 2px;\r\n  right: 2px;\r\n  width: 12px;\r\n  height: 12px;\r\n  border: 2px solid var(--card);\r\n  border-radius: 50%;\r\n}\r\n\r\n.teacher-status.available {\r\n  background: var(--verde-energia);\r\n}\r\n\r\n.teacher-status.busy {\r\n  background: #e74c3c;\r\n}\r\n\r\n.teacher-status.away {\r\n  background: var(--amarelo-alegria);\r\n}\r\n\r\n/* Informações */\r\n.chat-info, .group-info, .teacher-info, .user-info {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.chat-header, .group-header, .teacher-header, .user-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.chat-name, .group-name, .teacher-name, .user-name {\r\n  font-weight: 600;\r\n  color: var(--foreground);\r\n  font-size: 15px;\r\n}\r\n\r\n.chat-course, .group-members, .teacher-department, .user-course {\r\n  font-size: 12px;\r\n  color: var(--primary);\r\n  font-weight: 500;\r\n}\r\n\r\n.chat-time, .last-activity, .office-hours {\r\n  font-size: 12px;\r\n  color: var(--foreground);\r\n  opacity: 0.7;\r\n}\r\n\r\n.chat-preview, .group-preview, .teacher-details, .user-details {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.last-message, .group-subject, .teacher-subject, .user-campus {\r\n  font-size: 14px;\r\n  color: var(--foreground);\r\n  opacity: 0.8;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 200px;\r\n}\r\n\r\n.unread-badge {\r\n  background: var(--verde-energia);\r\n  color: white;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  padding: 2px 8px;\r\n  border-radius: 12px;\r\n  min-width: 20px;\r\n  text-align: center;\r\n}\r\n\r\n/* Estado vazio */\r\n.empty-state {\r\n  text-align: center;\r\n  padding: 60px 20px;\r\n  color: var(--foreground);\r\n}\r\n\r\n.empty-icon {\r\n  color: var(--primary);\r\n  opacity: 0.5;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.empty-title {\r\n  font-size: 1.3em;\r\n  font-weight: 600;\r\n  margin-bottom: 12px;\r\n  color: var(--primary);\r\n}\r\n\r\n.empty-description {\r\n  font-size: 14px;\r\n  opacity: 0.7;\r\n  margin-bottom: 30px;\r\n  line-height: 1.5;\r\n}\r\n\r\n.start-chat-btn {\r\n  background: linear-gradient(135deg, var(--azul-ifmt), var(--verde-energia));\r\n  color: white;\r\n  border: none;\r\n  padding: 12px 24px;\r\n  border-radius: 24px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.start-chat-btn:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 61, 124, 0.3);\r\n}\r\n\r\n/* Modal de nova mensagem */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.new-message-modal {\r\n  background: var(--card);\r\n  border-radius: 16px;\r\n  width: 90%;\r\n  max-width: 400px;\r\n  max-height: 80vh;\r\n  overflow: hidden;\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.modal-header h3 {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin: 0;\r\n  color: var(--primary);\r\n  font-size: 1.2em;\r\n}\r\n\r\n.close-btn {\r\n  background: none;\r\n  border: none;\r\n  padding: 4px;\r\n  cursor: pointer;\r\n  color: var(--foreground);\r\n  border-radius: 50%;\r\n  transition: background 0.2s ease;\r\n}\r\n\r\n.close-btn:hover {\r\n  background: var(--background);\r\n}\r\n\r\n.modal-content {\r\n  padding: 20px;\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.contact-search {\r\n  width: 100%;\r\n  padding: 12px 16px;\r\n  border: 1px solid var(--border);\r\n  border-radius: 24px;\r\n  background: var(--background);\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n  outline: none;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.contact-search:focus {\r\n  border-color: var(--primary);\r\n}\r\n\r\n.contact-suggestions {\r\n  margin-top: 8px;\r\n}\r\n\r\n.contact-suggestions h4 {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  color: var(--foreground);\r\n  font-size: 0.9em;\r\n  margin-bottom: 12px;\r\n  padding: 0 4px;\r\n}\r\n\r\n.suggestion-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.suggestion-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 12px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  border: 1px solid transparent;\r\n}\r\n\r\n.suggestion-item:hover {\r\n  background: var(--background-hover);\r\n  border-color: var(--primary-light);\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.suggestion-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  margin-right: 12px;\r\n  border: 2px solid var(--border);\r\n}\r\n\r\n.suggestion-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.suggestion-name {\r\n  font-weight: 600;\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n}\r\n\r\n.suggestion-detail {\r\n  font-size: 12px;\r\n  color: var(--primary);\r\n  opacity: 0.8;\r\n}\r\n\r\n.suggestion-campus {\r\n  font-size: 11px;\r\n  color: var(--foreground);\r\n  opacity: 0.6;\r\n}\r\n\r\n.suggestion-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-left: auto;\r\n}\r\n\r\n.start-chat-btn-small {\r\n  background: var(--primary);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.start-chat-btn-small:hover {\r\n  background: var(--primary-dark);\r\n  transform: scale(1.1);\r\n}\r\n\r\n.no-results {\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n  color: var(--foreground-muted);\r\n}\r\n\r\n.no-results-icon {\r\n  margin-bottom: 16px;\r\n  opacity: 0.5;\r\n}\r\n\r\n.no-results p {\r\n  margin-bottom: 4px;\r\n  color: var(--foreground);\r\n}\r\n\r\n.no-results small {\r\n  color: var(--foreground-muted);\r\n  font-size: 0.8em;\r\n}\r\n\r\n/* Estado de boas-vindas */\r\n.welcome-state {\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n  color: var(--foreground-muted);\r\n}\r\n\r\n.welcome-state .welcome-icon {\r\n  margin-bottom: 16px;\r\n  color: var(--primary);\r\n}\r\n\r\n.welcome-state h3 {\r\n  color: var(--foreground);\r\n  margin-bottom: 8px;\r\n  font-size: 1.2em;\r\n}\r\n\r\n.welcome-state p {\r\n  color: var(--foreground-muted);\r\n  font-size: 0.9em;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* Responsividade */\r\n@media (max-width: 500px) {\r\n  .messages-header {\r\n    padding: 12px 16px;\r\n  }\r\n  \r\n  .search-bar {\r\n    padding: 12px 16px;\r\n  }\r\n  \r\n  .section-title {\r\n    margin: 16px 16px 8px 16px;\r\n    font-size: 1em;\r\n  }\r\n  \r\n  .chat-item, .group-item, .teacher-item {\r\n    padding: 10px 12px;\r\n  }\r\n  \r\n  .chat-avatar img, .teacher-avatar img {\r\n    width: 42px;\r\n    height: 42px;\r\n  }\r\n  \r\n  .group-icon {\r\n    width: 42px;\r\n    height: 42px;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 80
          },
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 60
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "accessibility",
            "category": "technical",
            "weight": 6,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 1014,
          "functions": 18,
          "conditions": 64,
          "loops": 50,
          "score": 18.93491124260355
        },
        "imports": [
          "./IconComponent.vue",
          "./ChatScreen.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [
          "view-profile"
        ],
        "props": [
          "currentUser",
          "required"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": false,
          "hasTypeChecking": true,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 83
        }
      },
      {
        "name": "NotificationsScreen",
        "path": "src\\components\\NotificationsScreen.vue",
        "size": 24093,
        "sections": {
          "template": "<div class=\"notifications-container\">\r\n    <!-- Header -->\r\n    <header class=\"notifications-header\">\r\n      <button class=\"back-btn\" @click=\"$emit('back')\" title=\"Voltar\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\r\n          <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n        </svg>\r\n      </button>\r\n      <h1 class=\"header-title\">Atividade</h1>\r\n      <div class=\"header-actions\">\r\n        <button class=\"action-btn\" title=\"Marcar todas como lidas\">\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\">\r\n            <path d=\"M20 6L9 17L4 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- Content -->\r\n    <div class=\"notifications-content\">\r\n      <!-- Filter Tabs -->\r\n      <div class=\"filter-tabs\">\r\n        <button \r\n          v-for=\"tab in tabs\" \r\n          :key=\"tab.id\"\r\n          :class=\"['tab-btn', { active: activeTab === tab.id }]\"\r\n          @click=\"activeTab = tab.id\"\r\n        >\r\n          {{ tab.label }}\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Notifications List -->\r\n      <div class=\"notifications-list\">\r\n        <!-- Today Section -->\r\n        <div v-if=\"todayNotifications.length > 0\" class=\"time-section\">\r\n          <h3 class=\"section-title\">Hoje</h3>\r\n          <div class=\"notifications-group\">\r\n            <div\r\n              v-for=\"notification in todayNotifications\"\r\n              :key=\"notification.id\"\r\n              :class=\"['notification-item', { unread: !notification.read }]\"\r\n              @click=\"markAsRead(notification)\"\r\n            >\r\n              <div class=\"notification-avatar\">\r\n                <div v-if=\"notification.type === 'like'\" class=\"action-icon like-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/>\r\n                  </svg>\r\n                </div>\r\n                <div v-else-if=\"notification.type === 'comment'\" class=\"action-icon comment-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\r\n                  </svg>\r\n                </div>\r\n                <div v-else-if=\"notification.type === 'follow'\" class=\"action-icon follow-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\"/>\r\n                    <circle cx=\"9\" cy=\"7\" r=\"4\"/>\r\n                    <path d=\"M22 21v-2a4 4 0 0 0-3-3.87\"/>\r\n                    <path d=\"M16 3.13a4 4 0 0 1 0 7.75\"/>\r\n                  </svg>\r\n                </div>\r\n                <div v-else-if=\"notification.type === 'mention'\" class=\"action-icon mention-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c1.54 0 3-.32 4.24-.9L16 21l-.45-.08L15.11 20C17.96 18.14 20 15.28 20 12c0-4.41-3.59-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\"/>\r\n                    <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                  </svg>\r\n                </div>\r\n                <img v-else :src=\"notification.avatar || getDefaultAvatar(notification.username)\" :alt=\"notification.username\" class=\"user-avatar\">\r\n              </div>\r\n              \r\n              <div class=\"notification-content\">\r\n                <div class=\"notification-text\">\r\n                  <span class=\"username\">{{ notification.username }}</span>\r\n                  <span class=\"action-text\">{{ getActionText(notification) }}</span>\r\n                  <span class=\"time\">{{ getRelativeTime(notification.timestamp) }}</span>\r\n                </div>\r\n                \r\n                <div v-if=\"notification.preview\" class=\"notification-preview\">\r\n                  <img :src=\"notification.preview\" :alt=\"'Preview'\" class=\"preview-image\">\r\n                </div>\r\n              </div>\r\n\r\n              <div v-if=\"notification.type === 'follow'\" class=\"notification-action\">\r\n                <button v-if=\"!notification.following\" class=\"follow-btn\" @click.stop=\"followUser(notification)\">\r\n                  Seguir\r\n                </button>\r\n                <button v-else class=\"following-btn\" @click.stop=\"unfollowUser(notification)\">\r\n                  Seguindo\r\n                </button>\r\n              </div>\r\n\r\n              <div v-if=\"!notification.read\" class=\"unread-indicator\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- This Week Section -->\r\n        <div v-if=\"thisWeekNotifications.length > 0\" class=\"time-section\">\r\n          <h3 class=\"section-title\">Esta semana</h3>\r\n          <div class=\"notifications-group\">\r\n            <div\r\n              v-for=\"notification in thisWeekNotifications\"\r\n              :key=\"notification.id\"\r\n              :class=\"['notification-item', { unread: !notification.read }]\"\r\n              @click=\"markAsRead(notification)\"\r\n            >\r\n              <div class=\"notification-avatar\">\r\n                <div v-if=\"notification.type === 'like'\" class=\"action-icon like-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/>\r\n                  </svg>\r\n                </div>\r\n                <div v-else-if=\"notification.type === 'comment'\" class=\"action-icon comment-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\r\n                  </svg>\r\n                </div>\r\n                <div v-else-if=\"notification.type === 'follow'\" class=\"action-icon follow-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\"/>\r\n                    <circle cx=\"9\" cy=\"7\" r=\"4\"/>\r\n                    <path d=\"M22 21v-2a4 4 0 0 0-3-3.87\"/>\r\n                    <path d=\"M16 3.13a4 4 0 0 1 0 7.75\"/>\r\n                  </svg>\r\n                </div>\r\n                <img v-else :src=\"notification.avatar || getDefaultAvatar(notification.username)\" :alt=\"notification.username\" class=\"user-avatar\">\r\n              </div>\r\n              \r\n              <div class=\"notification-content\">\r\n                <div class=\"notification-text\">\r\n                  <span class=\"username\">{{ notification.username }}</span>\r\n                  <span class=\"action-text\">{{ getActionText(notification) }}</span>\r\n                  <span class=\"time\">{{ getRelativeTime(notification.timestamp) }}</span>\r\n                </div>\r\n                \r\n                <div v-if=\"notification.preview\" class=\"notification-preview\">\r\n                  <img :src=\"notification.preview\" :alt=\"'Preview'\" class=\"preview-image\">\r\n                </div>\r\n              </div>\r\n\r\n              <div v-if=\"notification.type === 'follow'\" class=\"notification-action\">\r\n                <button v-if=\"!notification.following\" class=\"follow-btn\" @click.stop=\"followUser(notification)\">\r\n                  Seguir\r\n                </button>\r\n                <button v-else class=\"following-btn\" @click.stop=\"unfollowUser(notification)\">\r\n                  Seguindo\r\n                </button>\r\n              </div>\r\n\r\n              <div v-if=\"!notification.read\" class=\"unread-indicator\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Older Section -->\r\n        <div v-if=\"olderNotifications.length > 0\" class=\"time-section\">\r\n          <h3 class=\"section-title\">Anteriores</h3>\r\n          <div class=\"notifications-group\">\r\n            <div\r\n              v-for=\"notification in olderNotifications\"\r\n              :key=\"notification.id\"\r\n              :class=\"['notification-item', { unread: !notification.read }]\"\r\n              @click=\"markAsRead(notification)\"\r\n            >\r\n              <div class=\"notification-avatar\">\r\n                <img :src=\"notification.avatar || getDefaultAvatar(notification.username)\" :alt=\"notification.username\" class=\"user-avatar\">\r\n              </div>\r\n              \r\n              <div class=\"notification-content\">\r\n                <div class=\"notification-text\">\r\n                  <span class=\"username\">{{ notification.username }}</span>\r\n                  <span class=\"action-text\">{{ getActionText(notification) }}</span>\r\n                  <span class=\"time\">{{ getRelativeTime(notification.timestamp) }}</span>\r\n                </div>\r\n              </div>\r\n\r\n              <div v-if=\"!notification.read\" class=\"unread-indicator\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Empty State -->\r\n        <div v-if=\"filteredNotifications.length === 0\" class=\"empty-state\">\r\n          <div class=\"empty-icon\">\r\n            <svg width=\"96\" height=\"96\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n              <path d=\"M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9\"/>\r\n              <path d=\"M13.73 21a2 2 0 0 1-3.46 0\"/>\r\n            </svg>\r\n          </div>\r\n          <h3 class=\"empty-title\">Nenhuma notificação ainda</h3>\r\n          <p class=\"empty-description\">Quando alguém curtir, comentar ou seguir você, aparecerá aqui.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>",
          "script": "export default {\r\n  name: 'NotificationsScreen',\r\n  props: {\r\n    notifications: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      activeTab: 'all',\r\n      tabs: [\r\n        { id: 'all', label: 'Todas' },\r\n        { id: 'likes', label: 'Curtidas' },\r\n        { id: 'comments', label: 'Comentários' },\r\n        { id: 'follows', label: 'Seguidores' }\r\n      ],\r\n      mockNotifications: [\r\n        {\r\n          id: 1,\r\n          type: 'like',\r\n          username: 'ana.silva',\r\n          avatar: null,\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 min ago\r\n          read: false,\r\n          preview: 'https://picsum.photos/50/50?random=1'\r\n        },\r\n        {\r\n          id: 2,\r\n          type: 'comment',\r\n          username: 'pedro.costa',\r\n          avatar: null,\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2h ago\r\n          read: false,\r\n          comment: 'Muito legal esse projeto!',\r\n          preview: 'https://picsum.photos/50/50?random=2'\r\n        },\r\n        {\r\n          id: 3,\r\n          type: 'follow',\r\n          username: 'maria.santos',\r\n          avatar: null,\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4), // 4h ago\r\n          read: true,\r\n          following: false\r\n        },\r\n        {\r\n          id: 4,\r\n          type: 'mention',\r\n          username: 'joao.oliveira',\r\n          avatar: null,\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago\r\n          read: true,\r\n          post: 'Novo projeto no GitHub!'\r\n        },\r\n        {\r\n          id: 5,\r\n          type: 'like',\r\n          username: 'carla.lima',\r\n          avatar: null,\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2), // 2 days ago\r\n          read: true,\r\n          preview: 'https://picsum.photos/50/50?random=3'\r\n        },\r\n        {\r\n          id: 6,\r\n          type: 'comment',\r\n          username: 'rafael.souza',\r\n          avatar: null,\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5), // 5 days ago\r\n          read: true,\r\n          comment: 'Parabéns pelo código!',\r\n          preview: 'https://picsum.photos/50/50?random=4'\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    allNotifications() {\r\n      return [...this.mockNotifications, ...this.notifications].sort((a, b) => \r\n        new Date(b.timestamp) - new Date(a.timestamp)\r\n      )\r\n    },\r\n    \r\n    filteredNotifications() {\r\n      let filtered = this.allNotifications\r\n\r\n      if (this.activeTab !== 'all') {\r\n        const typeMap = {\r\n          'likes': ['like'],\r\n          'comments': ['comment'],\r\n          'follows': ['follow']\r\n        }\r\n        filtered = filtered.filter(n => typeMap[this.activeTab]?.includes(n.type))\r\n      }\r\n\r\n      return filtered\r\n    },\r\n    \r\n    todayNotifications() {\r\n      const today = new Date()\r\n      today.setHours(0, 0, 0, 0)\r\n      \r\n      return this.filteredNotifications.filter(n => {\r\n        const notifDate = new Date(n.timestamp)\r\n        notifDate.setHours(0, 0, 0, 0)\r\n        return notifDate.getTime() === today.getTime()\r\n      })\r\n    },\r\n    \r\n    thisWeekNotifications() {\r\n      const today = new Date()\r\n      const weekStart = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay())\r\n      const yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1)\r\n      \r\n      return this.filteredNotifications.filter(n => {\r\n        const notifDate = new Date(n.timestamp)\r\n        return notifDate >= weekStart && notifDate <= yesterday\r\n      })\r\n    },\r\n    \r\n    olderNotifications() {\r\n      const today = new Date()\r\n      const weekStart = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay())\r\n      \r\n      return this.filteredNotifications.filter(n => {\r\n        const notifDate = new Date(n.timestamp)\r\n        return notifDate < weekStart\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    getDefaultAvatar(username) {\r\n      // Gera um avatar baseado no nome do usuário\r\n      const colors = ['FF6B6B', '4ECDC4', '45B7D1', 'FFA07A', '98D8C8', 'F7DC6F', 'BB8FCE', '85C1E9']\r\n      const colorIndex = username.length % colors.length\r\n      const initials = username.split('.').map(n => n[0]).join('').toUpperCase().slice(0, 2)\r\n      \r\n      return `https://ui-avatars.com/api/?name=${initials}&background=${colors[colorIndex]}&color=fff&size=44&format=svg`\r\n    },\r\n    \r\n    getActionText(notification) {\r\n      switch (notification.type) {\r\n        case 'like':\r\n          return 'curtiu sua publicação.'\r\n        case 'comment':\r\n          return `comentou: \"${notification.comment || 'Comentário interessante!'}\"`\r\n        case 'follow':\r\n          return 'começou a seguir você.'\r\n        case 'mention':\r\n          return `mencionou você em: \"${notification.post || 'uma publicação'}\"`\r\n        default:\r\n          return 'interagiu com você.'\r\n      }\r\n    },\r\n    \r\n    getRelativeTime(timestamp) {\r\n      const now = new Date()\r\n      const time = new Date(timestamp)\r\n      const diffInSeconds = Math.floor((now - time) / 1000)\r\n      \r\n      if (diffInSeconds < 60) {\r\n        return 'agora'\r\n      } else if (diffInSeconds < 3600) {\r\n        const minutes = Math.floor(diffInSeconds / 60)\r\n        return `${minutes}min`\r\n      } else if (diffInSeconds < 86400) {\r\n        const hours = Math.floor(diffInSeconds / 3600)\r\n        return `${hours}h`\r\n      } else if (diffInSeconds < 604800) {\r\n        const days = Math.floor(diffInSeconds / 86400)\r\n        return `${days}d`\r\n      } else {\r\n        const weeks = Math.floor(diffInSeconds / 604800)\r\n        return `${weeks}sem`\r\n      }\r\n    },\r\n    \r\n    markAsRead(notification) {\r\n      notification.read = true\r\n      // Aqui você pode fazer uma chamada para a API para marcar como lida\r\n      this.$emit('notification-read', notification)\r\n    },\r\n    \r\n    followUser(notification) {\r\n      notification.following = true\r\n      // Aqui você pode fazer uma chamada para a API para seguir o usuário\r\n      this.$emit('follow-user', notification.username)\r\n    },\r\n    \r\n    unfollowUser(notification) {\r\n      notification.following = false\r\n      // Aqui você pode fazer uma chamada para a API para deixar de seguir\r\n      this.$emit('unfollow-user', notification.username)\r\n    }\r\n  }\r\n}",
          "style": ".notifications-container {\r\n  min-height: 100vh;\r\n  background: #ffffff;\r\n  color: #262626;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\r\n}\r\n\r\n/* Header */\r\n.notifications-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 16px;\r\n  height: 60px;\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #dbdbdb;\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 10;\r\n}\r\n\r\n.back-btn {\r\n  background: none;\r\n  border: none;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  color: #262626;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.back-btn:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.header-title {\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  margin: 0;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  color: #262626;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n/* Content */\r\n.notifications-content {\r\n  padding-bottom: 80px;\r\n}\r\n\r\n/* Filter Tabs */\r\n.filter-tabs {\r\n  display: flex;\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #dbdbdb;\r\n  overflow-x: auto;\r\n  scrollbar-width: none;\r\n  -ms-overflow-style: none;\r\n}\r\n\r\n.filter-tabs::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.tab-btn {\r\n  background: none;\r\n  border: none;\r\n  padding: 16px 20px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #8e8e8e;\r\n  cursor: pointer;\r\n  border-bottom: 2px solid transparent;\r\n  transition: all 0.2s;\r\n  white-space: nowrap;\r\n  min-width: max-content;\r\n}\r\n\r\n.tab-btn.active {\r\n  color: #262626;\r\n  border-bottom-color: #262626;\r\n}\r\n\r\n.tab-btn:hover {\r\n  color: #262626;\r\n}\r\n\r\n/* Notifications List */\r\n.notifications-list {\r\n  background: #ffffff;\r\n}\r\n\r\n.time-section {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.section-title {\r\n  padding: 16px 16px 8px 16px;\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.notifications-group {\r\n  background: #ffffff;\r\n}\r\n\r\n.notification-item {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 12px 16px;\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n  border-bottom: 1px solid #efefef;\r\n}\r\n\r\n.notification-item:hover {\r\n  background-color: #fafafa;\r\n}\r\n\r\n.notification-item.unread {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.notification-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n/* Avatar */\r\n.notification-avatar {\r\n  width: 44px;\r\n  height: 44px;\r\n  margin-right: 12px;\r\n  position: relative;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.user-avatar {\r\n  width: 44px;\r\n  height: 44px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: 1px solid #dbdbdb;\r\n}\r\n\r\n.action-icon {\r\n  width: 44px;\r\n  height: 44px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n}\r\n\r\n.like-icon {\r\n  background: linear-gradient(45deg, #ff6b6b, #ee5a24);\r\n  color: white;\r\n}\r\n\r\n.comment-icon {\r\n  background: linear-gradient(45deg, #0095f6, #005bb5);\r\n  color: white;\r\n}\r\n\r\n.follow-icon {\r\n  background: linear-gradient(45deg, #833ab4, #6a1b9a);\r\n  color: white;\r\n}\r\n\r\n.mention-icon {\r\n  background: linear-gradient(45deg, #f39c12, #e67e22);\r\n  color: white;\r\n}\r\n\r\n/* Content */\r\n.notification-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n}\r\n\r\n.notification-text {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.username {\r\n  font-weight: 600;\r\n  color: #262626;\r\n  margin-right: 4px;\r\n}\r\n\r\n.action-text {\r\n  color: #262626;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  margin-right: 4px;\r\n}\r\n\r\n.time {\r\n  color: #8e8e8e;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n  display: block;\r\n  margin-top: 2px;\r\n}\r\n\r\n/* Preview */\r\n.notification-preview {\r\n  margin-left: 12px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.preview-image {\r\n  width: 44px;\r\n  height: 44px;\r\n  border-radius: 8px;\r\n  object-fit: cover;\r\n  border: 1px solid #dbdbdb;\r\n}\r\n\r\n/* Actions */\r\n.notification-action {\r\n  margin-left: 12px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.follow-btn {\r\n  background: #0095f6;\r\n  color: white;\r\n  border: none;\r\n  padding: 6px 16px;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.follow-btn:hover {\r\n  background: #1877f2;\r\n}\r\n\r\n.following-btn {\r\n  background: #ffffff;\r\n  color: #262626;\r\n  border: 1px solid #dbdbdb;\r\n  padding: 6px 16px;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.following-btn:hover {\r\n  background: #f5f5f5;\r\n}\r\n\r\n/* Unread Indicator */\r\n.unread-indicator {\r\n  position: absolute;\r\n  right: 16px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 8px;\r\n  height: 8px;\r\n  background: #0095f6;\r\n  border-radius: 50%;\r\n}\r\n\r\n/* Empty State */\r\n.empty-state {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 64px 32px;\r\n  text-align: center;\r\n  min-height: 50vh;\r\n}\r\n\r\n.empty-icon {\r\n  color: #c7c7c7;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.empty-title {\r\n  font-size: 22px;\r\n  font-weight: 300;\r\n  color: #262626;\r\n  margin: 0 0 8px 0;\r\n}\r\n\r\n.empty-description {\r\n  font-size: 14px;\r\n  color: #8e8e8e;\r\n  margin: 0;\r\n  line-height: 18px;\r\n}\r\n\r\n/* Mobile Responsive */\r\n@media (max-width: 768px) {\r\n  .notifications-header {\r\n    padding: 0 12px;\r\n    height: 56px;\r\n  }\r\n  \r\n  .header-title {\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .tab-btn {\r\n    padding: 12px 16px;\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .notification-item {\r\n    padding: 10px 12px;\r\n  }\r\n  \r\n  .notification-avatar {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 10px;\r\n  }\r\n  \r\n  .user-avatar,\r\n  .action-icon {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n  \r\n  .preview-image {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n  \r\n  .section-title {\r\n    padding: 12px 12px 6px 12px;\r\n    font-size: 15px;\r\n  }\r\n  \r\n  .action-text {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .follow-btn,\r\n  .following-btn {\r\n    padding: 5px 12px;\r\n    font-size: 13px;\r\n  }\r\n}\r\n\r\n/* Dark Mode Support (opcional) */\r\n@media (prefers-color-scheme: dark) {\r\n  .notifications-container {\r\n    background: #000000;\r\n    color: #ffffff;\r\n  }\r\n  \r\n  .notifications-header {\r\n    background: #000000;\r\n    border-bottom-color: #262626;\r\n  }\r\n  \r\n  .back-btn,\r\n  .action-btn,\r\n  .header-title {\r\n    color: #ffffff;\r\n  }\r\n  \r\n  .back-btn:hover,\r\n  .action-btn:hover {\r\n    background-color: #1a1a1a;\r\n  }\r\n  \r\n  .filter-tabs {\r\n    background: #000000;\r\n    border-bottom-color: #262626;\r\n  }\r\n  \r\n  .tab-btn {\r\n    color: #a8a8a8;\r\n  }\r\n  \r\n  .tab-btn.active,\r\n  .tab-btn:hover {\r\n    color: #ffffff;\r\n    border-bottom-color: #ffffff;\r\n  }\r\n  \r\n  .notifications-list,\r\n  .notifications-group {\r\n    background: #000000;\r\n  }\r\n  \r\n  .notification-item {\r\n    border-bottom-color: #262626;\r\n  }\r\n  \r\n  .notification-item:hover {\r\n    background-color: #1a1a1a;\r\n  }\r\n  \r\n  .notification-item.unread {\r\n    background-color: #0d1117;\r\n  }\r\n  \r\n  .user-avatar {\r\n    border-color: #262626;\r\n  }\r\n  \r\n  .username,\r\n  .action-text,\r\n  .section-title {\r\n    color: #ffffff;\r\n  }\r\n  \r\n  .time {\r\n    color: #a8a8a8;\r\n  }\r\n  \r\n  .preview-image {\r\n    border-color: #262626;\r\n  }\r\n  \r\n  .following-btn {\r\n    background: #000000;\r\n    color: #ffffff;\r\n    border-color: #262626;\r\n  }\r\n  \r\n  .following-btn:hover {\r\n    background: #1a1a1a;\r\n  }\r\n  \r\n  .empty-icon {\r\n    color: #525252;\r\n  }\r\n  \r\n  .empty-title {\r\n    color: #ffffff;\r\n  }\r\n  \r\n  .empty-description {\r\n    color: #a8a8a8;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 40
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "following",
            "category": "interaction",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "live_streaming",
            "category": "advanced",
            "weight": 4,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 80
          },
          {
            "name": "dark_mode",
            "category": "technical",
            "weight": 3,
            "confidence": 40
          },
          {
            "name": "accessibility",
            "category": "technical",
            "weight": 6,
            "confidence": 40
          }
        ],
        "complexity": {
          "lines": 878,
          "functions": 7,
          "conditions": 210,
          "loops": 24,
          "score": 40.75170842824601
        },
        "imports": [],
        "exports": [
          "default"
        ],
        "events": [
          "back",
          "notification-read",
          "follow-user",
          "unfollow-user"
        ],
        "props": [
          "notifications",
          "default"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": false,
          "hasErrorHandling": false,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 50
        }
      },
      {
        "name": "PostItem",
        "path": "src\\components\\PostItem.vue",
        "size": 1457,
        "sections": {
          "template": "<div class=\"post\">\r\n    <div class=\"post-header\">\r\n      <span class=\"avatar\">{{ user.charAt(0).toUpperCase() }}</span>\r\n      <span class=\"username\">{{ user }}</span>\r\n    </div>\r\n    <img :src=\"image\" class=\"post-image\" />\r\n    <div class=\"post-caption\">\r\n      <span class=\"username\">{{ user }}</span>\r\n      <span>{{ caption }}</span>\r\n    </div>\r\n  </div>",
          "script": "export default {\r\n  name: 'PostItem',\r\n  props: {\r\n    user: String,\r\n    image: String,\r\n    caption: String\r\n  }\r\n}",
          "style": ".post {\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 4px;\r\n  margin-bottom: 24px;\r\n  background: #fff;\r\n  box-sizing: border-box;\r\n}\r\n.post-header {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px;\r\n}\r\n.avatar {\r\n  width: 32px;\r\n  height: 32px;\r\n  background: #bbb;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  margin-right: 8px;\r\n}\r\n.username {\r\n  font-weight: bold;\r\n  color: #262626;\r\n}\r\n.post-image {\r\n  width: 100%;\r\n  display: block;\r\n  margin: 0;\r\n  max-height: 350px;\r\n  object-fit: cover;\r\n}\r\n.post-caption {\r\n  padding: 8px;\r\n  font-size: 0.95em;\r\n  word-break: break-word;\r\n}\r\n@media (max-width: 500px) {\r\n  .post {\r\n    border-radius: 0;\r\n    margin-bottom: 16px;\r\n  }\r\n  .post-image {\r\n    max-height: 220px;\r\n  }\r\n  .post-caption {\r\n    padding: 6px;\r\n    font-size: 0.93em;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 80,
          "functions": 0,
          "conditions": 1,
          "loops": 0,
          "score": 1.875
        },
        "imports": [],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [
          "user",
          "image",
          "caption"
        ],
        "quality": {
          "hasComments": false,
          "hasValidation": false,
          "hasErrorHandling": false,
          "hasTypeChecking": false,
          "usesModernSyntax": false,
          "hasAccessibility": false,
          "score": 0
        }
      },
      {
        "name": "ProfileScreen",
        "path": "src\\components\\ProfileScreen.vue",
        "size": 27643,
        "sections": {
          "template": "<div class=\"profile-container\">\r\n    <!-- Modal de Edição de Perfil -->\r\n    <div v-if=\"showEditModal\" class=\"edit-modal-overlay\" @click=\"closeEditModal\">\r\n      <div class=\"edit-modal\" @click.stop>\r\n        <div class=\"edit-header\">\r\n          <button class=\"btn-cancel\" @click=\"closeEditModal\">Cancelar</button>\r\n          <h3>Editar perfil</h3>\r\n          <button class=\"btn-save\" @click=\"saveProfile\" :disabled=\"isSaving\">\r\n            {{ isSaving ? 'Salvando...' : 'Concluído' }}\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"edit-content\">\r\n          <div class=\"edit-avatar\">\r\n            <img :src=\"editForm.avatar\" :alt=\"editForm.name\" />\r\n            <button class=\"change-photo-btn\" @click=\"changePhoto\">\r\n              Alterar foto do perfil\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"edit-fields\">\r\n            <div class=\"field-group\">\r\n              <label>Nome</label>\r\n              <input v-model=\"editForm.name\" type=\"text\" maxlength=\"30\" />\r\n            </div>\r\n\r\n            <div class=\"field-group\">\r\n              <label>Nome de usuário</label>\r\n              <input v-model=\"editForm.username\" type=\"text\" maxlength=\"30\" />\r\n            </div>\r\n\r\n            <div class=\"field-group\">\r\n              <label>Curso</label>\r\n              <input v-model=\"editForm.course\" type=\"text\" />\r\n            </div>\r\n\r\n            <div class=\"field-group\">\r\n              <label>Campus</label>\r\n              <input v-model=\"editForm.campus\" type=\"text\" />\r\n            </div>\r\n\r\n            <div class=\"field-group\">\r\n              <label>Bio</label>\r\n              <textarea v-model=\"editForm.bio\" maxlength=\"150\" rows=\"3\"></textarea>\r\n              <span class=\"char-count\">{{ editForm.bio.length }}/150</span>\r\n            </div>\r\n\r\n            <div class=\"field-group\">\r\n              <label>GitHub</label>\r\n              <input v-model=\"editForm.github\" type=\"url\" placeholder=\"https://github.com/seu-usuario\" />\r\n            </div>\r\n\r\n            <div class=\"field-group\">\r\n              <label>LinkedIn</label>\r\n              <input v-model=\"editForm.linkedin\" type=\"url\" placeholder=\"https://linkedin.com/in/seu-usuario\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Header do Perfil -->\r\n    <div class=\"profile-header\">\r\n      <div class=\"profile-info\">\r\n        <div class=\"profile-avatar\">\r\n          <img :src=\"userProfile.avatar\" :alt=\"userProfile.name\" />\r\n          <div class=\"status-indicator online\"></div>\r\n        </div>\r\n        <div class=\"profile-details\">\r\n          <div class=\"profile-name-section\">\r\n            <h2>{{ userProfile.name }}</h2>\r\n            <button class=\"btn-edit\" @click=\"openEditModal\">\r\n              Editar perfil\r\n            </button>\r\n          </div>\r\n          <p class=\"profile-username\">@{{ userProfile.username }}</p>\r\n          <p class=\"profile-course\">{{ userProfile.course }}</p>\r\n          <p class=\"profile-campus\">{{ userProfile.campus }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Estatísticas -->\r\n    <div class=\"profile-stats\">\r\n      <div class=\"stat-item\">\r\n        <span class=\"stat-number\">{{ userProfile.stats.posts }}</span>\r\n        <span class=\"stat-label\">publicações</span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"stat-number\">{{ userProfile.stats.followers }}</span>\r\n        <span class=\"stat-label\">seguidores</span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"stat-number\">{{ userProfile.stats.following }}</span>\r\n        <span class=\"stat-label\">seguindo</span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Bio -->\r\n    <div class=\"profile-bio\" v-if=\"userProfile.bio\">\r\n      <p>{{ userProfile.bio }}</p>\r\n      <div class=\"bio-links\" v-if=\"userProfile.links.length\">\r\n        <a v-for=\"link in userProfile.links\" :key=\"link.id\" :href=\"link.url\" target=\"_blank\" class=\"bio-link\">\r\n          {{ link.label }}\r\n        </a>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Tabs de Conteúdo -->\r\n    <div class=\"content-tabs\">\r\n      <button \r\n        v-for=\"tab in contentTabs\" \r\n        :key=\"tab.id\" \r\n        :class=\"['tab-btn', { active: activeTab === tab.id }]\"\r\n        @click=\"activeTab = tab.id\"\r\n      >\r\n        <IconComponent :name=\"tab.icon\" :size=\"18\" />\r\n        <span>{{ tab.label }}</span>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Conteúdo das Tabs -->\r\n    <div class=\"tab-content\">\r\n      <!-- Posts -->\r\n      <div v-if=\"activeTab === 'posts'\" class=\"posts-grid\">\r\n        <div v-if=\"userPosts.length === 0\" class=\"empty-state\">\r\n          <IconComponent name=\"camera\" :size=\"48\" />\r\n          <p>Nenhuma publicação ainda</p>\r\n          <p class=\"sub-text\">Quando você publicar algo, aparecerá aqui.</p>\r\n        </div>\r\n        <div v-else v-for=\"post in userPosts\" :key=\"post.id\" class=\"post-item\">\r\n          <img :src=\"post.image\" :alt=\"post.caption\" />\r\n          <div class=\"post-overlay\">\r\n            <div class=\"post-stats\">\r\n              <span>❤️ {{ post.likes }}</span>\r\n              <span>💬 {{ post.comments }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Salvos -->\r\n      <div v-else-if=\"activeTab === 'saved'\" class=\"saved-grid\">\r\n        <div v-if=\"savedPosts.length === 0\" class=\"empty-state\">\r\n          <IconComponent name=\"bookmark\" :size=\"48\" />\r\n          <p>Nenhum item salvo</p>\r\n          <p class=\"sub-text\">Salve publicações para vê-las aqui.</p>\r\n        </div>\r\n        <div v-else v-for=\"saved in savedPosts\" :key=\"saved.id\" class=\"saved-item\">\r\n          <img :src=\"saved.image\" :alt=\"saved.title\" />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Projetos -->\r\n      <div v-else-if=\"activeTab === 'projects'\" class=\"projects-grid\">\r\n        <div v-if=\"userProjects.length === 0\" class=\"empty-state\">\r\n          <IconComponent name=\"code\" :size=\"48\" />\r\n          <p>Nenhum projeto ainda</p>\r\n          <p class=\"sub-text\">Seus projetos aparecerão aqui.</p>\r\n        </div>\r\n        <div v-else v-for=\"project in userProjects\" :key=\"project.id\" class=\"project-item\">\r\n          <div class=\"project-image\">\r\n            <img :src=\"project.image\" :alt=\"project.title\" />\r\n            <div class=\"project-type\">{{ project.type }}</div>\r\n          </div>\r\n          <div class=\"project-info\">\r\n            <h4>{{ project.title }}</h4>\r\n            <p>{{ project.description }}</p>\r\n            <div class=\"project-tech\">\r\n              <span v-for=\"tech in project.technologies\" :key=\"tech\" class=\"tech-tag\">{{ tech }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Eventos -->\r\n      <div v-else-if=\"activeTab === 'events'\" class=\"events-list\">\r\n        <div v-if=\"userEvents.length === 0\" class=\"empty-state\">\r\n          <IconComponent name=\"calendar\" :size=\"48\" />\r\n          <p>Nenhum evento ainda</p>\r\n          <p class=\"sub-text\">Eventos que você participa aparecerão aqui.</p>\r\n        </div>\r\n        <div v-else v-for=\"event in userEvents\" :key=\"event.id\" class=\"event-item\">\r\n          <div class=\"event-date\">\r\n            <span class=\"event-day\">{{ event.date.day }}</span>\r\n            <span class=\"event-month\">{{ event.date.month }}</span>\r\n          </div>\r\n          <div class=\"event-info\">\r\n            <h4>{{ event.title }}</h4>\r\n            <p>{{ event.description }}</p>\r\n            <span class=\"event-location\">{{ event.location }}</span>\r\n          </div>\r\n          <div class=\"event-status\" :class=\"event.status\">{{ event.statusText }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>",
          "script": "import IconComponent from './IconComponent.vue'\r\n\r\nexport default {\r\n  name: 'ProfileScreen',\r\n  components: {\r\n    IconComponent\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      default: () => null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      activeTab: 'posts',\r\n      showMenu: false,\r\n      showEditModal: false,\r\n      isSaving: false,\r\n      editForm: {\r\n        name: '',\r\n        username: '',\r\n        course: '',\r\n        campus: '',\r\n        bio: '',\r\n        avatar: '',\r\n        github: '',\r\n        linkedin: ''\r\n      },\r\n      contentTabs: [\r\n        { id: 'posts', label: 'Posts', icon: 'grid' },\r\n        { id: 'projects', label: 'Projetos', icon: 'code' },\r\n        { id: 'saved', label: 'Salvos', icon: 'bookmark' },\r\n        { id: 'events', label: 'Eventos', icon: 'calendar' }\r\n      ],\r\n      userPosts: [],\r\n      savedPosts: [],\r\n      userProjects: [],\r\n      userEvents: []\r\n    }\r\n  },\r\n  computed: {\r\n    userProfile() {\r\n      if (!this.currentUser) {\r\n        return {\r\n          name: 'Usuário',\r\n          username: 'usuario',\r\n          course: 'Não informado',\r\n          campus: 'Não informado',\r\n          bio: '',\r\n          avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b750?auto=format&fit=crop&w=150&q=80',\r\n          stats: { posts: 0, followers: 0, following: 0 },\r\n          links: []\r\n        }\r\n      }\r\n\r\n      // Buscar perfil salvo ou criar um novo\r\n      const savedProfile = JSON.parse(localStorage.getItem(`ifwave_profile_${this.currentUser.id}`) || '{}')\r\n      \r\n      return {\r\n        name: this.currentUser.name,\r\n        username: this.generateUsername(this.currentUser.name),\r\n        course: this.currentUser.course,\r\n        campus: this.currentUser.campus,\r\n        bio: savedProfile.bio || '',\r\n        avatar: savedProfile.avatar || this.generateAvatar(),\r\n        stats: savedProfile.stats || { \r\n          posts: Math.floor(Math.random() * 10), \r\n          followers: Math.floor(Math.random() * 50) + 10, \r\n          following: Math.floor(Math.random() * 30) + 5 \r\n        },\r\n        links: savedProfile.links || []\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadUserData()\r\n  },\r\n  methods: {\r\n    generateUsername(name) {\r\n      return name.toLowerCase()\r\n        .replace(/\\s+/g, '.')\r\n        .replace(/[áàâã]/g, 'a')\r\n        .replace(/[éèê]/g, 'e')\r\n        .replace(/[íì]/g, 'i')\r\n        .replace(/[óòôõ]/g, 'o')\r\n        .replace(/[úù]/g, 'u')\r\n        .replace(/ç/g, 'c')\r\n        .replace(/[^a-z0-9.]/g, '')\r\n    },\r\n\r\n    generateAvatar() {\r\n      const avatars = [\r\n        'https://images.unsplash.com/photo-1494790108755-2616b612b750?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1522071820081-009f0129c71c?auto=format&fit=crop&w=150&q=80'\r\n      ]\r\n      return avatars[Math.floor(Math.random() * avatars.length)]\r\n    },\r\n\r\n    loadUserData() {\r\n      if (!this.currentUser) return\r\n\r\n      // Carregar posts do usuário (simulados)\r\n      this.userPosts = this.generateUserPosts()\r\n      \r\n      // Carregar posts salvos (simulados)\r\n      this.savedPosts = this.generateSavedPosts()\r\n      \r\n      // Carregar projetos do usuário (simulados)\r\n      this.userProjects = this.generateUserProjects()\r\n      \r\n      // Carregar eventos do usuário (simulados)\r\n      this.userEvents = this.generateUserEvents()\r\n    },\r\n\r\n    generateUserPosts() {\r\n      const postImages = [\r\n        'https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?auto=format&fit=crop&w=300&q=80',\r\n        'https://images.unsplash.com/photo-1522202176988-66273c2fd55f?auto=format&fit=crop&w=300&q=80',\r\n        'https://images.unsplash.com/photo-1531482615713-2afd69097998?auto=format&fit=crop&w=300&q=80'\r\n      ]\r\n      \r\n      return Array.from({ length: Math.floor(Math.random() * 6) }, (_, i) => ({\r\n        id: i + 1,\r\n        image: postImages[i % postImages.length],\r\n        caption: `Post ${i + 1}`,\r\n        likes: Math.floor(Math.random() * 100) + 10,\r\n        comments: Math.floor(Math.random() * 20) + 2\r\n      }))\r\n    },\r\n\r\n    generateSavedPosts() {\r\n      const savedImages = [\r\n        'https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=300&q=80',\r\n        'https://images.unsplash.com/photo-1551650975-87deedd944c3?auto=format&fit=crop&w=300&q=80'\r\n      ]\r\n      \r\n      return Array.from({ length: Math.floor(Math.random() * 4) }, (_, i) => ({\r\n        id: i + 1,\r\n        image: savedImages[i % savedImages.length],\r\n        title: `Post salvo ${i + 1}`\r\n      }))\r\n    },\r\n\r\n    generateUserProjects() {\r\n      const projectImages = [\r\n        'https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=300&q=80',\r\n        'https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?auto=format&fit=crop&w=300&q=80',\r\n        'https://images.unsplash.com/photo-1555949963-aa79dcee981c?auto=format&fit=crop&w=300&q=80'\r\n      ]\r\n      \r\n      const projectTitles = [\r\n        'Sistema de Gestão Escolar',\r\n        'App Mobile IFMT',\r\n        'Site Institucional',\r\n        'Sistema de Biblioteca',\r\n        'Plataforma de Cursos Online'\r\n      ]\r\n      \r\n      const technologies = [\r\n        ['Vue.js', 'Node.js', 'MySQL'],\r\n        ['React Native', 'Firebase'],\r\n        ['HTML', 'CSS', 'JavaScript'],\r\n        ['Python', 'Django', 'PostgreSQL'],\r\n        ['React', 'Express', 'MongoDB']\r\n      ]\r\n      \r\n      return Array.from({ length: Math.floor(Math.random() * 4) + 1 }, (_, i) => ({\r\n        id: i + 1,\r\n        title: projectTitles[i % projectTitles.length],\r\n        description: `Projeto desenvolvido durante o ${i + 1}º semestre`,\r\n        image: projectImages[i % projectImages.length],\r\n        type: i % 2 === 0 ? 'Web App' : 'Mobile',\r\n        technologies: technologies[i % technologies.length]\r\n      }))\r\n    },\r\n\r\n    generateUserEvents() {\r\n      const eventTitles = [\r\n        'Feira de Ciências IFMT',\r\n        'Workshop de Git/GitHub',\r\n        'Palestra sobre Carreira em TI',\r\n        'Hackathon IFMT 2025',\r\n        'Mostra de Projetos'\r\n      ]\r\n      \r\n      const months = ['JUL', 'AGO', 'SET', 'OUT', 'NOV']\r\n      const locations = [\r\n        'Auditório Principal',\r\n        'Lab. Informática 1',\r\n        'Lab. Informática 2',\r\n        'Sala de Conferências',\r\n        'Pátio Central'\r\n      ]\r\n      \r\n      return Array.from({ length: Math.floor(Math.random() * 3) + 1 }, (_, i) => ({\r\n        id: i + 1,\r\n        title: eventTitles[i % eventTitles.length],\r\n        description: `Evento educacional do IFMT`,\r\n        location: locations[i % locations.length],\r\n        date: { \r\n          day: String(15 + i * 7).padStart(2, '0'), \r\n          month: months[i % months.length] \r\n        },\r\n        status: i % 2 === 0 ? 'confirmed' : 'pending',\r\n        statusText: i % 2 === 0 ? 'Confirmado' : 'Pendente'\r\n      }))\r\n    },\r\n\r\n    openEditModal() {\r\n      this.editForm = {\r\n        name: this.userProfile.name,\r\n        username: this.userProfile.username,\r\n        course: this.userProfile.course,\r\n        campus: this.userProfile.campus,\r\n        bio: this.userProfile.bio,\r\n        avatar: this.userProfile.avatar,\r\n        github: this.userProfile.links.find(link => link.type === 'github')?.url || '',\r\n        linkedin: this.userProfile.links.find(link => link.type === 'linkedin')?.url || ''\r\n      }\r\n      this.showEditModal = true\r\n    },\r\n\r\n    closeEditModal() {\r\n      this.showEditModal = false\r\n      this.isSaving = false\r\n    },\r\n\r\n    changePhoto() {\r\n      const avatars = [\r\n        'https://images.unsplash.com/photo-1494790108755-2616b612b750?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=150&q=80',\r\n        'https://images.unsplash.com/photo-1522071820081-009f0129c71c?auto=format&fit=crop&w=150&q=80'\r\n      ]\r\n      this.editForm.avatar = avatars[Math.floor(Math.random() * avatars.length)]\r\n    },\r\n\r\n    async saveProfile() {\r\n      this.isSaving = true\r\n\r\n      try {\r\n        // Simular delay de salvamento\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n\r\n        // Preparar links\r\n        const links = []\r\n        if (this.editForm.github) {\r\n          links.push({ id: 1, type: 'github', label: 'GitHub', url: this.editForm.github })\r\n        }\r\n        if (this.editForm.linkedin) {\r\n          links.push({ id: 2, type: 'linkedin', label: 'LinkedIn', url: this.editForm.linkedin })\r\n        }\r\n\r\n        // Salvar perfil no localStorage\r\n        const profileData = {\r\n          bio: this.editForm.bio,\r\n          avatar: this.editForm.avatar,\r\n          stats: this.userProfile.stats,\r\n          links: links,\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n\r\n        localStorage.setItem(`ifwave_profile_${this.currentUser.id}`, JSON.stringify(profileData))\r\n\r\n        // Atualizar dados do usuário principal se necessário\r\n        if (this.editForm.name !== this.currentUser.name || \r\n            this.editForm.course !== this.currentUser.course || \r\n            this.editForm.campus !== this.currentUser.campus) {\r\n          \r\n          const users = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\r\n          const userIndex = users.findIndex(user => user.id === this.currentUser.id)\r\n          \r\n          if (userIndex !== -1) {\r\n            users[userIndex].name = this.editForm.name\r\n            users[userIndex].course = this.editForm.course\r\n            users[userIndex].campus = this.editForm.campus\r\n            localStorage.setItem('ifwave_users', JSON.stringify(users))\r\n\r\n            // Atualizar sessão atual\r\n            const currentUser = JSON.parse(localStorage.getItem('ifwave_current_user'))\r\n            currentUser.name = this.editForm.name\r\n            currentUser.course = this.editForm.course\r\n            currentUser.campus = this.editForm.campus\r\n            localStorage.setItem('ifwave_current_user', JSON.stringify(currentUser))\r\n          }\r\n        }\r\n\r\n        this.closeEditModal()\r\n        \r\n        // Forçar re-renderização\r\n        this.$forceUpdate()\r\n\r\n      } catch (error) {\r\n        console.error('Erro ao salvar perfil:', error)\r\n      } finally {\r\n        this.isSaving = false\r\n      }\r\n    },\r\n\r\n    openPost(post) {\r\n      console.log('Abrir post:', post)\r\n    },\r\n\r\n    shareProfile() {\r\n      console.log('Compartilhar perfil')\r\n      this.showMenu = false\r\n    },\r\n\r\n    downloadQR() {\r\n      console.log('Download QR Code')\r\n      this.showMenu = false\r\n    },\r\n\r\n    viewInsights() {\r\n      console.log('Ver estatísticas')\r\n      this.showMenu = false\r\n    },\r\n\r\n    logout() {\r\n      console.log('Logout')\r\n      this.showMenu = false\r\n    }\r\n  }\r\n}",
          "style": ".profile-container {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  background: var(--card);\r\n  min-height: 100vh;\r\n  padding: 0 16px;\r\n}\r\n\r\n/* Modal de Edição */\r\n.edit-modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.6);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n  padding: 20px;\r\n}\r\n\r\n.edit-modal {\r\n  background: var(--card);\r\n  border-radius: 12px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  max-height: 90vh;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.edit-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.edit-header h3 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: var(--foreground);\r\n}\r\n\r\n.btn-cancel,\r\n.btn-save {\r\n  background: none;\r\n  border: none;\r\n  color: #0095f6;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  padding: 8px;\r\n}\r\n\r\n.btn-cancel {\r\n  color: var(--foreground);\r\n}\r\n\r\n.btn-save:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.edit-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n}\r\n\r\n.edit-avatar {\r\n  text-align: center;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.edit-avatar img {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.change-photo-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #0095f6;\r\n  font-size: 13px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n}\r\n\r\n.edit-fields {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.field-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.field-group label {\r\n  font-size: 13px;\r\n  font-weight: 600;\r\n  color: var(--foreground);\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.field-group input,\r\n.field-group textarea {\r\n  padding: 12px;\r\n  border: 1px solid var(--border);\r\n  border-radius: 6px;\r\n  background: var(--card);\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n  resize: vertical;\r\n}\r\n\r\n.field-group input:focus,\r\n.field-group textarea:focus {\r\n  outline: none;\r\n  border-color: #0095f6;\r\n}\r\n\r\n.char-count {\r\n  font-size: 12px;\r\n  color: #8e8e8e;\r\n  text-align: right;\r\n  margin-top: 4px;\r\n}\r\n\r\n/* Header do Perfil */\r\n.profile-header {\r\n  padding: 20px 0;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.profile-info {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 16px;\r\n}\r\n\r\n.profile-avatar {\r\n  position: relative;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.profile-avatar img {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: 2px solid var(--border);\r\n}\r\n\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 2px;\r\n  right: 2px;\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n  border: 2px solid var(--card);\r\n}\r\n\r\n.status-indicator.online {\r\n  background: #44b883;\r\n}\r\n\r\n.profile-details {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.profile-name-section {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.profile-name-section h2 {\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  margin: 0;\r\n  color: var(--foreground);\r\n}\r\n\r\n.btn-edit {\r\n  padding: 6px 16px;\r\n  border: 1px solid var(--border);\r\n  background: var(--card);\r\n  color: var(--foreground);\r\n  border-radius: 6px;\r\n  font-size: 13px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-edit:hover {\r\n  background: var(--border);\r\n}\r\n\r\n.profile-username {\r\n  color: #8e8e8e;\r\n  font-size: 14px;\r\n  margin: 0 0 4px 0;\r\n}\r\n\r\n.profile-course,\r\n.profile-campus {\r\n  color: var(--foreground);\r\n  font-size: 13px;\r\n  margin: 2px 0;\r\n}\r\n\r\n/* Bio */\r\n.profile-bio {\r\n  padding: 16px 0;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.profile-bio p {\r\n  margin: 0 0 8px 0;\r\n  line-height: 1.4;\r\n  color: var(--foreground);\r\n}\r\n\r\n.bio-links {\r\n  display: flex;\r\n  gap: 12px;\r\n}\r\n\r\n.bio-link {\r\n  color: #0095f6;\r\n  text-decoration: none;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n}\r\n\r\n.bio-link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* Estatísticas */\r\n.profile-stats {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 16px 0;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: center;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: var(--foreground);\r\n}\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  color: #8e8e8e;\r\n  margin-top: 2px;\r\n}\r\n\r\n/* Tabs */\r\n.content-tabs {\r\n  display: flex;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.tab-btn {\r\n  flex: 1;\r\n  padding: 12px;\r\n  border: none;\r\n  background: none;\r\n  color: #8e8e8e;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 6px;\r\n  font-size: 13px;\r\n  transition: color 0.2s ease;\r\n  border-bottom: 1px solid transparent;\r\n}\r\n\r\n.tab-btn.active {\r\n  color: var(--foreground);\r\n  border-bottom-color: var(--foreground);\r\n}\r\n\r\n.tab-btn:hover {\r\n  color: var(--foreground);\r\n}\r\n\r\n/* Conteúdo */\r\n.tab-content {\r\n  padding: 16px 0;\r\n}\r\n\r\n.posts-grid,\r\n.saved-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 2px;\r\n}\r\n\r\n.post-item,\r\n.saved-item {\r\n  position: relative;\r\n  aspect-ratio: 1;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n}\r\n\r\n.post-item img,\r\n.saved-item img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.post-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.4);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease;\r\n}\r\n\r\n.post-item:hover .post-overlay {\r\n  opacity: 1;\r\n}\r\n\r\n.post-stats {\r\n  display: flex;\r\n  gap: 16px;\r\n  color: white;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n}\r\n\r\n.empty-state {\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n  color: #8e8e8e;\r\n  grid-column: 1 / -1;\r\n}\r\n\r\n.empty-state p {\r\n  margin: 8px 0 4px 0;\r\n  font-size: 14px;\r\n}\r\n\r\n.sub-text {\r\n  font-size: 12px;\r\n  color: #c7c7c7;\r\n}\r\n\r\n/* Projetos */\r\n.projects-grid {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.project-item {\r\n  background: var(--card);\r\n  border: 1px solid var(--border);\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.project-item:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.project-image {\r\n  position: relative;\r\n  height: 120px;\r\n}\r\n\r\n.project-image img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.project-type {\r\n  position: absolute;\r\n  top: 8px;\r\n  right: 8px;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  color: white;\r\n  padding: 4px 8px;\r\n  border-radius: 12px;\r\n  font-size: 11px;\r\n  font-weight: 600;\r\n}\r\n\r\n.project-info {\r\n  padding: 16px;\r\n}\r\n\r\n.project-info h4 {\r\n  margin: 0 0 8px 0;\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n}\r\n\r\n.project-info p {\r\n  color: #8e8e8e;\r\n  font-size: 12px;\r\n  margin: 0 0 12px 0;\r\n  line-height: 1.4;\r\n}\r\n\r\n.project-tech {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 6px;\r\n}\r\n\r\n.tech-tag {\r\n  background: #f0f0f0;\r\n  color: #333;\r\n  padding: 3px 8px;\r\n  border-radius: 8px;\r\n  font-size: 10px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Eventos */\r\n.events-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.event-item {\r\n  display: flex;\r\n  gap: 12px;\r\n  padding: 16px;\r\n  background: var(--card);\r\n  border: 1px solid var(--border);\r\n  border-radius: 12px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.event-item:hover {\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.event-date {\r\n  text-align: center;\r\n  min-width: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.event-day {\r\n  display: block;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  color: var(--foreground);\r\n  line-height: 1;\r\n}\r\n\r\n.event-month {\r\n  display: block;\r\n  font-size: 11px;\r\n  color: #8e8e8e;\r\n  font-weight: 600;\r\n  margin-top: 2px;\r\n}\r\n\r\n.event-info {\r\n  flex: 1;\r\n}\r\n\r\n.event-info h4 {\r\n  margin: 0 0 4px 0;\r\n  color: var(--foreground);\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n}\r\n\r\n.event-info p {\r\n  margin: 0 0 8px 0;\r\n  color: #8e8e8e;\r\n  font-size: 12px;\r\n  line-height: 1.3;\r\n}\r\n\r\n.event-location {\r\n  color: #0095f6;\r\n  font-size: 11px;\r\n  font-weight: 500;\r\n}\r\n\r\n.event-status {\r\n  align-self: flex-start;\r\n  padding: 4px 8px;\r\n  border-radius: 12px;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.event-status.confirmed {\r\n  background: #e8f5e8;\r\n  color: #2e7d32;\r\n}\r\n\r\n.event-status.pending {\r\n  background: #fff3e0;\r\n  color: #f57c00;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .profile-container {\r\n    padding: 0 12px;\r\n  }\r\n  \r\n  .profile-info {\r\n    gap: 12px;\r\n  }\r\n  \r\n  .profile-avatar img {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n  \r\n  .profile-name-section {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 60
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 80
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "sharing",
            "category": "interaction",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "following",
            "category": "interaction",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 60
          }
        ],
        "complexity": {
          "lines": 1098,
          "functions": 9,
          "conditions": 63,
          "loops": 50,
          "score": 15.710382513661203
        },
        "imports": [
          "./IconComponent.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [
          "currentUser",
          "default"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": false,
          "hasErrorHandling": true,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 67
        }
      },
      {
        "name": "PublishScreen",
        "path": "src\\components\\PublishScreen.vue",
        "size": 14272,
        "sections": {
          "template": "<div class=\"publish-container\">\r\n    <header class=\"publish-header\">\r\n      <h2>📝 Nova Publicação</h2>\r\n      <p>Compartilhe algo interessante com seus colegas do IFMT</p>\r\n    </header>\r\n\r\n    <div class=\"publish-form\">\r\n      <div class=\"form-group\">\r\n        <label for=\"postText\">O que você está pensando?</label>\r\n        <textarea \r\n          id=\"postText\"\r\n          v-model=\"postText\" \r\n          placeholder=\"Escreva algo interessante sobre seus estudos, projetos ou experiências no IFMT...\"\r\n          rows=\"4\"\r\n          maxlength=\"500\"\r\n          class=\"post-textarea\"\r\n        ></textarea>\r\n        <div class=\"char-count\">{{ postText.length }}/500</div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label>📷 Adicionar Imagem (opcional)</label>\r\n        <div class=\"image-upload\">\r\n          <input \r\n            type=\"file\" \r\n            id=\"imageUpload\" \r\n            @change=\"handleImageUpload\" \r\n            accept=\"image/*\"\r\n            style=\"display: none;\"\r\n          >\r\n          <button \r\n            type=\"button\" \r\n            @click=\"$refs.imageInput.click()\" \r\n            class=\"upload-btn\"\r\n            ref=\"imageInput\"\r\n          >\r\n            <span v-if=\"!selectedImage\">🖼️ Escolher Imagem</span>\r\n            <span v-else>✏️ Trocar Imagem</span>\r\n          </button>\r\n          \r\n          <div v-if=\"selectedImage\" class=\"image-preview\">\r\n            <img :src=\"selectedImage\" alt=\"Preview\" class=\"preview-img\">\r\n            <button @click=\"removeImage\" class=\"remove-btn\">❌</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label>🏷️ Categoria</label>\r\n        <select v-model=\"selectedCategory\" class=\"category-select\">\r\n          <option value=\"\">Selecione uma categoria</option>\r\n          <option value=\"academico\">📚 Acadêmico</option>\r\n          <option value=\"projeto\">💻 Projeto</option>\r\n          <option value=\"evento\">📅 Evento</option>\r\n          <option value=\"dica\">💡 Dica</option>\r\n          <option value=\"conquista\">🏆 Conquista</option>\r\n          <option value=\"duvida\">❓ Dúvida</option>\r\n          <option value=\"geral\">💬 Geral</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"form-actions\">\r\n        <button \r\n          @click=\"saveDraft\" \r\n          class=\"btn btn-secondary\"\r\n          :disabled=\"!postText.trim()\"\r\n        >\r\n          💾 Salvar Rascunho\r\n        </button>\r\n        <button \r\n          @click=\"publishPost\" \r\n          class=\"btn btn-primary\"\r\n          :disabled=\"!postText.trim() || isPublishing\"\r\n        >\r\n          <span v-if=\"isPublishing\">📤 Publicando...</span>\r\n          <span v-else>🚀 Publicar</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Preview do Post -->\r\n    <div v-if=\"postText.trim()\" class=\"post-preview\">\r\n      <h3>👀 Prévia da Publicação</h3>\r\n      <div class=\"preview-card\">\r\n        <div class=\"preview-header\">\r\n          <div class=\"user-info\">\r\n            <div class=\"avatar\">{{ getUserInitials() }}</div>\r\n            <div class=\"user-details\">\r\n              <div class=\"username\">Você</div>\r\n              <div class=\"timestamp\">agora</div>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"selectedCategory\" class=\"category-badge\">\r\n            {{ getCategoryLabel(selectedCategory) }}\r\n          </div>\r\n        </div>\r\n        <div class=\"preview-content\">\r\n          {{ postText }}\r\n        </div>\r\n        <div v-if=\"selectedImage\" class=\"preview-image\">\r\n          <img :src=\"selectedImage\" alt=\"Imagem do post\">\r\n        </div>\r\n        <div class=\"preview-actions\">\r\n          <span class=\"action-btn\">❤️ Curtir</span>\r\n          <span class=\"action-btn\">💬 Comentar</span>\r\n          <span class=\"action-btn\">📤 Compartilhar</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Rascunhos Salvos -->\r\n    <div v-if=\"drafts.length > 0\" class=\"drafts-section\">\r\n      <h3>📄 Rascunhos Salvos</h3>\r\n      <div class=\"drafts-list\">\r\n        <div \r\n          v-for=\"(draft, index) in drafts\" \r\n          :key=\"index\"\r\n          class=\"draft-item\"\r\n        >\r\n          <div class=\"draft-content\">\r\n            <p>{{ draft.text.substring(0, 100) }}{{ draft.text.length > 100 ? '...' : '' }}</p>\r\n            <small>Salvo em: {{ formatDate(draft.savedAt) }}</small>\r\n          </div>\r\n          <div class=\"draft-actions\">\r\n            <button @click=\"loadDraft(index)\" class=\"btn-small\">✏️ Editar</button>\r\n            <button @click=\"deleteDraft(index)\" class=\"btn-small btn-danger\">🗑️</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Mensagem de Status -->\r\n    <div v-if=\"statusMessage\" :class=\"['status-message', statusType]\">\r\n      {{ statusMessage }}\r\n    </div>\r\n  </div>",
          "script": "export default {\r\n  name: 'PublishScreen',\r\n  data() {\r\n    return {\r\n      postText: '',\r\n      selectedImage: null,\r\n      selectedCategory: '',\r\n      isPublishing: false,\r\n      statusMessage: '',\r\n      statusType: 'success',\r\n      drafts: []\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadDrafts()\r\n  },\r\n  methods: {\r\n    handleImageUpload(event) {\r\n      const file = event.target.files[0]\r\n      if (file) {\r\n        if (file.size > 5 * 1024 * 1024) { // 5MB limit\r\n          this.showStatus('Imagem muito grande. Máximo 5MB.', 'error')\r\n          return\r\n        }\r\n        \r\n        const reader = new FileReader()\r\n        reader.onload = (e) => {\r\n          this.selectedImage = e.target.result\r\n        }\r\n        reader.readAsDataURL(file)\r\n      }\r\n    },\r\n\r\n    removeImage() {\r\n      this.selectedImage = null\r\n    },\r\n\r\n    async publishPost() {\r\n      this.isPublishing = true\r\n      \r\n      try {\r\n        // Simula API call\r\n        await new Promise(resolve => setTimeout(resolve, 2000))\r\n        \r\n        const post = {\r\n          id: Date.now(),\r\n          text: this.postText,\r\n          image: this.selectedImage,\r\n          category: this.selectedCategory,\r\n          timestamp: new Date().toISOString(),\r\n          likes: 0,\r\n          comments: []\r\n        }\r\n        \r\n        // Salva no localStorage (simulando banco)\r\n        const posts = JSON.parse(localStorage.getItem('ifwave_posts') || '[]')\r\n        posts.unshift(post)\r\n        localStorage.setItem('ifwave_posts', JSON.stringify(posts))\r\n        \r\n        this.showStatus('✅ Publicação criada com sucesso!', 'success')\r\n        this.clearForm()\r\n        \r\n        // Emite evento para atualizar o feed\r\n        this.$emit('post-created', post)\r\n        \r\n      } catch (error) {\r\n        this.showStatus('❌ Erro ao publicar. Tente novamente.', 'error')\r\n      } finally {\r\n        this.isPublishing = false\r\n      }\r\n    },\r\n\r\n    saveDraft() {\r\n      const draft = {\r\n        text: this.postText,\r\n        image: this.selectedImage,\r\n        category: this.selectedCategory,\r\n        savedAt: new Date().toISOString()\r\n      }\r\n      \r\n      this.drafts.unshift(draft)\r\n      this.saveDraftsToStorage()\r\n      this.showStatus('💾 Rascunho salvo!', 'success')\r\n    },\r\n\r\n    loadDraft(index) {\r\n      const draft = this.drafts[index]\r\n      this.postText = draft.text\r\n      this.selectedImage = draft.image\r\n      this.selectedCategory = draft.category\r\n      this.showStatus('📝 Rascunho carregado!', 'success')\r\n    },\r\n\r\n    deleteDraft(index) {\r\n      this.drafts.splice(index, 1)\r\n      this.saveDraftsToStorage()\r\n      this.showStatus('🗑️ Rascunho excluído!', 'success')\r\n    },\r\n\r\n    loadDrafts() {\r\n      const saved = localStorage.getItem('ifwave_drafts')\r\n      if (saved) {\r\n        this.drafts = JSON.parse(saved)\r\n      }\r\n    },\r\n\r\n    saveDraftsToStorage() {\r\n      localStorage.setItem('ifwave_drafts', JSON.stringify(this.drafts))\r\n    },\r\n\r\n    clearForm() {\r\n      this.postText = ''\r\n      this.selectedImage = null\r\n      this.selectedCategory = ''\r\n    },\r\n\r\n    getUserInitials() {\r\n      const user = JSON.parse(localStorage.getItem('ifwave_current_user') || '{}')\r\n      if (user.name) {\r\n        return user.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)\r\n      }\r\n      return 'EU'\r\n    },\r\n\r\n    getCategoryLabel(category) {\r\n      const labels = {\r\n        academico: '📚 Acadêmico',\r\n        projeto: '💻 Projeto',\r\n        evento: '📅 Evento',\r\n        dica: '💡 Dica',\r\n        conquista: '🏆 Conquista',\r\n        duvida: '❓ Dúvida',\r\n        geral: '💬 Geral'\r\n      }\r\n      return labels[category] || category\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      return new Date(dateString).toLocaleString('pt-BR')\r\n    },\r\n\r\n    showStatus(message, type) {\r\n      this.statusMessage = message\r\n      this.statusType = type\r\n      setTimeout(() => {\r\n        this.statusMessage = ''\r\n      }, 3000)\r\n    }\r\n  }\r\n}",
          "style": ".publish-container {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background: #ffffff;\r\n  min-height: 100vh;\r\n}\r\n\r\n.publish-header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n  padding-bottom: 20px;\r\n  border-bottom: 2px solid #e2e8f0;\r\n}\r\n\r\n.publish-header h2 {\r\n  color: #2d3748;\r\n  margin: 0 0 10px 0;\r\n  font-size: 1.8em;\r\n}\r\n\r\n.publish-header p {\r\n  color: #718096;\r\n  margin: 0;\r\n}\r\n\r\n.publish-form {\r\n  background: #f7fafc;\r\n  padding: 25px;\r\n  border-radius: 15px;\r\n  border: 1px solid #e2e8f0;\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n}\r\n\r\n.post-textarea {\r\n  width: 100%;\r\n  padding: 15px;\r\n  border: 2px solid #e2e8f0;\r\n  border-radius: 10px;\r\n  font-size: 16px;\r\n  font-family: inherit;\r\n  resize: vertical;\r\n  transition: border-color 0.2s;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.post-textarea:focus {\r\n  outline: none;\r\n  border-color: #4299e1;\r\n}\r\n\r\n.char-count {\r\n  text-align: right;\r\n  font-size: 0.85em;\r\n  color: #718096;\r\n  margin-top: 5px;\r\n}\r\n\r\n.image-upload {\r\n  margin-top: 10px;\r\n}\r\n\r\n.upload-btn {\r\n  background: #4299e1;\r\n  color: white;\r\n  border: none;\r\n  padding: 12px 20px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.upload-btn:hover {\r\n  background: #3182ce;\r\n}\r\n\r\n.image-preview {\r\n  position: relative;\r\n  margin-top: 15px;\r\n  display: inline-block;\r\n}\r\n\r\n.preview-img {\r\n  max-width: 200px;\r\n  max-height: 200px;\r\n  border-radius: 10px;\r\n  border: 2px solid #e2e8f0;\r\n}\r\n\r\n.remove-btn {\r\n  position: absolute;\r\n  top: -10px;\r\n  right: -10px;\r\n  background: #e53e3e;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 30px;\r\n  height: 30px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.category-select {\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: 2px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  background: white;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  gap: 15px;\r\n  justify-content: center;\r\n  margin-top: 25px;\r\n}\r\n\r\n.btn {\r\n  padding: 12px 25px;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.btn-primary {\r\n  background: #4299e1;\r\n  color: white;\r\n}\r\n\r\n.btn-primary:hover:not(:disabled) {\r\n  background: #3182ce;\r\n}\r\n\r\n.btn-secondary {\r\n  background: #e2e8f0;\r\n  color: #4a5568;\r\n}\r\n\r\n.btn-secondary:hover:not(:disabled) {\r\n  background: #cbd5e0;\r\n}\r\n\r\n.btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.post-preview {\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.post-preview h3 {\r\n  color: #2d3748;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.preview-card {\r\n  background: white;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 15px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.preview-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  background: #4299e1;\r\n  color: white;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n}\r\n\r\n.username {\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.85em;\r\n  color: #718096;\r\n}\r\n\r\n.category-badge {\r\n  background: #e6fffa;\r\n  color: #2c7a7b;\r\n  padding: 4px 12px;\r\n  border-radius: 20px;\r\n  font-size: 0.85em;\r\n  font-weight: 500;\r\n}\r\n\r\n.preview-content {\r\n  margin-bottom: 15px;\r\n  line-height: 1.6;\r\n  color: #2d3748;\r\n}\r\n\r\n.preview-image img {\r\n  max-width: 100%;\r\n  border-radius: 10px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.preview-actions {\r\n  display: flex;\r\n  gap: 20px;\r\n  border-top: 1px solid #e2e8f0;\r\n  padding-top: 15px;\r\n}\r\n\r\n.action-btn {\r\n  color: #718096;\r\n  font-size: 0.9em;\r\n  cursor: pointer;\r\n}\r\n\r\n.drafts-section {\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.drafts-section h3 {\r\n  color: #2d3748;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.draft-item {\r\n  background: white;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.draft-content p {\r\n  margin: 0 0 5px 0;\r\n  color: #2d3748;\r\n}\r\n\r\n.draft-content small {\r\n  color: #718096;\r\n}\r\n\r\n.draft-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.btn-small {\r\n  padding: 6px 12px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  font-size: 0.85em;\r\n  cursor: pointer;\r\n  background: #e2e8f0;\r\n  color: #4a5568;\r\n}\r\n\r\n.btn-small:hover {\r\n  background: #cbd5e0;\r\n}\r\n\r\n.btn-danger {\r\n  background: #feb2b2;\r\n  color: #c53030;\r\n}\r\n\r\n.btn-danger:hover {\r\n  background: #fc8181;\r\n}\r\n\r\n.status-message {\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  font-weight: 500;\r\n  margin-top: 20px;\r\n}\r\n\r\n.status-message.success {\r\n  background: #c6f6d5;\r\n  color: #2f855a;\r\n  border: 1px solid #9ae6b4;\r\n}\r\n\r\n.status-message.error {\r\n  background: #fed7d7;\r\n  color: #c53030;\r\n  border: 1px solid #feb2b2;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .publish-container {\r\n    padding: 15px;\r\n  }\r\n  \r\n  .form-actions {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .btn {\r\n    width: 100%;\r\n  }\r\n  \r\n  .draft-item {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .draft-actions {\r\n    width: 100%;\r\n    justify-content: flex-end;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 80
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "feed_display",
            "category": "core",
            "weight": 9,
            "confidence": 20
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 40
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 20
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "internationalization",
            "category": "technical",
            "weight": 3,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 648,
          "functions": 4,
          "conditions": 30,
          "loops": 15,
          "score": 10.95679012345679
        },
        "imports": [],
        "exports": [
          "default"
        ],
        "events": [
          "post-created"
        ],
        "props": [],
        "quality": {
          "hasComments": true,
          "hasValidation": false,
          "hasErrorHandling": true,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 67
        }
      },
      {
        "name": "RegisterForm",
        "path": "src\\components\\RegisterForm.vue",
        "size": 10753,
        "sections": {
          "template": "<div class=\"form-container\">\r\n    <h2>Cadastro - IF Wave</h2>\r\n    <form @submit.prevent=\"register\">\r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"name\" \r\n          type=\"text\" \r\n          placeholder=\"Nome completo\" \r\n          required \r\n          :class=\"{ 'error': errors.name }\"\r\n        />\r\n        <span v-if=\"errors.name\" class=\"error-msg\">{{ errors.name }}</span>\r\n      </div>\r\n      \r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"email\" \r\n          type=\"email\" \r\n          placeholder=\"E-mail institucional (@estudante.ifmt.edu.br)\" \r\n          required \r\n          :class=\"{ 'error': errors.email }\"\r\n        />\r\n        <span v-if=\"errors.email\" class=\"error-msg\">{{ errors.email }}</span>\r\n      </div>\r\n      \r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"course\" \r\n          type=\"text\" \r\n          placeholder=\"Curso (ex: Técnico em Informática)\" \r\n          required \r\n          :class=\"{ 'error': errors.course }\"\r\n        />\r\n        <span v-if=\"errors.course\" class=\"error-msg\">{{ errors.course }}</span>\r\n      </div>\r\n      \r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"campus\" \r\n          type=\"text\" \r\n          placeholder=\"Campus (ex: Cuiabá - Octayde Jorge da Silva)\" \r\n          required \r\n          :class=\"{ 'error': errors.campus }\"\r\n        />\r\n        <span v-if=\"errors.campus\" class=\"error-msg\">{{ errors.campus }}</span>\r\n      </div>\r\n      \r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"password\" \r\n          type=\"password\" \r\n          placeholder=\"Senha (mínimo 6 caracteres)\" \r\n          required \r\n          :class=\"{ 'error': errors.password }\"\r\n        />\r\n        <span v-if=\"errors.password\" class=\"error-msg\">{{ errors.password }}</span>\r\n      </div>\r\n      \r\n      <div class=\"input-group\">\r\n        <input \r\n          v-model=\"confirmPassword\" \r\n          type=\"password\" \r\n          placeholder=\"Confirme a senha\" \r\n          required \r\n          :class=\"{ 'error': errors.confirmPassword }\"\r\n        />\r\n        <span v-if=\"errors.confirmPassword\" class=\"error-msg\">{{ errors.confirmPassword }}</span>\r\n      </div>\r\n      \r\n      <button type=\"submit\" :disabled=\"isLoading\" class=\"submit-btn\">\r\n        <span v-if=\"isLoading\" class=\"loading\">Cadastrando...</span>\r\n        <span v-else>Cadastrar</span>\r\n      </button>\r\n    </form>\r\n    \r\n    <button class=\"link-btn\" @click=\"$emit('go-login')\">\r\n      Já tem conta? Entrar\r\n    </button>\r\n    \r\n    <div v-if=\"message\" :class=\"['message', messageType]\">\r\n      {{ message }}\r\n    </div>\r\n  </div>",
          "script": "export default {\r\n  name: 'RegisterForm',\r\n  data() {\r\n    return {\r\n      name: '',\r\n      email: '',\r\n      course: '',\r\n      campus: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      message: '',\r\n      messageType: 'success', // 'success' ou 'error'\r\n      isLoading: false,\r\n      errors: {}\r\n    }\r\n  },\r\n  methods: {\r\n    async register() {\r\n      this.clearErrors()\r\n      \r\n      if (!this.validateForm()) {\r\n        return\r\n      }\r\n      \r\n      this.isLoading = true\r\n      \r\n      try {\r\n        // Simula delay de API\r\n        await new Promise(resolve => setTimeout(resolve, 1500))\r\n        \r\n        // Verifica se o usuário já existe\r\n        if (this.userExists(this.email)) {\r\n          this.showError('Este e-mail já está cadastrado!')\r\n          return\r\n        }\r\n        \r\n        // Cadastra o usuário\r\n        this.saveUser()\r\n        this.showSuccess(`Usuário ${this.name} cadastrado com sucesso!`)\r\n        \r\n        // Emitir evento com dados do usuário para login automático\r\n        setTimeout(() => {\r\n          const newUser = {\r\n            id: Date.now().toString(),\r\n            name: this.name,\r\n            email: this.email,\r\n            course: this.course,\r\n            campus: this.campus\r\n          }\r\n          this.$emit('registered', newUser)\r\n        }, 1500)\r\n        \r\n      } catch (error) {\r\n        this.showError('Erro interno. Tente novamente.')\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n    \r\n    validateForm() {\r\n      let isValid = true\r\n      \r\n      // Validação do nome\r\n      if (this.name.length < 3) {\r\n        this.errors.name = 'Nome deve ter pelo menos 3 caracteres'\r\n        isValid = false\r\n      }\r\n      \r\n      // Validação do e-mail\r\n      if (!this.isValidEmail(this.email)) {\r\n        this.errors.email = 'E-mail inválido'\r\n        isValid = false\r\n      } else if (!this.isInstitutionalEmail(this.email)) {\r\n        this.errors.email = 'Use seu e-mail institucional (@estudante.ifmt.edu.br)'\r\n        isValid = false\r\n      }\r\n      \r\n      // Validação do curso\r\n      if (this.course.length < 3) {\r\n        this.errors.course = 'Informe seu curso'\r\n        isValid = false\r\n      }\r\n      \r\n      // Validação do campus\r\n      if (this.campus.length < 3) {\r\n        this.errors.campus = 'Informe seu campus'\r\n        isValid = false\r\n      }\r\n      \r\n      // Validação da senha\r\n      if (this.password.length < 6) {\r\n        this.errors.password = 'Senha deve ter pelo menos 6 caracteres'\r\n        isValid = false\r\n      }\r\n      \r\n      // Validação da confirmação de senha\r\n      if (this.password !== this.confirmPassword) {\r\n        this.errors.confirmPassword = 'Senhas não coincidem'\r\n        isValid = false\r\n      }\r\n      \r\n      return isValid\r\n    },\r\n    \r\n    isValidEmail(email) {\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n      return emailRegex.test(email)\r\n    },\r\n    \r\n    isInstitutionalEmail(email) {\r\n      const institutionalDomains = [\r\n        '@estudante.ifmt.edu.br',\r\n        '@professor.ifmt.edu.br',\r\n        '@ifmt.edu.br'\r\n      ]\r\n      return institutionalDomains.some(domain => email.endsWith(domain))\r\n    },\r\n    \r\n    userExists(email) {\r\n      const users = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\r\n      return users.some(user => user.email === email)\r\n    },\r\n    \r\n    saveUser() {\r\n      try {\r\n        const users = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\r\n        const newUser = {\r\n          id: Date.now().toString(),\r\n          name: this.name,\r\n          email: this.email,\r\n          course: this.course,\r\n          campus: this.campus,\r\n          passwordHash: this.hashPassword(this.password), // Compatível com LoginForm\r\n          createdAt: new Date().toISOString()\r\n        }\r\n        \r\n        users.push(newUser)\r\n        \r\n        // Salvar com verificação\r\n        localStorage.setItem('ifwave_users', JSON.stringify(users))\r\n        \r\n        // Verificar se foi salvo corretamente\r\n        const savedUsers = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\r\n        const userWasSaved = savedUsers.find(u => u.email === this.email)\r\n        \r\n        if (!userWasSaved) {\r\n          throw new Error('Falha ao salvar usuário')\r\n        }\r\n        \r\n        // Logar automaticamente o usuário após cadastro bem-sucedido\r\n        const currentUser = {\r\n          id: newUser.id,\r\n          name: newUser.name,\r\n          email: newUser.email,\r\n          course: newUser.course,\r\n          campus: newUser.campus,\r\n          loginTime: new Date().toISOString()\r\n        }\r\n        \r\n        localStorage.setItem('ifwave_current_user', JSON.stringify(currentUser))\r\n        \r\n        console.log('Usuário cadastrado e logado automaticamente:', newUser.email)\r\n        \r\n      } catch (error) {\r\n        console.error('Erro ao salvar usuário:', error)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    hashPassword(password) {\r\n      // Mesmo sistema de hash usado no LoginForm para compatibilidade\r\n      let hash = 0\r\n      for (let i = 0; i < password.length; i++) {\r\n        const char = password.charCodeAt(i)\r\n        hash = ((hash << 5) - hash) + char\r\n        hash = hash & hash // Converte para 32bit integer\r\n      }\r\n      return Math.abs(hash).toString(16)\r\n    },\r\n    \r\n    clearErrors() {\r\n      this.errors = {}\r\n      this.message = ''\r\n    },\r\n    \r\n    showSuccess(msg) {\r\n      this.message = msg\r\n      this.messageType = 'success'\r\n    },\r\n    \r\n    showError(msg) {\r\n      this.message = msg\r\n      this.messageType = 'error'\r\n    }\r\n  }\r\n}",
          "style": ".form-container {\r\n  background: #fff;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 12px;\r\n  padding: 32px 24px;\r\n  max-width: 380px;\r\n  margin: 32px auto;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  color: #262626;\r\n  margin-bottom: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 16px;\r\n}\r\n\r\ninput {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 12px 16px;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  transition: all 0.3s ease;\r\n  box-sizing: border-box;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border-color: #0095f6;\r\n  box-shadow: 0 0 0 2px rgba(0, 149, 246, 0.1);\r\n}\r\n\r\ninput.error {\r\n  border-color: #ed4956;\r\n  background-color: #fef7f7;\r\n}\r\n\r\n.error-msg {\r\n  color: #ed4956;\r\n  font-size: 12px;\r\n  margin-top: 4px;\r\n  display: block;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  background: #0095f6;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 12px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-top: 8px;\r\n}\r\n\r\n.submit-btn:hover:not(:disabled) {\r\n  background: #1877f2;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background: #c7c7c7;\r\n  cursor: not-allowed;\r\n  transform: none;\r\n}\r\n\r\n.loading {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.loading::after {\r\n  content: '';\r\n  width: 12px;\r\n  height: 12px;\r\n  border: 2px solid transparent;\r\n  border-top: 2px solid white;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.link-btn {\r\n  display: block;\r\n  width: 100%;\r\n  background: none;\r\n  border: none;\r\n  color: #0095f6;\r\n  text-align: center;\r\n  padding: 12px;\r\n  margin-top: 16px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-decoration: none;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.link-btn:hover {\r\n  color: #1877f2;\r\n  text-decoration: underline;\r\n}\r\n\r\n.message {\r\n  padding: 12px;\r\n  border-radius: 8px;\r\n  margin-top: 16px;\r\n  text-align: center;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.message.success {\r\n  background: #d4edda;\r\n  color: #155724;\r\n  border: 1px solid #c3e6cb;\r\n}\r\n\r\n.message.error {\r\n  background: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n}\r\n\r\n/* Responsividade */\r\n@media (max-width: 480px) {\r\n  .form-container {\r\n    margin: 16px;\r\n    padding: 24px 16px;\r\n    max-width: none;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 100
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 20
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 40
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 434,
          "functions": 5,
          "conditions": 36,
          "loops": 12,
          "score": 18.06451612903226
        },
        "imports": [],
        "exports": [
          "default"
        ],
        "events": [
          "go-login",
          "registered"
        ],
        "props": [],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": true,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": false,
          "score": 67
        }
      },
      {
        "name": "SearchScreen",
        "path": "src\\components\\SearchScreen.vue",
        "size": 19002,
        "sections": {
          "template": "<div class=\"search-container\">\r\n    <header class=\"search-header\">\r\n      <h2>🔍 Descobrir</h2>\r\n      <p>Encontre pessoas, posts e conteúdos do IFMT</p>\r\n    </header>\r\n\r\n    <!-- Barra de Pesquisa -->\r\n    <div class=\"search-bar\">\r\n      <div class=\"search-input-container\">\r\n        <svg class=\"search-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\">\r\n          <circle cx=\"11\" cy=\"11\" r=\"8\" stroke=\"currentColor\" stroke-width=\"2\"/>\r\n          <path d=\"m21 21-4.35-4.35\" stroke=\"currentColor\" stroke-width=\"2\"/>\r\n        </svg>\r\n        <input \r\n          v-model=\"searchQuery\"\r\n          type=\"text\" \r\n          placeholder=\"Buscar pessoas, cursos, posts...\"\r\n          class=\"search-input\"\r\n          @input=\"handleSearch\"\r\n        >\r\n        <button \r\n          v-if=\"searchQuery\" \r\n          @click=\"clearSearch\" \r\n          class=\"clear-btn\"\r\n        >\r\n          ✕\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Filtros -->\r\n    <div class=\"search-filters\">\r\n      <button \r\n        v-for=\"filter in filters\" \r\n        :key=\"filter.id\"\r\n        :class=\"['filter-btn', { active: activeFilter === filter.id }]\"\r\n        @click=\"setActiveFilter(filter.id)\"\r\n      >\r\n        {{ filter.icon }} {{ filter.label }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Resultados da Busca -->\r\n    <div v-if=\"searchQuery\" class=\"search-results\">\r\n      <h3>Resultados para \"{{ searchQuery }}\"</h3>\r\n      \r\n      <!-- Pessoas -->\r\n      <div v-if=\"filteredPeople.length > 0\" class=\"results-section\">\r\n        <h4>👥 Pessoas</h4>\r\n        <div class=\"people-grid\">\r\n          <div \r\n            v-for=\"person in filteredPeople\" \r\n            :key=\"person.id\"\r\n            class=\"person-card\"\r\n          >\r\n            <div class=\"person-avatar\">\r\n              <img :src=\"person.avatar || getDefaultAvatar(person.name)\" :alt=\"person.name\">\r\n            </div>\r\n            <div class=\"person-info\">\r\n              <h5>{{ person.name }}</h5>\r\n              <p class=\"person-course\">{{ person.course }}</p>\r\n              <p class=\"person-campus\">{{ person.campus }}</p>\r\n            </div>\r\n            <div class=\"person-actions\">\r\n              <button class=\"follow-btn\">\r\n                {{ person.following ? 'Seguindo' : 'Seguir' }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Posts -->\r\n      <div v-if=\"filteredPosts.length > 0\" class=\"results-section\">\r\n        <h4>📝 Posts</h4>\r\n        <div class=\"posts-list\">\r\n          <div \r\n            v-for=\"post in filteredPosts\" \r\n            :key=\"post.id\"\r\n            class=\"post-card\"\r\n          >\r\n            <div class=\"post-header\">\r\n              <div class=\"post-avatar\">\r\n                <img :src=\"getDefaultAvatar(post.author)\" :alt=\"post.author\">\r\n              </div>\r\n              <div class=\"post-info\">\r\n                <h5>{{ post.author }}</h5>\r\n                <p class=\"post-time\">{{ getRelativeTime(post.timestamp) }}</p>\r\n              </div>\r\n              <div v-if=\"post.category\" class=\"post-category\">\r\n                {{ getCategoryLabel(post.category) }}\r\n              </div>\r\n            </div>\r\n            <div class=\"post-content\">\r\n              {{ post.content }}\r\n            </div>\r\n            <div v-if=\"post.image\" class=\"post-image\">\r\n              <img :src=\"post.image\" :alt=\"'Post image'\">\r\n            </div>\r\n            <div class=\"post-stats\">\r\n              <span>❤️ {{ post.likes }}</span>\r\n              <span>💬 {{ post.comments }}</span>\r\n              <span>📤 {{ post.shares }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Nenhum resultado -->\r\n      <div v-if=\"hasNoResults\" class=\"no-results\">\r\n        <div class=\"no-results-icon\">🔍</div>\r\n        <h3>Nenhum resultado encontrado</h3>\r\n        <p>Tente buscar por algo diferente ou verifique a ortografia.</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Sugestões (quando não há busca) -->\r\n    <div v-else class=\"suggestions\">\r\n      <!-- Pessoas Sugeridas -->\r\n      <div class=\"suggestion-section\">\r\n        <h3>👥 Pessoas que você pode conhecer</h3>\r\n        <div class=\"suggestions-grid\">\r\n          <div \r\n            v-for=\"person in suggestedPeople\" \r\n            :key=\"person.id\"\r\n            class=\"suggestion-card\"\r\n          >\r\n            <div class=\"suggestion-avatar\">\r\n              <img :src=\"person.avatar || getDefaultAvatar(person.name)\" :alt=\"person.name\">\r\n            </div>\r\n            <div class=\"suggestion-info\">\r\n              <h5>{{ person.name }}</h5>\r\n              <p>{{ person.course }}</p>\r\n              <p class=\"campus\">{{ person.campus }}</p>\r\n            </div>\r\n            <button class=\"suggestion-follow-btn\">\r\n              Seguir\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Hashtags Populares -->\r\n      <div class=\"suggestion-section\">\r\n        <h3>🔥 Hashtags Populares</h3>\r\n        <div class=\"hashtags-grid\">\r\n          <div \r\n            v-for=\"hashtag in popularHashtags\" \r\n            :key=\"hashtag.tag\"\r\n            class=\"hashtag-card\"\r\n            @click=\"searchHashtag(hashtag.tag)\"\r\n          >\r\n            <div class=\"hashtag-name\">#{{ hashtag.tag }}</div>\r\n            <div class=\"hashtag-count\">{{ hashtag.count }} posts</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Cursos Populares -->\r\n      <div class=\"suggestion-section\">\r\n        <h3>📚 Cursos em Destaque</h3>\r\n        <div class=\"courses-grid\">\r\n          <div \r\n            v-for=\"course in popularCourses\" \r\n            :key=\"course.id\"\r\n            class=\"course-card\"\r\n          >\r\n            <div class=\"course-icon\">{{ course.icon }}</div>\r\n            <div class=\"course-info\">\r\n              <h5>{{ course.name }}</h5>\r\n              <p>{{ course.students }} estudantes</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>",
          "script": "export default {\r\n  name: 'SearchScreen',\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      activeFilter: 'all',\r\n      filters: [\r\n        { id: 'all', label: 'Tudo', icon: '🔍' },\r\n        { id: 'people', label: 'Pessoas', icon: '👥' },\r\n        { id: 'posts', label: 'Posts', icon: '📝' },\r\n        { id: 'courses', label: 'Cursos', icon: '📚' }\r\n      ],\r\n      mockPeople: [\r\n        {\r\n          id: 1,\r\n          name: 'Ana Silva',\r\n          course: 'Técnico em Informática',\r\n          campus: 'Cuiabá - Octayde',\r\n          following: false,\r\n          avatar: null\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Pedro Santos',\r\n          course: 'Técnico em Eletrônica',\r\n          campus: 'Várzea Grande',\r\n          following: true,\r\n          avatar: null\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'Maria Costa',\r\n          course: 'Engenharia de Software',\r\n          campus: 'Cuiabá - Octayde',\r\n          following: false,\r\n          avatar: null\r\n        },\r\n        {\r\n          id: 4,\r\n          name: 'João Oliveira',\r\n          course: 'Técnico em Redes',\r\n          campus: 'Rondonópolis',\r\n          following: false,\r\n          avatar: null\r\n        }\r\n      ],\r\n      mockPosts: [\r\n        {\r\n          id: 1,\r\n          author: 'Ana Silva',\r\n          content: 'Acabei de finalizar meu projeto de TCC! Muito feliz com o resultado.',\r\n          category: 'projeto',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 30),\r\n          likes: 15,\r\n          comments: 8,\r\n          shares: 3,\r\n          image: null\r\n        },\r\n        {\r\n          id: 2,\r\n          author: 'Pedro Santos',\r\n          content: 'Dica para quem está estudando programação: pratique todos os dias, mesmo que seja só 30 minutos!',\r\n          category: 'dica',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),\r\n          likes: 23,\r\n          comments: 12,\r\n          shares: 7,\r\n          image: null\r\n        },\r\n        {\r\n          id: 3,\r\n          author: 'Maria Costa',\r\n          content: 'Evento de tecnologia no campus amanhã! Quem vai comparecer?',\r\n          category: 'evento',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 5),\r\n          likes: 31,\r\n          comments: 15,\r\n          shares: 12,\r\n          image: null\r\n        }\r\n      ],\r\n      suggestedPeople: [\r\n        {\r\n          id: 5,\r\n          name: 'Carlos Lima',\r\n          course: 'Técnico em Informática',\r\n          campus: 'Cuiabá - Octayde'\r\n        },\r\n        {\r\n          id: 6,\r\n          name: 'Lucia Ferreira',\r\n          course: 'Engenharia Elétrica',\r\n          campus: 'Cuiabá - Octayde'\r\n        },\r\n        {\r\n          id: 7,\r\n          name: 'Rafael Souza',\r\n          course: 'Técnico em Eletrônica',\r\n          campus: 'Várzea Grande'\r\n        }\r\n      ],\r\n      popularHashtags: [\r\n        { tag: 'ifmt', count: 156 },\r\n        { tag: 'tcc', count: 89 },\r\n        { tag: 'programacao', count: 67 },\r\n        { tag: 'eletronica', count: 45 },\r\n        { tag: 'projeto', count: 34 }\r\n      ],\r\n      popularCourses: [\r\n        {\r\n          id: 1,\r\n          name: 'Técnico em Informática',\r\n          students: 245,\r\n          icon: '💻'\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Técnico em Eletrônica',\r\n          students: 189,\r\n          icon: '⚡'\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'Engenharia de Software',\r\n          students: 156,\r\n          icon: '👨‍💻'\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    filteredPeople() {\r\n      if (!this.searchQuery || (this.activeFilter !== 'all' && this.activeFilter !== 'people')) {\r\n        return []\r\n      }\r\n      return this.mockPeople.filter(person => \r\n        person.name.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n        person.course.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n        person.campus.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      )\r\n    },\r\n    \r\n    filteredPosts() {\r\n      if (!this.searchQuery || (this.activeFilter !== 'all' && this.activeFilter !== 'posts')) {\r\n        return []\r\n      }\r\n      return this.mockPosts.filter(post => \r\n        post.content.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n        post.author.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      )\r\n    },\r\n    \r\n    hasNoResults() {\r\n      return this.searchQuery && \r\n             this.filteredPeople.length === 0 && \r\n             this.filteredPosts.length === 0\r\n    }\r\n  },\r\n  methods: {\r\n    handleSearch() {\r\n      // Simula busca em tempo real\r\n      // Em produção, aqui seria feita a chamada para a API\r\n    },\r\n    \r\n    clearSearch() {\r\n      this.searchQuery = ''\r\n    },\r\n    \r\n    setActiveFilter(filterId) {\r\n      this.activeFilter = filterId\r\n    },\r\n    \r\n    searchHashtag(tag) {\r\n      this.searchQuery = `#${tag}`\r\n      this.activeFilter = 'posts'\r\n    },\r\n    \r\n    getDefaultAvatar(name) {\r\n      const colors = ['FF6B6B', '4ECDC4', '45B7D1', 'FFA07A', '98D8C8', 'F7DC6F', 'BB8FCE', '85C1E9']\r\n      const colorIndex = name.length % colors.length\r\n      const initials = name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)\r\n      \r\n      return `https://ui-avatars.com/api/?name=${initials}&background=${colors[colorIndex]}&color=fff&size=50&format=svg`\r\n    },\r\n    \r\n    getCategoryLabel(category) {\r\n      const labels = {\r\n        projeto: '💻 Projeto',\r\n        dica: '💡 Dica',\r\n        evento: '📅 Evento',\r\n        academico: '📚 Acadêmico',\r\n        conquista: '🏆 Conquista'\r\n      }\r\n      return labels[category] || category\r\n    },\r\n    \r\n    getRelativeTime(timestamp) {\r\n      const now = new Date()\r\n      const time = new Date(timestamp)\r\n      const diffInSeconds = Math.floor((now - time) / 1000)\r\n      \r\n      if (diffInSeconds < 60) {\r\n        return 'agora'\r\n      } else if (diffInSeconds < 3600) {\r\n        const minutes = Math.floor(diffInSeconds / 60)\r\n        return `${minutes}min`\r\n      } else if (diffInSeconds < 86400) {\r\n        const hours = Math.floor(diffInSeconds / 3600)\r\n        return `${hours}h`\r\n      } else {\r\n        const days = Math.floor(diffInSeconds / 86400)\r\n        return `${days}d`\r\n      }\r\n    }\r\n  }\r\n}",
          "style": ".search-container {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background: #ffffff;\r\n  min-height: 100vh;\r\n}\r\n\r\n.search-header {\r\n  text-align: center;\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.search-header h2 {\r\n  color: #2d3748;\r\n  margin: 0 0 8px 0;\r\n  font-size: 1.8em;\r\n}\r\n\r\n.search-header p {\r\n  color: #718096;\r\n  margin: 0;\r\n}\r\n\r\n.search-bar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.search-input-container {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.search-icon {\r\n  position: absolute;\r\n  left: 15px;\r\n  color: #718096;\r\n  z-index: 1;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 15px 15px 15px 50px;\r\n  border: 2px solid #e2e8f0;\r\n  border-radius: 25px;\r\n  font-size: 16px;\r\n  background: #f7fafc;\r\n  transition: all 0.2s;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.search-input:focus {\r\n  outline: none;\r\n  border-color: #4299e1;\r\n  background: #ffffff;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);\r\n}\r\n\r\n.clear-btn {\r\n  position: absolute;\r\n  right: 15px;\r\n  background: #e2e8f0;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #718096;\r\n  font-size: 14px;\r\n}\r\n\r\n.search-filters {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 25px;\r\n  overflow-x: auto;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.filter-btn {\r\n  background: #f7fafc;\r\n  border: 2px solid #e2e8f0;\r\n  padding: 8px 16px;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  transition: all 0.2s;\r\n  white-space: nowrap;\r\n  color: #4a5568;\r\n}\r\n\r\n.filter-btn:hover {\r\n  border-color: #cbd5e0;\r\n}\r\n\r\n.filter-btn.active {\r\n  background: #4299e1;\r\n  border-color: #4299e1;\r\n  color: white;\r\n}\r\n\r\n.search-results h3 {\r\n  color: #2d3748;\r\n  margin-bottom: 20px;\r\n  font-size: 1.3em;\r\n}\r\n\r\n.results-section {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.results-section h4 {\r\n  color: #4a5568;\r\n  margin-bottom: 15px;\r\n  font-size: 1.1em;\r\n  padding-bottom: 8px;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.people-grid {\r\n  display: grid;\r\n  gap: 15px;\r\n}\r\n\r\n.person-card {\r\n  background: #f7fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 12px;\r\n  padding: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.person-card:hover {\r\n  background: #ffffff;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.person-avatar img {\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.person-info {\r\n  flex: 1;\r\n}\r\n\r\n.person-info h5 {\r\n  margin: 0 0 4px 0;\r\n  color: #2d3748;\r\n  font-size: 1em;\r\n}\r\n\r\n.person-course {\r\n  margin: 0 0 2px 0;\r\n  color: #4a5568;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.person-campus {\r\n  margin: 0;\r\n  color: #718096;\r\n  font-size: 0.85em;\r\n}\r\n\r\n.follow-btn {\r\n  background: #4299e1;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 0.9em;\r\n  font-weight: 500;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.follow-btn:hover {\r\n  background: #3182ce;\r\n}\r\n\r\n.posts-list {\r\n  display: grid;\r\n  gap: 15px;\r\n}\r\n\r\n.post-card {\r\n  background: #f7fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 12px;\r\n  padding: 15px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.post-card:hover {\r\n  background: #ffffff;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.post-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.post-avatar img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.post-info h5 {\r\n  margin: 0;\r\n  color: #2d3748;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.post-time {\r\n  margin: 0;\r\n  color: #718096;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.post-category {\r\n  background: #e6fffa;\r\n  color: #2c7a7b;\r\n  padding: 4px 8px;\r\n  border-radius: 12px;\r\n  font-size: 0.75em;\r\n  margin-left: auto;\r\n}\r\n\r\n.post-content {\r\n  margin-bottom: 12px;\r\n  color: #2d3748;\r\n  line-height: 1.5;\r\n}\r\n\r\n.post-stats {\r\n  display: flex;\r\n  gap: 15px;\r\n  color: #718096;\r\n  font-size: 0.85em;\r\n}\r\n\r\n.no-results {\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n  color: #718096;\r\n}\r\n\r\n.no-results-icon {\r\n  font-size: 3em;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.no-results h3 {\r\n  color: #4a5568;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.suggestions {\r\n  margin-top: 20px;\r\n}\r\n\r\n.suggestion-section {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.suggestion-section h3 {\r\n  color: #2d3748;\r\n  margin-bottom: 15px;\r\n  font-size: 1.2em;\r\n}\r\n\r\n.suggestions-grid {\r\n  display: grid;\r\n  gap: 12px;\r\n}\r\n\r\n.suggestion-card {\r\n  background: #f7fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 12px;\r\n  padding: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.suggestion-card:hover {\r\n  background: #ffffff;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.suggestion-avatar img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.suggestion-info {\r\n  flex: 1;\r\n}\r\n\r\n.suggestion-info h5 {\r\n  margin: 0 0 2px 0;\r\n  color: #2d3748;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.suggestion-info p {\r\n  margin: 0;\r\n  color: #718096;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.campus {\r\n  color: #a0aec0 !important;\r\n}\r\n\r\n.suggestion-follow-btn {\r\n  background: #e2e8f0;\r\n  color: #4a5568;\r\n  border: none;\r\n  padding: 6px 12px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 0.8em;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.suggestion-follow-btn:hover {\r\n  background: #cbd5e0;\r\n}\r\n\r\n.hashtags-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n  gap: 12px;\r\n}\r\n\r\n.hashtag-card {\r\n  background: #f7fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 12px;\r\n  padding: 15px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.hashtag-card:hover {\r\n  background: #4299e1;\r\n  color: white;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.hashtag-name {\r\n  font-weight: 600;\r\n  font-size: 1.1em;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.hashtag-count {\r\n  font-size: 0.85em;\r\n  opacity: 0.8;\r\n}\r\n\r\n.courses-grid {\r\n  display: grid;\r\n  gap: 12px;\r\n}\r\n\r\n.course-card {\r\n  background: #f7fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 12px;\r\n  padding: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.course-card:hover {\r\n  background: #ffffff;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.course-icon {\r\n  font-size: 2em;\r\n}\r\n\r\n.course-info h5 {\r\n  margin: 0 0 4px 0;\r\n  color: #2d3748;\r\n}\r\n\r\n.course-info p {\r\n  margin: 0;\r\n  color: #718096;\r\n  font-size: 0.9em;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    padding: 15px;\r\n  }\r\n  \r\n  .search-filters {\r\n    justify-content: flex-start;\r\n  }\r\n  \r\n  .person-card {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n  \r\n  .hashtags-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 100
          },
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "feed_display",
            "category": "core",
            "weight": 9,
            "confidence": 40
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 80
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 80
          },
          {
            "name": "sharing",
            "category": "interaction",
            "weight": 5,
            "confidence": 80
          },
          {
            "name": "following",
            "category": "interaction",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 80
          },
          {
            "name": "live_streaming",
            "category": "advanced",
            "weight": 4,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "accessibility",
            "category": "technical",
            "weight": 6,
            "confidence": 100
          }
        ],
        "complexity": {
          "lines": 835,
          "functions": 3,
          "conditions": 31,
          "loops": 39,
          "score": 11.892215568862277
        },
        "imports": [],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [],
        "quality": {
          "hasComments": true,
          "hasValidation": false,
          "hasErrorHandling": false,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 50
        }
      },
      {
        "name": "AdminDashboard",
        "path": "src\\admin\\components\\AdminDashboard.vue",
        "size": 19810,
        "sections": {
          "template": "<div class=\"admin-dashboard\">\r\n    <div class=\"dashboard-header\">\r\n      <h2>📊 Dashboard</h2>\r\n      <p>Visão geral do sistema</p>\r\n    </div>\r\n\r\n    <!-- Cartões de estatísticas -->\r\n    <div class=\"stats-grid\">\r\n      <div \r\n        v-for=\"(stat, key) in stats\" \r\n        :key=\"key\" \r\n        class=\"stat-card\"\r\n        @click=\"$emit('selectModel', key)\"\r\n      >\r\n        <div class=\"stat-icon\">\r\n          <IconComponent :name=\"models[key]?.icon || 'chart'\" :size=\"32\" />\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>{{ stat.count }}</h3>\r\n          <p>{{ models[key]?.name || key }}</p>\r\n        </div>\r\n        <div class=\"stat-trend\" :class=\"{ positive: stat.trend > 0, negative: stat.trend < 0 }\">\r\n          {{ stat.trend > 0 ? '+' : '' }}{{ stat.trend }}%\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Gráficos e relatórios -->\r\n    <div class=\"dashboard-grid\">\r\n      <!-- Atividade recente -->\r\n      <div class=\"dashboard-card\">\r\n        <div class=\"card-header\">\r\n          <h3>📈 Atividade Recente</h3>\r\n          <select v-model=\"activityPeriod\" class=\"period-selector\">\r\n            <option value=\"today\">Hoje</option>\r\n            <option value=\"week\">Esta Semana</option>\r\n            <option value=\"month\">Este Mês</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"activity-chart\">\r\n          <div class=\"chart-bars\">\r\n            <div \r\n              v-for=\"(value, index) in chartData\" \r\n              :key=\"index\" \r\n              class=\"chart-bar\"\r\n              :style=\"{ height: `${value}%` }\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Posts populares -->\r\n      <div class=\"dashboard-card\">\r\n        <div class=\"card-header\">\r\n          <h3>🔥 Posts Populares</h3>\r\n        </div>\r\n        <div class=\"popular-posts\">\r\n          <div \r\n            v-for=\"post in popularPosts\" \r\n            :key=\"post.id\"\r\n            class=\"popular-item\"\r\n          >\r\n            <div class=\"item-content\">\r\n              <span class=\"content-preview\">{{ truncateText(post.content, 50) }}</span>\r\n              <small>por {{ getUserName(post.userId) }}</small>\r\n            </div>\r\n            <div class=\"item-stats\">\r\n              <span class=\"likes\">❤️ {{ post.likesCount }}</span>\r\n              <span class=\"comments\">💬 {{ post.commentsCount }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Usuários ativos -->\r\n      <div class=\"dashboard-card\">\r\n        <div class=\"card-header\">\r\n          <h3>👥 Usuários Ativos</h3>\r\n        </div>\r\n        <div class=\"active-users\">\r\n          <div \r\n            v-for=\"user in activeUsers\" \r\n            :key=\"user.id\"\r\n            class=\"user-item\"\r\n          >\r\n            <div class=\"user-avatar\">\r\n              <img \r\n                v-if=\"user.avatar\" \r\n                :src=\"user.avatar\" \r\n                :alt=\"user.name\"\r\n                @error=\"handleImageError\"\r\n              />\r\n              <IconComponent v-else name=\"profile\" :size=\"24\" />\r\n            </div>\r\n            <div class=\"user-info\">\r\n              <span class=\"user-name\">{{ user.name }}</span>\r\n              <small>{{ user.course }} - {{ user.campus }}</small>\r\n            </div>\r\n            <div class=\"user-status online\">●</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Relatórios pendentes -->\r\n      <div class=\"dashboard-card\">\r\n        <div class=\"card-header\">\r\n          <h3>🚨 Relatórios Pendentes</h3>\r\n        </div>\r\n        <div class=\"pending-reports\">\r\n          <div \r\n            v-for=\"report in pendingReports\" \r\n            :key=\"report.id\"\r\n            class=\"report-item\"\r\n            :class=\"getReportSeverity(report.reason)\"\r\n          >\r\n            <div class=\"report-content\">\r\n              <span class=\"report-reason\">{{ translateReason(report.reason) }}</span>\r\n              <small>{{ report.targetType }} reportado</small>\r\n            </div>\r\n            <div class=\"report-date\">\r\n              {{ formatDate(report.createdAt) }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Status do sistema -->\r\n      <div class=\"dashboard-card\">\r\n        <div class=\"card-header\">\r\n          <h3>⚙️ Status do Sistema</h3>\r\n        </div>\r\n        <div class=\"system-status\">\r\n          <div class=\"status-item\">\r\n            <span class=\"status-label\">Usuários Online</span>\r\n            <span class=\"status-value\">{{ onlineUsers }}</span>\r\n          </div>\r\n          <div class=\"status-item\">\r\n            <span class=\"status-label\">Posts Hoje</span>\r\n            <span class=\"status-value\">{{ todayPosts }}</span>\r\n          </div>\r\n          <div class=\"status-item\">\r\n            <span class=\"status-label\">Mensagens Hoje</span>\r\n            <span class=\"status-value\">{{ todayMessages }}</span>\r\n          </div>\r\n          <div class=\"status-item\">\r\n            <span class=\"status-label\">Armazenamento</span>\r\n            <span class=\"status-value\">{{ storageUsed }}MB</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Ações rápidas -->\r\n      <div class=\"dashboard-card\">\r\n        <div class=\"card-header\">\r\n          <h3>⚡ Ações Rápidas</h3>\r\n        </div>\r\n        <div class=\"quick-actions\">\r\n          <button \r\n            v-for=\"action in quickActions\" \r\n            :key=\"action.id\"\r\n            class=\"action-btn\"\r\n            @click=\"handleQuickAction(action.id)\"\r\n          >\r\n            <IconComponent :name=\"action.icon\" :size=\"20\" />\r\n            {{ action.label }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>",
          "script": "import IconComponent from '../../components/IconComponent.vue'\r\n\r\nexport default {\r\n  name: 'AdminDashboard',\r\n  components: {\r\n    IconComponent\r\n  },\r\n  props: {\r\n    models: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    dataService: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      activityPeriod: 'week',\r\n      quickActions: [\r\n        { id: 'create-user', label: 'Criar Usuário', icon: 'profile' },\r\n        { id: 'backup-data', label: 'Backup', icon: 'document' },\r\n        { id: 'clear-cache', label: 'Limpar Cache', icon: 'settings' },\r\n        { id: 'export-data', label: 'Exportar Dados', icon: 'share' }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    stats() {\r\n      const stats = {}\r\n      for (const modelKey in this.models) {\r\n        const data = this.dataService.getAll(modelKey)\r\n        const previousData = this.getPreviousData(modelKey)\r\n        const trend = this.calculateTrend(data.length, previousData.length)\r\n        \r\n        stats[modelKey] = {\r\n          count: data.length,\r\n          trend: trend\r\n        }\r\n      }\r\n      return stats\r\n    },\r\n    \r\n    popularPosts() {\r\n      const posts = this.dataService.getAll('posts')\r\n      return posts\r\n        .sort((a, b) => (b.likesCount || 0) - (a.likesCount || 0))\r\n        .slice(0, 5)\r\n    },\r\n    \r\n    activeUsers() {\r\n      const users = this.dataService.getAll('users')\r\n      return users\r\n        .filter(user => user.isActive)\r\n        .slice(0, 8)\r\n    },\r\n    \r\n    pendingReports() {\r\n      const reports = this.dataService.getAll('reports')\r\n      return reports\r\n        .filter(report => report.status === 'pending')\r\n        .slice(0, 5)\r\n    },\r\n    \r\n    onlineUsers() {\r\n      return this.activeUsers.length\r\n    },\r\n    \r\n    todayPosts() {\r\n      const posts = this.dataService.getAll('posts')\r\n      const today = new Date().toDateString()\r\n      return posts.filter(post => {\r\n        const postDate = new Date(post.createdAt).toDateString()\r\n        return postDate === today\r\n      }).length\r\n    },\r\n    \r\n    todayMessages() {\r\n      const messages = this.dataService.getAll('messages')\r\n      const today = new Date().toDateString()\r\n      return messages.filter(message => {\r\n        const messageDate = new Date(message.createdAt).toDateString()\r\n        return messageDate === today\r\n      }).length\r\n    },\r\n    \r\n    chartData() {\r\n      // Gerar dados do gráfico baseado no período selecionado\r\n      const days = this.activityPeriod === 'today' ? 24 : \r\n                   this.activityPeriod === 'week' ? 7 : 30\r\n      \r\n      const data = []\r\n      for (let i = 0; i < days; i++) {\r\n        // Simular atividade baseada em dados reais + randomização\r\n        const activity = Math.random() * 100\r\n        data.push(Math.round(activity))\r\n      }\r\n      return data\r\n    },\r\n    \r\n    storageUsed() {\r\n      // Simular uso de armazenamento\r\n      let totalSize = 0\r\n      for (const key in localStorage) {\r\n        if (key.startsWith('ifwave_')) {\r\n          totalSize += localStorage[key].length\r\n        }\r\n      }\r\n      return Math.round(totalSize / 1024) // KB to MB aproximado\r\n    }\r\n  },\r\n  methods: {\r\n    getPreviousData(modelKey) {\r\n      // Simular dados anteriores para calcular tendência\r\n      const currentData = this.dataService.getAll(modelKey)\r\n      const variation = Math.random() * 0.3 - 0.15 // -15% a +15%\r\n      return Array(Math.floor(currentData.length * (1 - variation)))\r\n    },\r\n    \r\n    calculateTrend(current, previous) {\r\n      if (previous === 0) return current > 0 ? 100 : 0\r\n      return Math.round(((current - previous) / previous) * 100)\r\n    },\r\n    \r\n    getUserName(userId) {\r\n      const user = this.dataService.getById('users', userId)\r\n      return user ? user.name : 'Usuário Desconhecido'\r\n    },\r\n    \r\n    truncateText(text, maxLength) {\r\n      if (!text) return ''\r\n      return text.length > maxLength ? text.substring(0, maxLength) + '...' : text\r\n    },\r\n    \r\n    translateReason(reason) {\r\n      const translations = {\r\n        spam: 'Spam',\r\n        harassment: 'Assédio',\r\n        inappropriate: 'Inadequado',\r\n        fake: 'Conteúdo Falso',\r\n        violence: 'Violência',\r\n        other: 'Outro'\r\n      }\r\n      return translations[reason] || reason\r\n    },\r\n    \r\n    getReportSeverity(reason) {\r\n      const severities = {\r\n        violence: 'high',\r\n        harassment: 'high',\r\n        inappropriate: 'medium',\r\n        spam: 'low',\r\n        fake: 'medium',\r\n        other: 'low'\r\n      }\r\n      return severities[reason] || 'low'\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return ''\r\n      const date = new Date(dateString)\r\n      return date.toLocaleDateString('pt-BR', {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      })\r\n    },\r\n    \r\n    handleQuickAction(actionId) {\r\n      switch (actionId) {\r\n        case 'create-user':\r\n          this.$emit('navigate', 'model', 'users')\r\n          break\r\n        case 'backup-data':\r\n          this.backupData()\r\n          break\r\n        case 'clear-cache':\r\n          this.clearCache()\r\n          break\r\n        case 'export-data':\r\n          this.exportData()\r\n          break\r\n      }\r\n    },\r\n    \r\n    backupData() {\r\n      try {\r\n        const backup = {}\r\n        for (const modelKey in this.models) {\r\n          backup[modelKey] = this.dataService.getAll(modelKey)\r\n        }\r\n        \r\n        const dataStr = JSON.stringify(backup, null, 2)\r\n        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr)\r\n        \r\n        const exportFileDefaultName = `ifwave-backup-${new Date().toISOString().split('T')[0]}.json`\r\n        \r\n        const linkElement = document.createElement('a')\r\n        linkElement.setAttribute('href', dataUri)\r\n        linkElement.setAttribute('download', exportFileDefaultName)\r\n        linkElement.click()\r\n        \r\n        alert('Backup realizado com sucesso!')\r\n      } catch (error) {\r\n        alert('Erro ao realizar backup: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    clearCache() {\r\n      if (confirm('Tem certeza que deseja limpar o cache? Esta ação não pode ser desfeita.')) {\r\n        // Limpar apenas dados temporários, manter dados principais\r\n        const keysToKeep = Object.keys(this.models).map(key => `ifwave_${key}`)\r\n        \r\n        for (const key in localStorage) {\r\n          if (key.startsWith('ifwave_') && !keysToKeep.includes(key)) {\r\n            localStorage.removeItem(key)\r\n          }\r\n        }\r\n        \r\n        alert('Cache limpo com sucesso!')\r\n      }\r\n    },\r\n    \r\n    exportData() {\r\n      try {\r\n        const exportData = {}\r\n        for (const modelKey in this.models) {\r\n          exportData[modelKey] = this.dataService.getAll(modelKey)\r\n        }\r\n        \r\n        const csv = this.jsonToCsv(exportData)\r\n        const dataUri = 'data:text/csv;charset=utf-8,'+ encodeURIComponent(csv)\r\n        \r\n        const exportFileDefaultName = `ifwave-export-${new Date().toISOString().split('T')[0]}.csv`\r\n        \r\n        const linkElement = document.createElement('a')\r\n        linkElement.setAttribute('href', dataUri)\r\n        linkElement.setAttribute('download', exportFileDefaultName)\r\n        linkElement.click()\r\n        \r\n        alert('Dados exportados com sucesso!')\r\n      } catch (error) {\r\n        alert('Erro ao exportar dados: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    jsonToCsv(data) {\r\n      let csv = ''\r\n      \r\n      for (const [modelName, records] of Object.entries(data)) {\r\n        if (records.length === 0) continue\r\n        \r\n        csv += `\\n\\n=== ${modelName.toUpperCase()} ===\\n`\r\n        \r\n        const headers = Object.keys(records[0])\r\n        csv += headers.join(',') + '\\n'\r\n        \r\n        for (const record of records) {\r\n          const values = headers.map(header => {\r\n            const value = record[header]\r\n            return typeof value === 'string' ? `\"${value.replace(/\"/g, '\"\"')}\"` : value\r\n          })\r\n          csv += values.join(',') + '\\n'\r\n        }\r\n      }\r\n      \r\n      return csv\r\n    },\r\n    \r\n    handleImageError(event) {\r\n      event.target.style.display = 'none'\r\n    }\r\n  }\r\n}",
          "style": ".admin-dashboard {\r\n  padding: 0;\r\n}\r\n\r\n.dashboard-header {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.dashboard-header h2 {\r\n  margin: 0 0 5px 0;\r\n  color: #333;\r\n  font-size: 1.8em;\r\n}\r\n\r\n.dashboard-header p {\r\n  margin: 0;\r\n  color: #666;\r\n}\r\n\r\n/* Stats Grid */\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 24px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  border-left: 4px solid #007bff;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n  border-left-color: #0056b3;\r\n}\r\n\r\n.stat-icon {\r\n  background: #f8f9fa;\r\n  border-radius: 50%;\r\n  padding: 12px;\r\n  color: #007bff;\r\n}\r\n\r\n.stat-content h3 {\r\n  margin: 0;\r\n  font-size: 2em;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.stat-content p {\r\n  margin: 4px 0 0 0;\r\n  color: #666;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.stat-trend {\r\n  margin-left: auto;\r\n  font-size: 0.9em;\r\n  font-weight: bold;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  background: #e9ecef;\r\n  color: #6c757d;\r\n}\r\n\r\n.stat-trend.positive {\r\n  background: #d4edda;\r\n  color: #155724;\r\n}\r\n\r\n.stat-trend.negative {\r\n  background: #f8d7da;\r\n  color: #721c24;\r\n}\r\n\r\n/* Dashboard Grid */\r\n.dashboard-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.dashboard-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.card-header {\r\n  padding: 20px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  display: flex;\r\n  justify-content: between;\r\n  align-items: center;\r\n}\r\n\r\n.card-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n  font-size: 1.1em;\r\n}\r\n\r\n.period-selector {\r\n  padding: 6px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 6px;\r\n  font-size: 0.9em;\r\n}\r\n\r\n/* Activity Chart */\r\n.activity-chart {\r\n  padding: 20px;\r\n}\r\n\r\n.chart-bars {\r\n  display: flex;\r\n  align-items: end;\r\n  justify-content: space-between;\r\n  height: 120px;\r\n  gap: 2px;\r\n  padding: 0 10px;\r\n}\r\n\r\n.chart-bar {\r\n  background: linear-gradient(to top, #007bff, #66b3ff);\r\n  min-height: 10%;\r\n  flex: 1;\r\n  border-radius: 2px 2px 0 0;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.chart-bar:hover {\r\n  background: linear-gradient(to top, #0056b3, #4da6ff);\r\n  transform: scaleY(1.05);\r\n}\r\n\r\n.chart-placeholder {\r\n  text-align: center;\r\n  color: #999;\r\n  padding: 40px 20px;\r\n}\r\n\r\n.chart-placeholder p {\r\n  margin: 10px 0 0 0;\r\n  font-size: 0.9em;\r\n}\r\n\r\n/* Popular Posts */\r\n.popular-posts {\r\n  padding: 0;\r\n}\r\n\r\n.popular-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #f8f9fa;\r\n}\r\n\r\n.popular-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.item-content {\r\n  flex: 1;\r\n}\r\n\r\n.content-preview {\r\n  display: block;\r\n  color: #333;\r\n  font-size: 0.9em;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.item-content small {\r\n  color: #666;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.item-stats {\r\n  display: flex;\r\n  gap: 12px;\r\n  font-size: 0.8em;\r\n  color: #666;\r\n}\r\n\r\n/* Active Users */\r\n.active-users {\r\n  padding: 0;\r\n}\r\n\r\n.user-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 12px 20px;\r\n  border-bottom: 1px solid #f8f9fa;\r\n}\r\n\r\n.user-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.user-avatar {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background: #f8f9fa;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.user-avatar img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.user-info {\r\n  flex: 1;\r\n}\r\n\r\n.user-name {\r\n  display: block;\r\n  font-weight: 500;\r\n  color: #333;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.user-info small {\r\n  color: #666;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.user-status {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  background: #28a745;\r\n}\r\n\r\n/* Pending Reports */\r\n.pending-reports {\r\n  padding: 0;\r\n}\r\n\r\n.report-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #f8f9fa;\r\n  border-left: 4px solid #28a745;\r\n}\r\n\r\n.report-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.report-item.medium {\r\n  border-left-color: #ffc107;\r\n}\r\n\r\n.report-item.high {\r\n  border-left-color: #dc3545;\r\n}\r\n\r\n.report-reason {\r\n  display: block;\r\n  font-weight: 500;\r\n  color: #333;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.report-content small {\r\n  color: #666;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.report-date {\r\n  font-size: 0.8em;\r\n  color: #666;\r\n}\r\n\r\n/* System Status */\r\n.system-status {\r\n  padding: 20px;\r\n}\r\n\r\n.status-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 12px 0;\r\n  border-bottom: 1px solid #f8f9fa;\r\n}\r\n\r\n.status-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.status-label {\r\n  color: #666;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.status-value {\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n/* Quick Actions */\r\n.quick-actions {\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n  gap: 12px;\r\n}\r\n\r\n.action-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 12px 16px;\r\n  background: #f8f9fa;\r\n  border: 1px solid #e9ecef;\r\n  border-radius: 8px;\r\n  color: #495057;\r\n  font-size: 0.9em;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.action-btn:hover {\r\n  background: #e9ecef;\r\n  border-color: #007bff;\r\n  color: #007bff;\r\n}\r\n\r\n/* Responsive */\r\n@media (max-width: 768px) {\r\n  .stats-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .dashboard-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .stat-card {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .quick-actions {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 80
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "admin_panel",
            "category": "core",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 80
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "sharing",
            "category": "interaction",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 80
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 40
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "accessibility",
            "category": "technical",
            "weight": 6,
            "confidence": 40
          },
          {
            "name": "internationalization",
            "category": "technical",
            "weight": 3,
            "confidence": 60
          }
        ],
        "complexity": {
          "lines": 827,
          "functions": 7,
          "conditions": 36,
          "loops": 24,
          "score": 11.704957678355502
        },
        "imports": [
          "../../components/IconComponent.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [
          "selectModel",
          "navigate"
        ],
        "props": [
          "models",
          "required"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": true,
          "hasTypeChecking": true,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 100
        }
      },
      {
        "name": "AdminModelView",
        "path": "src\\admin\\components\\AdminModelView.vue",
        "size": 31872,
        "sections": {
          "template": "<div class=\"admin-model-view\">\r\n    <!-- Header -->\r\n    <div class=\"model-header\">\r\n      <div class=\"header-left\">\r\n        <button @click=\"$emit('back')\" class=\"back-btn\">\r\n          <IconComponent name=\"back\" :size=\"16\" />\r\n          Voltar\r\n        </button>\r\n        <h2>\r\n          <IconComponent :name=\"model.icon\" :size=\"24\" />\r\n          {{ model.name }}\r\n        </h2>\r\n      </div>\r\n      \r\n      <div class=\"header-actions\">\r\n        <button @click=\"showForm = true; editingItem = null\" class=\"btn btn-primary\">\r\n          <IconComponent name=\"publish\" :size=\"16\" />\r\n          Adicionar {{ model.name.slice(0, -1) }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Filtros e busca -->\r\n    <div class=\"model-filters\">\r\n      <div class=\"search-bar\">\r\n        <IconComponent name=\"search\" :size=\"16\" />\r\n        <input \r\n          v-model=\"searchQuery\" \r\n          type=\"text\" \r\n          placeholder=\"Buscar...\"\r\n          class=\"search-input\"\r\n        />\r\n      </div>\r\n      \r\n      <div class=\"filters\">\r\n        <select \r\n          v-for=\"filter in model.listFilter\" \r\n          :key=\"filter\"\r\n          v-model=\"filters[filter]\"\r\n          class=\"filter-select\"\r\n        >\r\n          <option value=\"\">Todos {{ getFieldLabel(filter) }}</option>\r\n          <option \r\n            v-for=\"option in getFilterOptions(filter)\" \r\n            :key=\"option.value\"\r\n            :value=\"option.value\"\r\n          >\r\n            {{ option.label }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n      \r\n      <div class=\"view-controls\">\r\n        <button \r\n          @click=\"viewMode = 'table'\" \r\n          :class=\"{ active: viewMode === 'table' }\"\r\n          class=\"view-btn\"\r\n        >\r\n          <IconComponent name=\"grid\" :size=\"16\" />\r\n        </button>\r\n        <button \r\n          @click=\"viewMode = 'cards'\" \r\n          :class=\"{ active: viewMode === 'cards' }\"\r\n          class=\"view-btn\"\r\n        >\r\n          <IconComponent name=\"menu\" :size=\"16\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Lista de itens -->\r\n    <div class=\"model-content\">\r\n      <!-- Modo Tabela -->\r\n      <div v-if=\"viewMode === 'table'\" class=\"table-view\">\r\n        <div class=\"table-wrapper\">\r\n          <table class=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  <input \r\n                    type=\"checkbox\" \r\n                    @change=\"toggleSelectAll\"\r\n                    :checked=\"allSelected\"\r\n                    :indeterminate=\"someSelected\"\r\n                  />\r\n                </th>\r\n                <th \r\n                  v-for=\"field in model.listDisplay\" \r\n                  :key=\"field\"\r\n                  @click=\"sortBy(field)\"\r\n                  class=\"sortable\"\r\n                  :class=\"{ active: sortField === field }\"\r\n                >\r\n                  {{ getFieldLabel(field) }}\r\n                  <span v-if=\"sortField === field\" class=\"sort-indicator\">\r\n                    {{ sortDirection === 'asc' ? '↑' : '↓' }}\r\n                  </span>\r\n                </th>\r\n                <th>Ações</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr \r\n                v-for=\"item in paginatedItems\" \r\n                :key=\"item.id\"\r\n                class=\"data-row\"\r\n              >\r\n                <td>\r\n                  <input \r\n                    type=\"checkbox\" \r\n                    :value=\"item.id\"\r\n                    v-model=\"selectedItems\"\r\n                  />\r\n                </td>\r\n                <td \r\n                  v-for=\"field in model.listDisplay\" \r\n                  :key=\"field\"\r\n                  class=\"data-cell\"\r\n                >\r\n                  {{ formatFieldValue(item[field], field) }}\r\n                </td>\r\n                <td class=\"actions-cell\">\r\n                  <button \r\n                    @click=\"editItem(item)\" \r\n                    class=\"action-btn edit\"\r\n                    title=\"Editar\"\r\n                  >\r\n                    <IconComponent name=\"edit\" :size=\"14\" />\r\n                  </button>\r\n                  <button \r\n                    @click=\"deleteItem(item)\" \r\n                    class=\"action-btn delete\"\r\n                    title=\"Excluir\"\r\n                  >\r\n                    <IconComponent name=\"close\" :size=\"14\" />\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Modo Cards -->\r\n      <div v-else class=\"cards-view\">\r\n        <div class=\"cards-grid\">\r\n          <div \r\n            v-for=\"item in paginatedItems\" \r\n            :key=\"item.id\"\r\n            class=\"item-card\"\r\n          >\r\n            <div class=\"card-header\">\r\n              <input \r\n                type=\"checkbox\" \r\n                :value=\"item.id\"\r\n                v-model=\"selectedItems\"\r\n              />\r\n              <div class=\"card-actions\">\r\n                <button \r\n                  @click=\"editItem(item)\" \r\n                  class=\"action-btn edit\"\r\n                  title=\"Editar\"\r\n                >\r\n                  <IconComponent name=\"edit\" :size=\"14\" />\r\n                </button>\r\n                <button \r\n                  @click=\"deleteItem(item)\" \r\n                  class=\"action-btn delete\"\r\n                  title=\"Excluir\"\r\n                >\r\n                  <IconComponent name=\"close\" :size=\"14\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-content\">\r\n              <div \r\n                v-for=\"field in model.listDisplay.slice(0, 4)\" \r\n                :key=\"field\"\r\n                class=\"card-field\"\r\n              >\r\n                <strong>{{ getFieldLabel(field) }}:</strong>\r\n                <span>{{ formatFieldValue(item[field], field) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Paginação -->\r\n      <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n        <button \r\n          @click=\"currentPage = 1\" \r\n          :disabled=\"currentPage === 1\"\r\n          class=\"page-btn\"\r\n        >\r\n          ««\r\n        </button>\r\n        <button \r\n          @click=\"currentPage--\" \r\n          :disabled=\"currentPage === 1\"\r\n          class=\"page-btn\"\r\n        >\r\n          ‹\r\n        </button>\r\n        \r\n        <span class=\"page-info\">\r\n          {{ currentPage }} de {{ totalPages }}\r\n        </span>\r\n        \r\n        <button \r\n          @click=\"currentPage++\" \r\n          :disabled=\"currentPage === totalPages\"\r\n          class=\"page-btn\"\r\n        >\r\n          ›\r\n        </button>\r\n        <button \r\n          @click=\"currentPage = totalPages\" \r\n          :disabled=\"currentPage === totalPages\"\r\n          class=\"page-btn\"\r\n        >\r\n          »»\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Ações em lote -->\r\n    <div v-if=\"selectedItems.length > 0\" class=\"bulk-actions\">\r\n      <div class=\"bulk-info\">\r\n        {{ selectedItems.length }} item(s) selecionado(s)\r\n      </div>\r\n      <div class=\"bulk-buttons\">\r\n        <button @click=\"bulkDelete\" class=\"btn btn-danger\">\r\n          <IconComponent name=\"close\" :size=\"16\" />\r\n          Excluir Selecionados\r\n        </button>\r\n        <button @click=\"selectedItems = []\" class=\"btn btn-secondary\">\r\n          Cancelar\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de formulário -->\r\n    <div v-if=\"showForm\" class=\"modal-overlay\" @click=\"closeForm\">\r\n      <div class=\"modal-content\" @click.stop>\r\n        <div class=\"modal-header\">\r\n          <h3>\r\n            {{ editingItem ? 'Editar' : 'Adicionar' }} {{ model.name.slice(0, -1) }}\r\n          </h3>\r\n          <button @click=\"closeForm\" class=\"close-btn\">\r\n            <IconComponent name=\"close\" :size=\"18\" />\r\n          </button>\r\n        </div>\r\n        \r\n        <form @submit.prevent=\"saveItem\" class=\"item-form\">\r\n          <div class=\"form-grid\">\r\n            <div \r\n              v-for=\"(fieldConfig, fieldName) in model.fields\" \r\n              :key=\"fieldName\"\r\n              v-show=\"!fieldConfig.readonly || editingItem\"\r\n              class=\"form-group\"\r\n              :class=\"{ 'full-width': fieldConfig.type === 'textarea' }\"\r\n            >\r\n              <label :for=\"fieldName\">\r\n                {{ fieldConfig.label }}\r\n                <span v-if=\"fieldConfig.required\" class=\"required\">*</span>\r\n              </label>\r\n              \r\n              <!-- Text, Email, Tel, URL, Number -->\r\n              <input \r\n                v-if=\"['text', 'email', 'tel', 'url', 'number'].includes(fieldConfig.type)\"\r\n                :id=\"fieldName\"\r\n                v-model=\"formData[fieldName]\"\r\n                :type=\"fieldConfig.type\"\r\n                :required=\"fieldConfig.required\"\r\n                :readonly=\"fieldConfig.readonly\"\r\n                class=\"form-control\"\r\n              />\r\n              \r\n              <!-- Password -->\r\n              <input \r\n                v-else-if=\"fieldConfig.type === 'password'\"\r\n                :id=\"fieldName\"\r\n                v-model=\"formData[fieldName]\"\r\n                type=\"password\"\r\n                :required=\"fieldConfig.required && !editingItem\"\r\n                class=\"form-control\"\r\n                :placeholder=\"editingItem ? 'Deixe em branco para manter a senha atual' : ''\"\r\n              />\r\n              \r\n              <!-- Textarea -->\r\n              <textarea \r\n                v-else-if=\"fieldConfig.type === 'textarea'\"\r\n                :id=\"fieldName\"\r\n                v-model=\"formData[fieldName]\"\r\n                :required=\"fieldConfig.required\"\r\n                :readonly=\"fieldConfig.readonly\"\r\n                class=\"form-control\"\r\n                rows=\"3\"\r\n              ></textarea>\r\n              \r\n              <!-- Select -->\r\n              <select \r\n                v-else-if=\"fieldConfig.type === 'select'\"\r\n                :id=\"fieldName\"\r\n                v-model=\"formData[fieldName]\"\r\n                :required=\"fieldConfig.required\"\r\n                :disabled=\"fieldConfig.readonly\"\r\n                class=\"form-control\"\r\n              >\r\n                <option value=\"\">Selecione...</option>\r\n                <option \r\n                  v-for=\"option in fieldConfig.options\" \r\n                  :key=\"option\"\r\n                  :value=\"option\"\r\n                >\r\n                  {{ option }}\r\n                </option>\r\n              </select>\r\n              \r\n              <!-- Boolean -->\r\n              <div v-else-if=\"fieldConfig.type === 'boolean'\" class=\"checkbox-wrapper\">\r\n                <input \r\n                  :id=\"fieldName\"\r\n                  type=\"checkbox\"\r\n                  v-model=\"formData[fieldName]\"\r\n                  :disabled=\"fieldConfig.readonly\"\r\n                  class=\"form-checkbox\"\r\n                />\r\n                <label :for=\"fieldName\" class=\"checkbox-label\">\r\n                  {{ fieldConfig.label }}\r\n                </label>\r\n              </div>\r\n              \r\n              <!-- Date, Datetime -->\r\n              <input \r\n                v-else-if=\"['date', 'datetime'].includes(fieldConfig.type)\"\r\n                :id=\"fieldName\"\r\n                v-model=\"formData[fieldName]\"\r\n                :type=\"fieldConfig.type === 'date' ? 'date' : 'datetime-local'\"\r\n                :required=\"fieldConfig.required\"\r\n                :readonly=\"fieldConfig.readonly\"\r\n                class=\"form-control\"\r\n              />\r\n              \r\n              <!-- Foreign Key -->\r\n              <select \r\n                v-else-if=\"fieldConfig.type === 'foreignkey'\"\r\n                :id=\"fieldName\"\r\n                v-model=\"formData[fieldName]\"\r\n                :required=\"fieldConfig.required\"\r\n                :disabled=\"fieldConfig.readonly\"\r\n                class=\"form-control\"\r\n              >\r\n                <option value=\"\">Selecione...</option>\r\n                <option \r\n                  v-for=\"option in getForeignKeyOptions(fieldConfig.model)\" \r\n                  :key=\"option.value\"\r\n                  :value=\"option.value\"\r\n                >\r\n                  {{ option.label }}\r\n                </option>\r\n              </select>\r\n              \r\n              <!-- JSON -->\r\n              <textarea \r\n                v-else-if=\"fieldConfig.type === 'json'\"\r\n                :id=\"fieldName\"\r\n                v-model=\"jsonFields[fieldName]\"\r\n                :required=\"fieldConfig.required\"\r\n                :readonly=\"fieldConfig.readonly\"\r\n                class=\"form-control json-field\"\r\n                rows=\"4\"\r\n                placeholder=\"Formato JSON válido\"\r\n              ></textarea>\r\n              \r\n              <!-- Default fallback -->\r\n              <input \r\n                v-else\r\n                :id=\"fieldName\"\r\n                v-model=\"formData[fieldName]\"\r\n                type=\"text\"\r\n                :required=\"fieldConfig.required\"\r\n                :readonly=\"fieldConfig.readonly\"\r\n                class=\"form-control\"\r\n              />\r\n              \r\n              <!-- Field errors -->\r\n              <div v-if=\"fieldErrors[fieldName]\" class=\"field-error\">\r\n                {{ fieldErrors[fieldName] }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-actions\">\r\n            <button type=\"submit\" :disabled=\"isSaving\" class=\"btn btn-primary\">\r\n              {{ isSaving ? 'Salvando...' : 'Salvar' }}\r\n            </button>\r\n            <button type=\"button\" @click=\"closeForm\" class=\"btn btn-secondary\">\r\n              Cancelar\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>",
          "script": "import IconComponent from '../../components/IconComponent.vue'\r\n\r\nexport default {\r\n  name: 'AdminModelView',\r\n  components: {\r\n    IconComponent\r\n  },\r\n  props: {\r\n    modelName: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    model: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    dataService: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      // View settings\r\n      viewMode: 'table', // 'table' or 'cards'\r\n      searchQuery: '',\r\n      filters: {},\r\n      sortField: '',\r\n      sortDirection: 'desc',\r\n      \r\n      // Pagination\r\n      currentPage: 1,\r\n      itemsPerPage: 20,\r\n      \r\n      // Selection\r\n      selectedItems: [],\r\n      \r\n      // Form\r\n      showForm: false,\r\n      editingItem: null,\r\n      formData: {},\r\n      jsonFields: {},\r\n      fieldErrors: {},\r\n      isSaving: false\r\n    }\r\n  },\r\n  computed: {\r\n    allItems() {\r\n      return this.dataService.getAll(this.modelName)\r\n    },\r\n    \r\n    filteredItems() {\r\n      let items = [...this.allItems]\r\n      \r\n      // Apply search\r\n      if (this.searchQuery) {\r\n        const query = this.searchQuery.toLowerCase()\r\n        items = items.filter(item => {\r\n          return this.model.searchFields.some(field => {\r\n            const value = item[field]\r\n            return value && value.toString().toLowerCase().includes(query)\r\n          })\r\n        })\r\n      }\r\n      \r\n      // Apply filters\r\n      for (const [field, value] of Object.entries(this.filters)) {\r\n        if (value) {\r\n          items = items.filter(item => item[field] === value)\r\n        }\r\n      }\r\n      \r\n      return items\r\n    },\r\n    \r\n    sortedItems() {\r\n      if (!this.sortField) {\r\n        return this.filteredItems\r\n      }\r\n      \r\n      return [...this.filteredItems].sort((a, b) => {\r\n        const aVal = a[this.sortField]\r\n        const bVal = b[this.sortField]\r\n        \r\n        let comparison = 0\r\n        if (aVal < bVal) comparison = -1\r\n        else if (aVal > bVal) comparison = 1\r\n        \r\n        return this.sortDirection === 'asc' ? comparison : -comparison\r\n      })\r\n    },\r\n    \r\n    paginatedItems() {\r\n      const start = (this.currentPage - 1) * this.itemsPerPage\r\n      const end = start + this.itemsPerPage\r\n      return this.sortedItems.slice(start, end)\r\n    },\r\n    \r\n    totalPages() {\r\n      return Math.ceil(this.sortedItems.length / this.itemsPerPage)\r\n    },\r\n    \r\n    allSelected() {\r\n      return this.paginatedItems.length > 0 && \r\n             this.paginatedItems.every(item => this.selectedItems.includes(item.id))\r\n    },\r\n    \r\n    someSelected() {\r\n      return this.selectedItems.length > 0 && !this.allSelected\r\n    }\r\n  },\r\n  watch: {\r\n    searchQuery() {\r\n      this.currentPage = 1\r\n    },\r\n    filters: {\r\n      handler() {\r\n        this.currentPage = 1\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initializeFilters()\r\n    this.applySorting()\r\n  },\r\n  methods: {\r\n    initializeFilters() {\r\n      this.model.listFilter?.forEach(field => {\r\n        this.$set(this.filters, field, '')\r\n      })\r\n    },\r\n    \r\n    applySorting() {\r\n      if (this.model.ordering && this.model.ordering.length > 0) {\r\n        const firstOrder = this.model.ordering[0]\r\n        if (firstOrder.startsWith('-')) {\r\n          this.sortField = firstOrder.substring(1)\r\n          this.sortDirection = 'desc'\r\n        } else {\r\n          this.sortField = firstOrder\r\n          this.sortDirection = 'asc'\r\n        }\r\n      }\r\n    },\r\n    \r\n    getFieldLabel(fieldName) {\r\n      return this.model.fields[fieldName]?.label || fieldName\r\n    },\r\n    \r\n    getFilterOptions(fieldName) {\r\n      const field = this.model.fields[fieldName]\r\n      \r\n      if (field.type === 'select') {\r\n        return field.options.map(option => ({\r\n          value: option,\r\n          label: option\r\n        }))\r\n      }\r\n      \r\n      if (field.type === 'boolean') {\r\n        return [\r\n          { value: true, label: 'Sim' },\r\n          { value: false, label: 'Não' }\r\n        ]\r\n      }\r\n      \r\n      // Extract unique values from data\r\n      const values = [...new Set(this.allItems.map(item => item[fieldName]))]\r\n        .filter(val => val !== null && val !== undefined && val !== '')\r\n      \r\n      return values.map(value => ({\r\n        value,\r\n        label: this.formatFieldValue(value, fieldName)\r\n      }))\r\n    },\r\n    \r\n    getForeignKeyOptions(modelName) {\r\n      const relatedItems = this.dataService.getAll(modelName)\r\n      return relatedItems.map(item => ({\r\n        value: item.id,\r\n        label: item.name || item.title || item.email || item.id\r\n      }))\r\n    },\r\n    \r\n    formatFieldValue(value, fieldName) {\r\n      if (value === null || value === undefined) return ''\r\n      \r\n      const field = this.model.fields[fieldName]\r\n      \r\n      if (field?.type === 'boolean') {\r\n        return value ? 'Sim' : 'Não'\r\n      }\r\n      \r\n      if (field?.type === 'datetime' || field?.type === 'date') {\r\n        try {\r\n          const date = new Date(value)\r\n          return date.toLocaleDateString('pt-BR', {\r\n            day: '2-digit',\r\n            month: '2-digit',\r\n            year: 'numeric',\r\n            ...(field.type === 'datetime' && {\r\n              hour: '2-digit',\r\n              minute: '2-digit'\r\n            })\r\n          })\r\n        } catch {\r\n          return value\r\n        }\r\n      }\r\n      \r\n      if (field?.type === 'foreignkey') {\r\n        const relatedItem = this.dataService.getById(field.model, value)\r\n        return relatedItem ? (relatedItem.name || relatedItem.title || relatedItem.email || value) : value\r\n      }\r\n      \r\n      if (typeof value === 'string' && value.length > 50) {\r\n        return value.substring(0, 50) + '...'\r\n      }\r\n      \r\n      return value\r\n    },\r\n    \r\n    sortBy(field) {\r\n      if (this.sortField === field) {\r\n        this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc'\r\n      } else {\r\n        this.sortField = field\r\n        this.sortDirection = 'asc'\r\n      }\r\n    },\r\n    \r\n    toggleSelectAll() {\r\n      if (this.allSelected) {\r\n        this.selectedItems = this.selectedItems.filter(id => \r\n          !this.paginatedItems.some(item => item.id === id)\r\n        )\r\n      } else {\r\n        const newSelections = this.paginatedItems.map(item => item.id)\r\n        this.selectedItems = [...new Set([...this.selectedItems, ...newSelections])]\r\n      }\r\n    },\r\n    \r\n    editItem(item) {\r\n      this.editingItem = item\r\n      this.formData = { ...item }\r\n      \r\n      // Handle JSON fields\r\n      for (const [fieldName, fieldConfig] of Object.entries(this.model.fields)) {\r\n        if (fieldConfig.type === 'json') {\r\n          this.jsonFields[fieldName] = JSON.stringify(item[fieldName] || {}, null, 2)\r\n        }\r\n      }\r\n      \r\n      this.showForm = true\r\n    },\r\n    \r\n    deleteItem(item) {\r\n      if (confirm(`Tem certeza que deseja excluir este ${this.model.name.slice(0, -1).toLowerCase()}?`)) {\r\n        try {\r\n          this.dataService.delete(this.modelName, item.id)\r\n          this.$forceUpdate()\r\n        } catch (error) {\r\n          alert('Erro ao excluir: ' + error.message)\r\n        }\r\n      }\r\n    },\r\n    \r\n    bulkDelete() {\r\n      if (confirm(`Tem certeza que deseja excluir ${this.selectedItems.length} item(s)?`)) {\r\n        try {\r\n          this.selectedItems.forEach(id => {\r\n            this.dataService.delete(this.modelName, id)\r\n          })\r\n          this.selectedItems = []\r\n          this.$forceUpdate()\r\n        } catch (error) {\r\n          alert('Erro ao excluir itens: ' + error.message)\r\n        }\r\n      }\r\n    },\r\n    \r\n    closeForm() {\r\n      this.showForm = false\r\n      this.editingItem = null\r\n      this.formData = {}\r\n      this.jsonFields = {}\r\n      this.fieldErrors = {}\r\n      this.isSaving = false\r\n    },\r\n    \r\n    async saveItem() {\r\n      this.isSaving = true\r\n      this.fieldErrors = {}\r\n      \r\n      try {\r\n        // Validate and prepare data\r\n        const data = { ...this.formData }\r\n        \r\n        // Handle JSON fields\r\n        for (const [fieldName, value] of Object.entries(this.jsonFields)) {\r\n          try {\r\n            data[fieldName] = JSON.parse(value || '{}')\r\n          } catch (error) {\r\n            this.fieldErrors[fieldName] = 'JSON inválido'\r\n          }\r\n        }\r\n        \r\n        // Check for validation errors\r\n        if (Object.keys(this.fieldErrors).length > 0) {\r\n          this.isSaving = false\r\n          return\r\n        }\r\n        \r\n        // Hash password if provided\r\n        for (const [fieldName, fieldConfig] of Object.entries(this.model.fields)) {\r\n          if (fieldConfig.type === 'password' && data[fieldName]) {\r\n            data[fieldName] = this.hashPassword(data[fieldName])\r\n          }\r\n        }\r\n        \r\n        // Save data\r\n        if (this.editingItem) {\r\n          await this.dataService.update(this.modelName, this.editingItem.id, data)\r\n        } else {\r\n          await this.dataService.create(this.modelName, data)\r\n        }\r\n        \r\n        this.closeForm()\r\n        this.$forceUpdate()\r\n      } catch (error) {\r\n        alert('Erro ao salvar: ' + error.message)\r\n      } finally {\r\n        this.isSaving = false\r\n      }\r\n    },\r\n    \r\n    hashPassword(password) {\r\n      let hash = 0\r\n      for (let i = 0; i < password.length; i++) {\r\n        const char = password.charCodeAt(i)\r\n        hash = ((hash << 5) - hash) + char\r\n        hash = hash & hash\r\n      }\r\n      return Math.abs(hash).toString(16)\r\n    }\r\n  }\r\n}",
          "style": ".admin-model-view {\r\n  padding: 0;\r\n}\r\n\r\n/* Header */\r\n.model-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 24px;\r\n  padding-bottom: 16px;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.header-left {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n}\r\n\r\n.back-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 16px;\r\n  background: #f8f9fa;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 6px;\r\n  color: #495057;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.back-btn:hover {\r\n  background: #e9ecef;\r\n}\r\n\r\n.model-header h2 {\r\n  margin: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  color: #333;\r\n  font-size: 1.5em;\r\n}\r\n\r\n/* Filters */\r\n.model-filters {\r\n  display: flex;\r\n  gap: 16px;\r\n  align-items: center;\r\n  margin-bottom: 24px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.search-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  background: white;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 6px;\r\n  padding: 0 12px;\r\n  min-width: 300px;\r\n}\r\n\r\n.search-input {\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px 0;\r\n  flex: 1;\r\n  font-size: 14px;\r\n}\r\n\r\n.filters {\r\n  display: flex;\r\n  gap: 12px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.filter-select {\r\n  padding: 8px 12px;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 6px;\r\n  background: white;\r\n  font-size: 14px;\r\n  min-width: 150px;\r\n}\r\n\r\n.view-controls {\r\n  display: flex;\r\n  gap: 4px;\r\n  margin-left: auto;\r\n}\r\n\r\n.view-btn {\r\n  padding: 8px;\r\n  background: #f8f9fa;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  color: #6c757d;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.view-btn:hover,\r\n.view-btn.active {\r\n  background: #007bff;\r\n  color: white;\r\n  border-color: #007bff;\r\n}\r\n\r\n/* Table View */\r\n.table-wrapper {\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  padding: 12px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.data-table th {\r\n  background: #f8f9fa;\r\n  font-weight: 600;\r\n  color: #495057;\r\n  font-size: 14px;\r\n}\r\n\r\n.data-table th.sortable {\r\n  cursor: pointer;\r\n  user-select: none;\r\n  position: relative;\r\n}\r\n\r\n.data-table th.sortable:hover {\r\n  background: #e9ecef;\r\n}\r\n\r\n.data-table th.active {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\n.sort-indicator {\r\n  margin-left: 8px;\r\n  font-size: 12px;\r\n}\r\n\r\n.data-row:hover {\r\n  background: #f8f9fa;\r\n}\r\n\r\n.data-cell {\r\n  font-size: 14px;\r\n  color: #495057;\r\n  max-width: 200px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.actions-cell {\r\n  white-space: nowrap;\r\n}\r\n\r\n.action-btn {\r\n  padding: 6px;\r\n  margin: 0 2px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.action-btn.edit {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\n.action-btn.edit:hover {\r\n  background: #0056b3;\r\n}\r\n\r\n.action-btn.delete {\r\n  background: #dc3545;\r\n  color: white;\r\n}\r\n\r\n.action-btn.delete:hover {\r\n  background: #c82333;\r\n}\r\n\r\n/* Cards View */\r\n.cards-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.item-card {\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background: #f8f9fa;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.card-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.card-content {\r\n  padding: 16px;\r\n}\r\n\r\n.card-field {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 12px;\r\n  font-size: 14px;\r\n}\r\n\r\n.card-field:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.card-field strong {\r\n  color: #495057;\r\n  margin-right: 12px;\r\n}\r\n\r\n.card-field span {\r\n  color: #6c757d;\r\n  text-align: right;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n/* Pagination */\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.page-btn {\r\n  padding: 8px 12px;\r\n  background: white;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  color: #495057;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.page-btn:hover:not(:disabled) {\r\n  background: #e9ecef;\r\n}\r\n\r\n.page-btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.page-info {\r\n  margin: 0 16px;\r\n  font-size: 14px;\r\n  color: #6c757d;\r\n}\r\n\r\n/* Bulk Actions */\r\n.bulk-actions {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 16px rgba(0,0,0,0.15);\r\n  padding: 16px 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  z-index: 1000;\r\n}\r\n\r\n.bulk-info {\r\n  font-size: 14px;\r\n  color: #495057;\r\n  font-weight: 500;\r\n}\r\n\r\n.bulk-buttons {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n/* Modal */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0,0,0,0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1001;\r\n  padding: 20px;\r\n}\r\n\r\n.modal-content {\r\n  background: white;\r\n  border-radius: 12px;\r\n  max-width: 600px;\r\n  width: 100%;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n  box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.modal-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  padding: 8px;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #6c757d;\r\n  border-radius: 4px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.close-btn:hover {\r\n  background: #f8f9fa;\r\n  color: #495057;\r\n}\r\n\r\n/* Form */\r\n.item-form {\r\n  padding: 20px;\r\n}\r\n\r\n.form-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.form-group.full-width {\r\n  grid-column: 1 / -1;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 6px;\r\n  font-weight: 500;\r\n  color: #495057;\r\n  font-size: 14px;\r\n}\r\n\r\n.required {\r\n  color: #dc3545;\r\n}\r\n\r\n.form-control {\r\n  width: 100%;\r\n  padding: 10px 12px;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  transition: border-color 0.2s;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.form-control:focus {\r\n  outline: none;\r\n  border-color: #007bff;\r\n  box-shadow: 0 0 0 2px rgba(0,123,255,0.25);\r\n}\r\n\r\n.form-control:readonly {\r\n  background: #f8f9fa;\r\n  color: #6c757d;\r\n}\r\n\r\n.checkbox-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.form-checkbox {\r\n  width: auto;\r\n}\r\n\r\n.checkbox-label {\r\n  margin: 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.json-field {\r\n  font-family: 'Courier New', monospace;\r\n  font-size: 12px;\r\n}\r\n\r\n.field-error {\r\n  color: #dc3545;\r\n  font-size: 12px;\r\n  margin-top: 4px;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  gap: 12px;\r\n  justify-content: flex-end;\r\n  padding-top: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n}\r\n\r\n.btn {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.btn-primary {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\n.btn-primary:hover:not(:disabled) {\r\n  background: #0056b3;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-secondary {\r\n  background: #6c757d;\r\n  color: white;\r\n}\r\n\r\n.btn-secondary:hover {\r\n  background: #5a6268;\r\n}\r\n\r\n.btn-danger {\r\n  background: #dc3545;\r\n  color: white;\r\n}\r\n\r\n.btn-danger:hover {\r\n  background: #c82333;\r\n}\r\n\r\n/* Responsive */\r\n@media (max-width: 768px) {\r\n  .model-filters {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .search-bar {\r\n    min-width: auto;\r\n  }\r\n  \r\n  .view-controls {\r\n    margin-left: 0;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .cards-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .form-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .form-actions {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .bulk-actions {\r\n    left: 20px;\r\n    right: 20px;\r\n    transform: none;\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n  \r\n  .modal-content {\r\n    margin: 10px;\r\n    max-height: calc(100vh - 20px);\r\n  }\r\n  \r\n  .data-table {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .data-table th,\r\n  .data-table td {\r\n    padding: 8px;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 100
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 20
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 60
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 60
          },
          {
            "name": "admin_panel",
            "category": "core",
            "weight": 5,
            "confidence": 60
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 60
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "internationalization",
            "category": "technical",
            "weight": 3,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 1317,
          "functions": 15,
          "conditions": 78,
          "loops": 100,
          "score": 20.273348519362187
        },
        "imports": [
          "../../components/IconComponent.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [
          "back"
        ],
        "props": [
          "modelName",
          "required"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": true,
          "hasTypeChecking": true,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 100
        }
      },
      {
        "name": "AdminPanel",
        "path": "src\\admin\\components\\AdminPanel.vue",
        "size": 10780,
        "sections": {
          "template": "<div class=\"admin-container\">\r\n    <!-- Login Screen -->\r\n    <div v-if=\"!isAuthenticated\" class=\"admin-login\">\r\n      <div class=\"login-card\">\r\n        <div class=\"login-header\">\r\n          <h1>🛡️ IF Wave Admin</h1>\r\n          <p>Painel Administrativo</p>\r\n        </div>\r\n        \r\n        <form @submit.prevent=\"handleLogin\" class=\"login-form\">\r\n          <div class=\"form-group\">\r\n            <label>Usuário:</label>\r\n            <input \r\n              v-model=\"loginData.username\" \r\n              type=\"text\" \r\n              placeholder=\"admin\"\r\n              required\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label>Senha:</label>\r\n            <input \r\n              v-model=\"loginData.password\" \r\n              type=\"password\" \r\n              placeholder=\"admin123\"\r\n              required\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          \r\n          <button type=\"submit\" :disabled=\"isLoggingIn\" class=\"btn btn-primary\">\r\n            {{ isLoggingIn ? 'Entrando...' : 'Entrar' }}\r\n          </button>\r\n          \r\n          <div v-if=\"loginError\" class=\"alert alert-danger\">\r\n            {{ loginError }}\r\n          </div>\r\n        </form>\r\n        \r\n        <div class=\"login-help\">\r\n          <small>\r\n            <strong>Credenciais padrão:</strong><br>\r\n            Usuário: admin<br>\r\n            Senha: admin123\r\n          </small>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Admin Dashboard -->\r\n    <div v-else class=\"admin-dashboard\">\r\n      <!-- Header -->\r\n      <header class=\"admin-header\">\r\n        <div class=\"header-left\">\r\n          <h1>🛡️ IF Wave Admin</h1>\r\n          <span class=\"version\">v1.0.0</span>\r\n        </div>\r\n        \r\n        <div class=\"header-right\">\r\n          <span class=\"user-info\">\r\n            👤 {{ session.username }}\r\n          </span>\r\n          <button @click=\"handleLogout\" class=\"btn btn-outline\">\r\n            Sair\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      <!-- Navigation -->\r\n      <nav class=\"admin-nav\">\r\n        <div class=\"nav-section\">\r\n          <h3>📊 Dashboard</h3>\r\n          <button \r\n            @click=\"currentView = 'dashboard'\" \r\n            :class=\"{ active: currentView === 'dashboard' }\"\r\n            class=\"nav-item\"\r\n          >\r\n            📈 Visão Geral\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"nav-section\">\r\n          <h3>📋 Modelos</h3>\r\n          <button \r\n            v-for=\"(model, key) in models\" \r\n            :key=\"key\"\r\n            @click=\"selectModel(key)\" \r\n            :class=\"{ active: currentModel === key }\"\r\n            class=\"nav-item\"\r\n          >\r\n            <IconComponent :name=\"model.icon\" :size=\"16\" />\r\n            {{ model.name }}\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"nav-section\">\r\n          <h3>🔧 Ferramentas</h3>\r\n          <button \r\n            @click=\"currentView = 'tools'\" \r\n            :class=\"{ active: currentView === 'tools' }\"\r\n            class=\"nav-item\"\r\n          >\r\n            🛠️ Utilitários\r\n          </button>\r\n        </div>\r\n      </nav>\r\n\r\n      <!-- Main Content -->\r\n      <main class=\"admin-main\">\r\n        <!-- Dashboard -->\r\n        <AdminDashboard \r\n          v-if=\"currentView === 'dashboard'\"\r\n          :models=\"models\"\r\n          :dataService=\"dataService\"\r\n          @selectModel=\"selectModel\"\r\n        />\r\n\r\n        <!-- Model List/Edit -->\r\n        <AdminModelView \r\n          v-else-if=\"currentView === 'model' && currentModel\"\r\n          :modelName=\"currentModel\"\r\n          :model=\"models[currentModel]\"\r\n          :dataService=\"dataService\"\r\n          @back=\"currentView = 'dashboard'\"\r\n        />\r\n\r\n        <!-- Tools -->\r\n        <AdminTools \r\n          v-else-if=\"currentView === 'tools'\"\r\n          :models=\"models\"\r\n          :dataService=\"dataService\"\r\n        />\r\n      </main>\r\n    </div>\r\n  </div>",
          "script": "import { models, adminConfig } from '../models/index.js'\r\nimport { adminDataService } from '../services/dataService.js'\r\nimport { adminAuthService } from '../services/authService.js'\r\nimport { setupAdmin } from '../utils/setupAdmin.js'\r\nimport IconComponent from '../../components/IconComponent.vue'\r\nimport AdminDashboard from './AdminDashboard.vue'\r\nimport AdminModelView from './AdminModelView.vue'\r\nimport AdminTools from './AdminTools.vue'\r\n\r\nexport default {\r\n  name: 'AdminPanel',\r\n  components: {\r\n    IconComponent,\r\n    AdminDashboard,\r\n    AdminModelView,\r\n    AdminTools\r\n  },\r\n  data() {\r\n    return {\r\n      models,\r\n      config: adminConfig,\r\n      dataService: adminDataService,\r\n      authService: adminAuthService,\r\n      isAuthenticated: false,\r\n      session: null,\r\n      currentView: 'dashboard', // dashboard, model, tools\r\n      currentModel: null,\r\n      \r\n      // Login\r\n      loginData: {\r\n        username: '',\r\n        password: ''\r\n      },\r\n      isLoggingIn: false,\r\n      loginError: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initializeAdmin()\r\n    this.checkAuth()\r\n  },\r\n  methods: {\r\n    initializeAdmin() {\r\n      // Verificar se é a primeira execução e configurar dados\r\n      const users = this.dataService.getAll('users')\r\n      if (users.length === 0) {\r\n        console.log('Primeira execução detectada. Configurando dados iniciais...')\r\n        setupAdmin()\r\n      }\r\n    },\r\n\r\n    checkAuth() {\r\n      this.isAuthenticated = this.authService.isAuthenticated()\r\n      if (this.isAuthenticated) {\r\n        this.session = this.authService.getSession()\r\n      }\r\n    },\r\n\r\n    async handleLogin() {\r\n      this.isLoggingIn = true\r\n      this.loginError = ''\r\n      \r\n      try {\r\n        await new Promise(resolve => setTimeout(resolve, 1000)) // Simular delay\r\n        \r\n        const result = this.authService.login(this.loginData.username, this.loginData.password)\r\n        \r\n        if (result.success) {\r\n          this.isAuthenticated = true\r\n          this.session = result.session\r\n          this.loginData = { username: '', password: '' }\r\n        } else {\r\n          this.loginError = result.error\r\n        }\r\n      } catch (error) {\r\n        this.loginError = 'Erro interno. Tente novamente.'\r\n      } finally {\r\n        this.isLoggingIn = false\r\n      }\r\n    },\r\n\r\n    handleLogout() {\r\n      if (confirm('Tem certeza que deseja sair?')) {\r\n        this.authService.logout()\r\n        this.isAuthenticated = false\r\n        this.session = null\r\n        this.currentView = 'dashboard'\r\n        this.currentModel = null\r\n      }\r\n    },\r\n\r\n    selectModel(modelKey) {\r\n      this.currentModel = modelKey\r\n      this.currentView = 'model'\r\n    }\r\n  }\r\n}",
          "style": ".admin-container {\r\n  min-height: 100vh;\r\n  background: #f8f9fa;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n}\r\n\r\n/* Login Styles */\r\n.admin-login {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n}\r\n\r\n.login-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 40px;\r\n  box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\n.login-header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.login-header h1 {\r\n  margin: 0 0 10px 0;\r\n  color: #333;\r\n  font-size: 2em;\r\n}\r\n\r\n.login-header p {\r\n  margin: 0;\r\n  color: #666;\r\n}\r\n\r\n.login-form .form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.login-form label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.form-control {\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: 2px solid #e1e5e9;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.form-control:focus {\r\n  outline: none;\r\n  border-color: #007bff;\r\n}\r\n\r\n.btn {\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  text-align: center;\r\n}\r\n\r\n.btn-primary {\r\n  background: #007bff;\r\n  color: white;\r\n  width: 100%;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background: #0056b3;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  background: #6c757d;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.alert {\r\n  padding: 12px;\r\n  border-radius: 6px;\r\n  margin-top: 15px;\r\n}\r\n\r\n.alert-danger {\r\n  background: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n}\r\n\r\n.login-help {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  color: #666;\r\n}\r\n\r\n/* Dashboard Styles */\r\n.admin-dashboard {\r\n  display: grid;\r\n  grid-template-areas: \r\n    \"header header\"\r\n    \"nav main\";\r\n  grid-template-columns: 250px 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  min-height: 100vh;\r\n}\r\n\r\n.admin-header {\r\n  grid-area: header;\r\n  background: white;\r\n  border-bottom: 1px solid #e1e5e9;\r\n  padding: 0 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 70px;\r\n}\r\n\r\n.header-left {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.header-left h1 {\r\n  margin: 0;\r\n  font-size: 1.5em;\r\n  color: #333;\r\n}\r\n\r\n.version {\r\n  background: #e9ecef;\r\n  color: #6c757d;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.header-right {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.user-info {\r\n  color: #666;\r\n  font-weight: 500;\r\n}\r\n\r\n.btn-outline {\r\n  background: transparent;\r\n  color: #007bff;\r\n  border: 2px solid #007bff;\r\n}\r\n\r\n.btn-outline:hover {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\n.admin-nav {\r\n  grid-area: nav;\r\n  background: #343a40;\r\n  color: white;\r\n  padding: 20px 0;\r\n  overflow-y: auto;\r\n}\r\n\r\n.nav-section {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.nav-section h3 {\r\n  padding: 0 20px;\r\n  margin: 0 0 10px 0;\r\n  font-size: 0.9em;\r\n  color: #adb5bd;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n.nav-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  width: 100%;\r\n  padding: 12px 20px;\r\n  background: none;\r\n  border: none;\r\n  color: #adb5bd;\r\n  text-align: left;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-size: 14px;\r\n}\r\n\r\n.nav-item:hover {\r\n  background: #495057;\r\n  color: white;\r\n}\r\n\r\n.nav-item.active {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\n.admin-main {\r\n  grid-area: main;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n}\r\n\r\n/* Responsive */\r\n@media (max-width: 768px) {\r\n  .admin-dashboard {\r\n    grid-template-areas: \r\n      \"header\"\r\n      \"nav\"\r\n      \"main\";\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto auto 1fr;\r\n  }\r\n  \r\n  .admin-nav {\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .nav-section {\r\n    margin-bottom: 15px;\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 100
          },
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 80
          },
          {
            "name": "admin_panel",
            "category": "core",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 60
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 40
          }
        ],
        "complexity": {
          "lines": 494,
          "functions": 1,
          "conditions": 20,
          "loops": 14,
          "score": 9.878542510121457
        },
        "imports": [
          "../models/index.js",
          "../services/dataService.js",
          "../services/authService.js",
          "../utils/setupAdmin.js",
          "../../components/IconComponent.vue",
          "./AdminDashboard.vue",
          "./AdminModelView.vue",
          "./AdminTools.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": true,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": false,
          "score": 67
        }
      },
      {
        "name": "AdminTools",
        "path": "src\\admin\\components\\AdminTools.vue",
        "size": 36962,
        "sections": {
          "template": "<div class=\"admin-tools\">\r\n    <div class=\"tools-header\">\r\n      <h2>🛠️ Ferramentas Administrativas</h2>\r\n      <p>Utilitários para gerenciamento do sistema</p>\r\n    </div>\r\n\r\n    <div class=\"tools-grid\">\r\n      <!-- Backup e Restauração -->\r\n      <div class=\"tool-card\">\r\n        <div class=\"tool-header\">\r\n          <h3>\r\n            <IconComponent name=\"document\" :size=\"20\" />\r\n            Backup e Restauração\r\n          </h3>\r\n        </div>\r\n        <div class=\"tool-content\">\r\n          <p>Faça backup dos dados do sistema ou restaure de um arquivo anterior.</p>\r\n          \r\n          <div class=\"tool-actions\">\r\n            <button @click=\"createBackup\" class=\"btn btn-primary\">\r\n              <IconComponent name=\"document\" :size=\"16\" />\r\n              Criar Backup\r\n            </button>\r\n            \r\n            <div class=\"file-input-wrapper\">\r\n              <input \r\n                ref=\"restoreInput\"\r\n                type=\"file\" \r\n                accept=\".json\"\r\n                @change=\"handleRestoreFile\"\r\n                style=\"display: none\"\r\n              />\r\n              <button @click=\"$refs.restoreInput.click()\" class=\"btn btn-secondary\">\r\n                <IconComponent name=\"publish\" :size=\"16\" />\r\n                Restaurar Backup\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Importação e Exportação -->\r\n      <div class=\"tool-card\">\r\n        <div class=\"tool-header\">\r\n          <h3>\r\n            <IconComponent name=\"share\" :size=\"20\" />\r\n            Importação e Exportação\r\n          </h3>\r\n        </div>\r\n        <div class=\"tool-content\">\r\n          <p>Importe ou exporte dados em diferentes formatos.</p>\r\n          \r\n          <div class=\"export-options\">\r\n            <label>Formato de exportação:</label>\r\n            <select v-model=\"exportFormat\" class=\"format-select\">\r\n              <option value=\"json\">JSON</option>\r\n              <option value=\"csv\">CSV</option>\r\n              <option value=\"xlsx\">Excel</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div class=\"model-selection\">\r\n            <label>Modelos para exportar:</label>\r\n            <div class=\"checkbox-group\">\r\n              <label \r\n                v-for=\"(model, key) in models\" \r\n                :key=\"key\"\r\n                class=\"checkbox-label\"\r\n              >\r\n                <input \r\n                  type=\"checkbox\" \r\n                  :value=\"key\"\r\n                  v-model=\"selectedModels\"\r\n                />\r\n                {{ model.name }}\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"tool-actions\">\r\n            <button @click=\"exportData\" :disabled=\"selectedModels.length === 0\" class=\"btn btn-primary\">\r\n              <IconComponent name=\"share\" :size=\"16\" />\r\n              Exportar Dados\r\n            </button>\r\n            \r\n            <div class=\"file-input-wrapper\">\r\n              <input \r\n                ref=\"importInput\"\r\n                type=\"file\" \r\n                accept=\".json,.csv\"\r\n                @change=\"handleImportFile\"\r\n                style=\"display: none\"\r\n              />\r\n              <button @click=\"$refs.importInput.click()\" class=\"btn btn-secondary\">\r\n                <IconComponent name=\"publish\" :size=\"16\" />\r\n                Importar Dados\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Limpeza de Dados -->\r\n      <div class=\"tool-card\">\r\n        <div class=\"tool-header\">\r\n          <h3>\r\n            <IconComponent name=\"settings\" :size=\"20\" />\r\n            Limpeza de Dados\r\n          </h3>\r\n        </div>\r\n        <div class=\"tool-content\">\r\n          <p>Limpe dados desnecessários ou corrompidos do sistema.</p>\r\n          \r\n          <div class=\"cleanup-options\">\r\n            <div class=\"cleanup-item\">\r\n              <label class=\"checkbox-label\">\r\n                <input type=\"checkbox\" v-model=\"cleanupOptions.orphanedData\" />\r\n                Dados órfãos (sem referências)\r\n              </label>\r\n            </div>\r\n            <div class=\"cleanup-item\">\r\n              <label class=\"checkbox-label\">\r\n                <input type=\"checkbox\" v-model=\"cleanupOptions.oldNotifications\" />\r\n                Notificações antigas (>30 dias)\r\n              </label>\r\n            </div>\r\n            <div class=\"cleanup-item\">\r\n              <label class=\"checkbox-label\">\r\n                <input type=\"checkbox\" v-model=\"cleanupOptions.deletedUsers\" />\r\n                Dados de usuários inativos\r\n              </label>\r\n            </div>\r\n            <div class=\"cleanup-item\">\r\n              <label class=\"checkbox-label\">\r\n                <input type=\"checkbox\" v-model=\"cleanupOptions.emptyPosts\" />\r\n                Posts vazios ou corrompidos\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"tool-actions\">\r\n            <button @click=\"previewCleanup\" class=\"btn btn-secondary\">\r\n              <IconComponent name=\"search\" :size=\"16\" />\r\n              Visualizar Limpeza\r\n            </button>\r\n            <button @click=\"performCleanup\" class=\"btn btn-danger\">\r\n              <IconComponent name=\"close\" :size=\"16\" />\r\n              Executar Limpeza\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Estatísticas do Sistema -->\r\n      <div class=\"tool-card\">\r\n        <div class=\"tool-header\">\r\n          <h3>\r\n            <IconComponent name=\"chart\" :size=\"20\" />\r\n            Estatísticas do Sistema\r\n          </h3>\r\n        </div>\r\n        <div class=\"tool-content\">\r\n          <div class=\"stats-list\">\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">Espaço usado no localStorage:</span>\r\n              <span class=\"stat-value\">{{ storageInfo.used }} KB</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">Espaço disponível estimado:</span>\r\n              <span class=\"stat-value\">{{ storageInfo.available }} KB</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">Total de registros:</span>\r\n              <span class=\"stat-value\">{{ totalRecords }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">Maior tabela:</span>\r\n              <span class=\"stat-value\">{{ largestTable.name }} ({{ largestTable.count }} registros)</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"tool-actions\">\r\n            <button @click=\"refreshStats\" class=\"btn btn-primary\">\r\n              <IconComponent name=\"settings\" :size=\"16\" />\r\n              Atualizar Estatísticas\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Gerador de Dados de Teste -->\r\n      <div class=\"tool-card\">\r\n        <div class=\"tool-header\">\r\n          <h3>\r\n            <IconComponent name=\"code\" :size=\"20\" />\r\n            Gerador de Dados de Teste\r\n          </h3>\r\n        </div>\r\n        <div class=\"tool-content\">\r\n          <p>Gere dados de teste para desenvolvimento e demonstração.</p>\r\n          \r\n          <div class=\"generator-options\">\r\n            <div class=\"form-group\">\r\n              <label>Quantidade de usuários:</label>\r\n              <input \r\n                type=\"number\" \r\n                v-model.number=\"generateOptions.users\" \r\n                min=\"0\" \r\n                max=\"100\"\r\n                class=\"form-control\"\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Quantidade de posts:</label>\r\n              <input \r\n                type=\"number\" \r\n                v-model.number=\"generateOptions.posts\" \r\n                min=\"0\" \r\n                max=\"500\"\r\n                class=\"form-control\"\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Quantidade de comentários:</label>\r\n              <input \r\n                type=\"number\" \r\n                v-model.number=\"generateOptions.comments\" \r\n                min=\"0\" \r\n                max=\"1000\"\r\n                class=\"form-control\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"tool-actions\">\r\n            <button @click=\"generateTestData\" class=\"btn btn-primary\">\r\n              <IconComponent name=\"publish\" :size=\"16\" />\r\n              Gerar Dados de Teste\r\n            </button>\r\n            <button @click=\"clearAllData\" class=\"btn btn-danger\">\r\n              <IconComponent name=\"close\" :size=\"16\" />\r\n              Limpar Todos os Dados\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Ferramentas de Debug -->\r\n      <div class=\"tool-card\">\r\n        <div class=\"tool-header\">\r\n          <h3>\r\n            <IconComponent name=\"settings\" :size=\"20\" />\r\n            Ferramentas de Debug\r\n          </h3>\r\n        </div>\r\n        <div class=\"tool-content\">\r\n          <p>Ferramentas para depuração e análise do sistema.</p>\r\n          \r\n          <div class=\"tool-actions\">\r\n            <button @click=\"validateData\" class=\"btn btn-primary\">\r\n              <IconComponent name=\"check\" :size=\"16\" />\r\n              Validar Integridade dos Dados\r\n            </button>\r\n            <button @click=\"showLocalStorageData\" class=\"btn btn-secondary\">\r\n              <IconComponent name=\"code\" :size=\"16\" />\r\n              Ver localStorage\r\n            </button>\r\n            <button @click=\"downloadLogs\" class=\"btn btn-secondary\">\r\n              <IconComponent name=\"document\" :size=\"16\" />\r\n              Baixar Logs\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de Resultados -->\r\n    <div v-if=\"showResultModal\" class=\"modal-overlay\" @click=\"closeResultModal\">\r\n      <div class=\"modal-content\" @click.stop>\r\n        <div class=\"modal-header\">\r\n          <h3>{{ resultModal.title }}</h3>\r\n          <button @click=\"closeResultModal\" class=\"close-btn\">\r\n            <IconComponent name=\"close\" :size=\"18\" />\r\n          </button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div v-if=\"resultModal.type === 'cleanup-preview'\" class=\"cleanup-preview\">\r\n            <h4>Itens que serão removidos:</h4>\r\n            <div \r\n              v-for=\"(items, category) in resultModal.data\" \r\n              :key=\"category\"\r\n              class=\"preview-category\"\r\n            >\r\n              <strong>{{ category }}:</strong> {{ items.length }} item(s)\r\n              <ul v-if=\"items.length > 0\" class=\"preview-list\">\r\n                <li v-for=\"item in items.slice(0, 5)\" :key=\"item.id\">\r\n                  {{ item.name || item.title || item.content || item.id }}\r\n                </li>\r\n                <li v-if=\"items.length > 5\">... e mais {{ items.length - 5 }} item(s)</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div v-else-if=\"resultModal.type === 'validation'\" class=\"validation-results\">\r\n            <div \r\n              v-for=\"(result, model) in resultModal.data\" \r\n              :key=\"model\"\r\n              class=\"validation-model\"\r\n            >\r\n              <h4>{{ models[model]?.name || model }}</h4>\r\n              <div v-if=\"result.errors.length === 0\" class=\"validation-success\">\r\n                ✅ Todos os {{ result.total }} registros estão válidos\r\n              </div>\r\n              <div v-else class=\"validation-errors\">\r\n                ❌ {{ result.errors.length }} erro(s) encontrado(s):\r\n                <ul>\r\n                  <li v-for=\"error in result.errors\" :key=\"error.id\">\r\n                    <strong>{{ error.id }}:</strong> {{ error.message }}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div v-else-if=\"resultModal.type === 'storage'\" class=\"storage-data\">\r\n            <pre>{{ resultModal.data }}</pre>\r\n          </div>\r\n          <div v-else class=\"result-message\">\r\n            {{ resultModal.data }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>",
          "script": "import IconComponent from '../../components/IconComponent.vue'\r\n\r\nexport default {\r\n  name: 'AdminTools',\r\n  components: {\r\n    IconComponent\r\n  },\r\n  props: {\r\n    models: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    dataService: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      exportFormat: 'json',\r\n      selectedModels: [],\r\n      cleanupOptions: {\r\n        orphanedData: false,\r\n        oldNotifications: false,\r\n        deletedUsers: false,\r\n        emptyPosts: false\r\n      },\r\n      generateOptions: {\r\n        users: 10,\r\n        posts: 50,\r\n        comments: 100\r\n      },\r\n      showResultModal: false,\r\n      resultModal: {\r\n        title: '',\r\n        type: '',\r\n        data: null\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    storageInfo() {\r\n      let totalUsed = 0\r\n      for (const key in localStorage) {\r\n        if (key.startsWith('ifwave_')) {\r\n          totalUsed += localStorage[key].length\r\n        }\r\n      }\r\n      \r\n      // Estimativa baseada no limite típico de 5-10MB\r\n      const estimatedLimit = 5 * 1024 * 1024 // 5MB\r\n      const used = Math.round(totalUsed / 1024) // KB\r\n      const available = Math.round((estimatedLimit - totalUsed) / 1024) // KB\r\n      \r\n      return { used, available }\r\n    },\r\n    \r\n    totalRecords() {\r\n      let total = 0\r\n      for (const modelKey in this.models) {\r\n        total += this.dataService.getAll(modelKey).length\r\n      }\r\n      return total\r\n    },\r\n    \r\n    largestTable() {\r\n      let largest = { name: 'Nenhuma', count: 0 }\r\n      for (const [modelKey, model] of Object.entries(this.models)) {\r\n        const count = this.dataService.getAll(modelKey).length\r\n        if (count > largest.count) {\r\n          largest = { name: model.name, count }\r\n        }\r\n      }\r\n      return largest\r\n    }\r\n  },\r\n  mounted() {\r\n    this.selectedModels = Object.keys(this.models)\r\n  },\r\n  methods: {\r\n    createBackup() {\r\n      try {\r\n        const backup = {\r\n          version: '1.0.0',\r\n          timestamp: new Date().toISOString(),\r\n          data: {}\r\n        }\r\n        \r\n        for (const modelKey in this.models) {\r\n          backup.data[modelKey] = this.dataService.getAll(modelKey)\r\n        }\r\n        \r\n        this.downloadFile(\r\n          JSON.stringify(backup, null, 2),\r\n          `ifwave-backup-${new Date().toISOString().split('T')[0]}.json`,\r\n          'application/json'\r\n        )\r\n        \r\n        this.showResult('Backup Criado', 'success', 'Backup realizado com sucesso!')\r\n      } catch (error) {\r\n        this.showResult('Erro', 'error', 'Erro ao criar backup: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    handleRestoreFile(event) {\r\n      const file = event.target.files[0]\r\n      if (!file) return\r\n      \r\n      const reader = new FileReader()\r\n      reader.onload = (e) => {\r\n        try {\r\n          const backup = JSON.parse(e.target.result)\r\n          this.restoreFromBackup(backup)\r\n        } catch (error) {\r\n          this.showResult('Erro', 'error', 'Arquivo de backup inválido: ' + error.message)\r\n        }\r\n      }\r\n      reader.readAsText(file)\r\n    },\r\n    \r\n    restoreFromBackup(backup) {\r\n      if (!backup.data) {\r\n        this.showResult('Erro', 'error', 'Formato de backup inválido')\r\n        return\r\n      }\r\n      \r\n      if (!confirm('Tem certeza que deseja restaurar o backup? Todos os dados atuais serão substituídos.')) {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        for (const [modelKey, data] of Object.entries(backup.data)) {\r\n          if (this.models[modelKey]) {\r\n            localStorage.setItem(`ifwave_${modelKey}`, JSON.stringify(data))\r\n          }\r\n        }\r\n        \r\n        this.showResult('Restauração Concluída', 'success', 'Backup restaurado com sucesso!')\r\n        this.refreshStats()\r\n      } catch (error) {\r\n        this.showResult('Erro', 'error', 'Erro ao restaurar backup: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    exportData() {\r\n      try {\r\n        const exportData = {}\r\n        \r\n        for (const modelKey of this.selectedModels) {\r\n          exportData[modelKey] = this.dataService.getAll(modelKey)\r\n        }\r\n        \r\n        let filename, content, mimeType\r\n        \r\n        switch (this.exportFormat) {\r\n          case 'json':\r\n            content = JSON.stringify(exportData, null, 2)\r\n            filename = `ifwave-export-${new Date().toISOString().split('T')[0]}.json`\r\n            mimeType = 'application/json'\r\n            break\r\n            \r\n          case 'csv':\r\n            content = this.convertToCSV(exportData)\r\n            filename = `ifwave-export-${new Date().toISOString().split('T')[0]}.csv`\r\n            mimeType = 'text/csv'\r\n            break\r\n            \r\n          default:\r\n            throw new Error('Formato de exportação não suportado')\r\n        }\r\n        \r\n        this.downloadFile(content, filename, mimeType)\r\n        this.showResult('Exportação Concluída', 'success', 'Dados exportados com sucesso!')\r\n      } catch (error) {\r\n        this.showResult('Erro', 'error', 'Erro ao exportar dados: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    convertToCSV(data) {\r\n      let csv = ''\r\n      \r\n      for (const [modelName, records] of Object.entries(data)) {\r\n        if (records.length === 0) continue\r\n        \r\n        csv += `\\n\\n=== ${modelName.toUpperCase()} ===\\n`\r\n        \r\n        const headers = Object.keys(records[0])\r\n        csv += headers.join(',') + '\\n'\r\n        \r\n        for (const record of records) {\r\n          const values = headers.map(header => {\r\n            const value = record[header]\r\n            if (value === null || value === undefined) return ''\r\n            if (typeof value === 'string') {\r\n              return `\"${value.replace(/\"/g, '\"\"')}\"`\r\n            }\r\n            return value\r\n          })\r\n          csv += values.join(',') + '\\n'\r\n        }\r\n      }\r\n      \r\n      return csv\r\n    },\r\n    \r\n    handleImportFile(event) {\r\n      const file = event.target.files[0]\r\n      if (!file) return\r\n      \r\n      const reader = new FileReader()\r\n      reader.onload = (e) => {\r\n        try {\r\n          let importData\r\n          \r\n          if (file.name.endsWith('.json')) {\r\n            importData = JSON.parse(e.target.result)\r\n          } else if (file.name.endsWith('.csv')) {\r\n            // Implementação básica de CSV - pode ser expandida\r\n            this.showResult('Erro', 'error', 'Importação de CSV não implementada ainda')\r\n            return\r\n          }\r\n          \r\n          this.importData(importData)\r\n        } catch (error) {\r\n          this.showResult('Erro', 'error', 'Erro ao importar arquivo: ' + error.message)\r\n        }\r\n      }\r\n      reader.readAsText(file)\r\n    },\r\n    \r\n    importData(data) {\r\n      if (!confirm('Tem certeza que deseja importar estes dados? Registros existentes podem ser substituídos.')) {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        let imported = 0\r\n        \r\n        for (const [modelKey, records] of Object.entries(data)) {\r\n          if (this.models[modelKey] && Array.isArray(records)) {\r\n            for (const record of records) {\r\n              this.dataService.create(modelKey, record)\r\n              imported++\r\n            }\r\n          }\r\n        }\r\n        \r\n        this.showResult('Importação Concluída', 'success', `${imported} registros importados com sucesso!`)\r\n        this.refreshStats()\r\n      } catch (error) {\r\n        this.showResult('Erro', 'error', 'Erro ao importar dados: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    previewCleanup() {\r\n      const preview = {}\r\n      \r\n      if (this.cleanupOptions.orphanedData) {\r\n        preview['Dados Órfãos'] = this.findOrphanedData()\r\n      }\r\n      \r\n      if (this.cleanupOptions.oldNotifications) {\r\n        preview['Notificações Antigas'] = this.findOldNotifications()\r\n      }\r\n      \r\n      if (this.cleanupOptions.deletedUsers) {\r\n        preview['Usuários Inativos'] = this.findInactiveUsers()\r\n      }\r\n      \r\n      if (this.cleanupOptions.emptyPosts) {\r\n        preview['Posts Vazios'] = this.findEmptyPosts()\r\n      }\r\n      \r\n      this.showResult('Prévia da Limpeza', 'cleanup-preview', preview)\r\n    },\r\n    \r\n    performCleanup() {\r\n      if (!confirm('Tem certeza que deseja executar a limpeza? Esta ação não pode ser desfeita.')) {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        let removed = 0\r\n        \r\n        if (this.cleanupOptions.orphanedData) {\r\n          removed += this.removeOrphanedData()\r\n        }\r\n        \r\n        if (this.cleanupOptions.oldNotifications) {\r\n          removed += this.removeOldNotifications()\r\n        }\r\n        \r\n        if (this.cleanupOptions.deletedUsers) {\r\n          removed += this.removeInactiveUsers()\r\n        }\r\n        \r\n        if (this.cleanupOptions.emptyPosts) {\r\n          removed += this.removeEmptyPosts()\r\n        }\r\n        \r\n        this.showResult('Limpeza Concluída', 'success', `${removed} itens removidos com sucesso!`)\r\n        this.refreshStats()\r\n      } catch (error) {\r\n        this.showResult('Erro', 'error', 'Erro durante a limpeza: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    findOrphanedData() {\r\n      // Encontrar dados sem referências válidas\r\n      const orphaned = []\r\n      // Implementação simplificada\r\n      return orphaned\r\n    },\r\n    \r\n    findOldNotifications() {\r\n      const notifications = this.dataService.getAll('notifications')\r\n      const thirtyDaysAgo = new Date()\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\r\n      \r\n      return notifications.filter(notification => {\r\n        const createdAt = new Date(notification.createdAt)\r\n        return createdAt < thirtyDaysAgo\r\n      })\r\n    },\r\n    \r\n    findInactiveUsers() {\r\n      const users = this.dataService.getAll('users')\r\n      return users.filter(user => !user.isActive)\r\n    },\r\n    \r\n    findEmptyPosts() {\r\n      const posts = this.dataService.getAll('posts')\r\n      return posts.filter(post => !post.content || post.content.trim() === '')\r\n    },\r\n    \r\n    removeOrphanedData() {\r\n      // Implementar remoção de dados órfãos\r\n      return 0\r\n    },\r\n    \r\n    removeOldNotifications() {\r\n      const oldNotifications = this.findOldNotifications()\r\n      oldNotifications.forEach(notification => {\r\n        this.dataService.delete('notifications', notification.id)\r\n      })\r\n      return oldNotifications.length\r\n    },\r\n    \r\n    removeInactiveUsers() {\r\n      const inactiveUsers = this.findInactiveUsers()\r\n      inactiveUsers.forEach(user => {\r\n        this.dataService.delete('users', user.id)\r\n      })\r\n      return inactiveUsers.length\r\n    },\r\n    \r\n    removeEmptyPosts() {\r\n      const emptyPosts = this.findEmptyPosts()\r\n      emptyPosts.forEach(post => {\r\n        this.dataService.delete('posts', post.id)\r\n      })\r\n      return emptyPosts.length\r\n    },\r\n    \r\n    generateTestData() {\r\n      if (!confirm('Tem certeza que deseja gerar dados de teste? Isso pode criar muitos registros.')) {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        let generated = 0\r\n        \r\n        // Gerar usuários\r\n        for (let i = 0; i < this.generateOptions.users; i++) {\r\n          const user = this.generateRandomUser(i)\r\n          this.dataService.create('users', user)\r\n          generated++\r\n        }\r\n        \r\n        // Gerar posts\r\n        const users = this.dataService.getAll('users')\r\n        for (let i = 0; i < this.generateOptions.posts; i++) {\r\n          const post = this.generateRandomPost(users)\r\n          this.dataService.create('posts', post)\r\n          generated++\r\n        }\r\n        \r\n        // Gerar comentários\r\n        const posts = this.dataService.getAll('posts')\r\n        for (let i = 0; i < this.generateOptions.comments; i++) {\r\n          const comment = this.generateRandomComment(users, posts)\r\n          this.dataService.create('comments', comment)\r\n          generated++\r\n        }\r\n        \r\n        this.showResult('Dados Gerados', 'success', `${generated} registros de teste criados com sucesso!`)\r\n        this.refreshStats()\r\n      } catch (error) {\r\n        this.showResult('Erro', 'error', 'Erro ao gerar dados de teste: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    generateRandomUser(index) {\r\n      const names = ['João', 'Maria', 'Pedro', 'Ana', 'Carlos', 'Luiza', 'Roberto', 'Fernanda', 'Ricardo', 'Camila']\r\n      const surnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Rodrigues', 'Ferreira', 'Alves', 'Pereira', 'Lima', 'Gomes']\r\n      const courses = ['Análise e Desenvolvimento de Sistemas', 'Redes de Computadores', 'Informática', 'Administração', 'Contabilidade']\r\n      const campuses = ['IFMT Campus Cuiabá', 'IFMT Campus Várzea Grande', 'IFMT Campus Rondonópolis']\r\n      \r\n      const firstName = names[Math.floor(Math.random() * names.length)]\r\n      const lastName = surnames[Math.floor(Math.random() * surnames.length)]\r\n      const name = `${firstName} ${lastName}`\r\n      \r\n      return {\r\n        name,\r\n        email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}${index}@estudante.ifmt.edu.br`,\r\n        course: courses[Math.floor(Math.random() * courses.length)],\r\n        campus: campuses[Math.floor(Math.random() * campuses.length)],\r\n        passwordHash: this.hashPassword('123456'),\r\n        isActive: Math.random() > 0.1, // 90% ativos\r\n        isVerified: Math.random() > 0.3, // 70% verificados\r\n        role: Math.random() > 0.9 ? 'teacher' : 'student', // 10% professores\r\n        bio: `Estudante de ${courses[Math.floor(Math.random() * courses.length)]} no IFMT.`,\r\n        createdAt: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString(), // Últimos 90 dias\r\n        lastLogin: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString() // Última semana\r\n      }\r\n    },\r\n    \r\n    generateRandomPost(users) {\r\n      const contents = [\r\n        'Acabei de terminar meu projeto de programação! 🎉',\r\n        'Alguém pode me ajudar com esta questão de matemática?',\r\n        'Que evento incrível tivemos hoje no campus!',\r\n        'Dicas para a prova de algoritmos?',\r\n        'Novo laboratório de informática ficou show! 💻',\r\n        'Quem vai no evento de tecnologia na próxima semana?',\r\n        'Compartilhando um artigo interessante sobre IA',\r\n        'Grupo de estudos de banco de dados, quem tem interesse?',\r\n        'Feedback sobre o projeto integrador',\r\n        'Dúvidas sobre estágio obrigatório'\r\n      ]\r\n      \r\n      const user = users[Math.floor(Math.random() * users.length)]\r\n      \r\n      return {\r\n        userId: user.id,\r\n        content: contents[Math.floor(Math.random() * contents.length)],\r\n        type: Math.random() > 0.8 ? 'image' : 'text',\r\n        isPublic: Math.random() > 0.05, // 95% públicos\r\n        likesCount: Math.floor(Math.random() * 50),\r\n        commentsCount: Math.floor(Math.random() * 20),\r\n        sharesCount: Math.floor(Math.random() * 10),\r\n        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(), // Últimos 30 dias\r\n        updatedAt: new Date().toISOString()\r\n      }\r\n    },\r\n    \r\n    generateRandomComment(users, posts) {\r\n      const comments = [\r\n        'Muito bom! 👏',\r\n        'Concordo totalmente!',\r\n        'Tenho a mesma dúvida...',\r\n        'Obrigado por compartilhar!',\r\n        'Interessante ponto de vista',\r\n        'Pode me explicar melhor?',\r\n        'Excelente trabalho!',\r\n        'Vou participar sim!',\r\n        'Achei muito útil esta informação',\r\n        'Parabéns pelo projeto!'\r\n      ]\r\n      \r\n      const user = users[Math.floor(Math.random() * users.length)]\r\n      const post = posts[Math.floor(Math.random() * posts.length)]\r\n      \r\n      return {\r\n        postId: post.id,\r\n        userId: user.id,\r\n        content: comments[Math.floor(Math.random() * comments.length)],\r\n        likesCount: Math.floor(Math.random() * 10),\r\n        isHidden: Math.random() > 0.95, // 5% ocultos\r\n        createdAt: new Date(Date.now() - Math.random() * 15 * 24 * 60 * 60 * 1000).toISOString(), // Últimos 15 dias\r\n        updatedAt: new Date().toISOString()\r\n      }\r\n    },\r\n    \r\n    clearAllData() {\r\n      if (!confirm('ATENÇÃO: Tem certeza que deseja limpar TODOS os dados? Esta ação é irreversível!')) {\r\n        return\r\n      }\r\n      \r\n      if (!confirm('Esta é sua última chance. Todos os dados serão perdidos permanentemente. Continuar?')) {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        for (const modelKey in this.models) {\r\n          localStorage.removeItem(`ifwave_${modelKey}`)\r\n        }\r\n        \r\n        this.showResult('Dados Limpos', 'success', 'Todos os dados foram removidos com sucesso!')\r\n        this.refreshStats()\r\n      } catch (error) {\r\n        this.showResult('Erro', 'error', 'Erro ao limpar dados: ' + error.message)\r\n      }\r\n    },\r\n    \r\n    validateData() {\r\n      const results = {}\r\n      \r\n      for (const [modelKey, model] of Object.entries(this.models)) {\r\n        const records = this.dataService.getAll(modelKey)\r\n        const errors = []\r\n        \r\n        records.forEach(record => {\r\n          // Validar campos obrigatórios\r\n          for (const [fieldName, fieldConfig] of Object.entries(model.fields)) {\r\n            if (fieldConfig.required && !record[fieldName]) {\r\n              errors.push({\r\n                id: record.id,\r\n                message: `Campo obrigatório '${fieldConfig.label}' está vazio`\r\n              })\r\n            }\r\n          }\r\n          \r\n          // Validar tipos de dados\r\n          // Validar referências estrangeiras\r\n          // etc.\r\n        })\r\n        \r\n        results[modelKey] = {\r\n          total: records.length,\r\n          errors\r\n        }\r\n      }\r\n      \r\n      this.showResult('Validação de Dados', 'validation', results)\r\n    },\r\n    \r\n    showLocalStorageData() {\r\n      const data = {}\r\n      for (const key in localStorage) {\r\n        if (key.startsWith('ifwave_')) {\r\n          try {\r\n            data[key] = JSON.parse(localStorage[key])\r\n          } catch {\r\n            data[key] = localStorage[key]\r\n          }\r\n        }\r\n      }\r\n      \r\n      this.showResult('Dados do localStorage', 'storage', JSON.stringify(data, null, 2))\r\n    },\r\n    \r\n    downloadLogs() {\r\n      // Gerar logs do sistema\r\n      const logs = {\r\n        timestamp: new Date().toISOString(),\r\n        system: 'IF Wave Admin',\r\n        storage: this.storageInfo,\r\n        records: this.totalRecords,\r\n        models: Object.keys(this.models),\r\n        browser: navigator.userAgent\r\n      }\r\n      \r\n      this.downloadFile(\r\n        JSON.stringify(logs, null, 2),\r\n        `ifwave-logs-${new Date().toISOString().split('T')[0]}.json`,\r\n        'application/json'\r\n      )\r\n      \r\n      this.showResult('Logs Baixados', 'success', 'Logs do sistema baixados com sucesso!')\r\n    },\r\n    \r\n    refreshStats() {\r\n      this.$forceUpdate()\r\n    },\r\n    \r\n    downloadFile(content, filename, mimeType) {\r\n      const blob = new Blob([content], { type: mimeType })\r\n      const url = URL.createObjectURL(blob)\r\n      \r\n      const link = document.createElement('a')\r\n      link.href = url\r\n      link.download = filename\r\n      link.click()\r\n      \r\n      URL.revokeObjectURL(url)\r\n    },\r\n    \r\n    hashPassword(password) {\r\n      let hash = 0\r\n      for (let i = 0; i < password.length; i++) {\r\n        const char = password.charCodeAt(i)\r\n        hash = ((hash << 5) - hash) + char\r\n        hash = hash & hash\r\n      }\r\n      return Math.abs(hash).toString(16)\r\n    },\r\n    \r\n    showResult(title, type, data) {\r\n      this.resultModal = { title, type, data }\r\n      this.showResultModal = true\r\n    },\r\n    \r\n    closeResultModal() {\r\n      this.showResultModal = false\r\n      this.resultModal = { title: '', type: '', data: null }\r\n    }\r\n  }\r\n}",
          "style": ".admin-tools {\r\n  padding: 0;\r\n}\r\n\r\n.tools-header {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.tools-header h2 {\r\n  margin: 0 0 5px 0;\r\n  color: #333;\r\n  font-size: 1.8em;\r\n}\r\n\r\n.tools-header p {\r\n  margin: 0;\r\n  color: #666;\r\n}\r\n\r\n.tools-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 24px;\r\n}\r\n\r\n.tool-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.tool-header {\r\n  padding: 20px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  background: #f8f9fa;\r\n}\r\n\r\n.tool-header h3 {\r\n  margin: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  color: #333;\r\n  font-size: 1.1em;\r\n}\r\n\r\n.tool-content {\r\n  padding: 20px;\r\n}\r\n\r\n.tool-content p {\r\n  margin: 0 0 20px 0;\r\n  color: #666;\r\n  line-height: 1.5;\r\n}\r\n\r\n.tool-actions {\r\n  display: flex;\r\n  gap: 12px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.btn {\r\n  padding: 10px 16px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.btn-primary {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\n.btn-primary:hover:not(:disabled) {\r\n  background: #0056b3;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-secondary {\r\n  background: #6c757d;\r\n  color: white;\r\n}\r\n\r\n.btn-secondary:hover {\r\n  background: #5a6268;\r\n}\r\n\r\n.btn-danger {\r\n  background: #dc3545;\r\n  color: white;\r\n}\r\n\r\n.btn-danger:hover {\r\n  background: #c82333;\r\n}\r\n\r\n.file-input-wrapper {\r\n  position: relative;\r\n}\r\n\r\n.export-options,\r\n.model-selection,\r\n.cleanup-options,\r\n.generator-options {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.export-options label,\r\n.model-selection label,\r\n.generator-options label {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: 500;\r\n  color: #495057;\r\n  font-size: 14px;\r\n}\r\n\r\n.format-select,\r\n.form-control {\r\n  width: 100%;\r\n  padding: 8px 12px;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n}\r\n\r\n.checkbox-group {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 8px;\r\n}\r\n\r\n.checkbox-label {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 14px;\r\n  color: #495057;\r\n  cursor: pointer;\r\n  margin: 0;\r\n}\r\n\r\n.checkbox-label input[type=\"checkbox\"] {\r\n  width: auto;\r\n}\r\n\r\n.cleanup-item {\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.stats-list {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 12px 0;\r\n  border-bottom: 1px solid #f8f9fa;\r\n  font-size: 14px;\r\n}\r\n\r\n.stat-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.stat-label {\r\n  color: #666;\r\n}\r\n\r\n.stat-value {\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 6px;\r\n  font-weight: 500;\r\n  color: #495057;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Modal */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0,0,0,0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1001;\r\n  padding: 20px;\r\n}\r\n\r\n.modal-content {\r\n  background: white;\r\n  border-radius: 12px;\r\n  max-width: 700px;\r\n  width: 100%;\r\n  max-height: 80vh;\r\n  overflow-y: auto;\r\n  box-shadow: 0 10px 30px rgba(0,0,0,0.2);\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.modal-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  padding: 8px;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #6c757d;\r\n  border-radius: 4px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.close-btn:hover {\r\n  background: #f8f9fa;\r\n  color: #495057;\r\n}\r\n\r\n.modal-body {\r\n  padding: 20px;\r\n}\r\n\r\n.cleanup-preview,\r\n.validation-results {\r\n  font-size: 14px;\r\n}\r\n\r\n.preview-category,\r\n.validation-model {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.preview-category strong,\r\n.validation-model h4 {\r\n  color: #333;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.preview-list {\r\n  margin: 8px 0 0 20px;\r\n  color: #666;\r\n}\r\n\r\n.validation-success {\r\n  color: #28a745;\r\n  font-weight: 500;\r\n}\r\n\r\n.validation-errors {\r\n  color: #dc3545;\r\n}\r\n\r\n.validation-errors ul {\r\n  margin: 8px 0 0 20px;\r\n}\r\n\r\n.storage-data pre {\r\n  background: #f8f9fa;\r\n  padding: 16px;\r\n  border-radius: 6px;\r\n  overflow-x: auto;\r\n  font-size: 12px;\r\n  border: 1px solid #e9ecef;\r\n}\r\n\r\n.result-message {\r\n  font-size: 16px;\r\n  color: #495057;\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n/* Responsive */\r\n@media (max-width: 768px) {\r\n  .tools-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .tool-actions {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .checkbox-group {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .stat-item {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 4px;\r\n  }\r\n  \r\n  .modal-content {\r\n    margin: 10px;\r\n    max-height: calc(100vh - 20px);\r\n  }\r\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 100
          },
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "feed_display",
            "category": "core",
            "weight": 9,
            "confidence": 20
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 100
          },
          {
            "name": "messaging",
            "category": "core",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "admin_panel",
            "category": "core",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 40
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 100
          },
          {
            "name": "sharing",
            "category": "interaction",
            "weight": 5,
            "confidence": 60
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "groups",
            "category": "advanced",
            "weight": 7,
            "confidence": 100
          },
          {
            "name": "events",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "live_streaming",
            "category": "advanced",
            "weight": 4,
            "confidence": 20
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "accessibility",
            "category": "technical",
            "weight": 6,
            "confidence": 20
          }
        ],
        "complexity": {
          "lines": 1282,
          "functions": 10,
          "conditions": 100,
          "loops": 50,
          "score": 17.94071762870515
        },
        "imports": [
          "../../components/IconComponent.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [
          "models",
          "required"
        ],
        "quality": {
          "hasComments": true,
          "hasValidation": true,
          "hasErrorHandling": true,
          "hasTypeChecking": true,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 100
        }
      },
      {
        "name": "App",
        "path": "src\\App.vue",
        "size": 8401,
        "sections": {
          "template": "<div id=\"app\">\n    <div class=\"header\">\n      <h1>IF Wave</h1>\n      <div class=\"header-controls\">\n        <button v-if=\"currentUser && currentUser.role === 'admin' && currentScreen === 'feed'\" @click=\"openAdmin\" class=\"admin-btn\">\n          🛡️ Admin\n        </button>\n        <button v-if=\"currentUser && currentScreen === 'feed'\" @click=\"logout\" class=\"logout-btn\">\n          🚪 Sair\n        </button>\n        <button @click=\"toggleDarkMode\" class=\"dark-btn\">🌙 Alternar tema</button>\n      </div>\n    </div>\n    \n    <AdminPanel \n      v-if=\"currentScreen === 'admin'\"\n      @back=\"goBackFromAdmin\"\n    />\n    <RegisterForm \n      v-else-if=\"currentScreen === 'register'\" \n      @go-login=\"currentScreen = 'login'\" \n      @registered=\"handleRegistration\" \n    />\n    <LoginForm \n      v-else-if=\"currentScreen === 'login'\" \n      @go-register=\"currentScreen = 'register'\" \n      @logged-in=\"handleLogin\" \n    />\n    <FeedPosts \n      v-else-if=\"currentScreen === 'feed'\" \n      :current-user=\"currentUser\"\n    />\n  </div>",
          "script": "import RegisterForm from './components/RegisterForm.vue'\nimport LoginForm from './components/LoginForm.vue'\nimport FeedPosts from './components/Feed.vue'\nimport AdminPanel from './admin/components/AdminPanel.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    RegisterForm,\n    LoginForm,\n    FeedPosts,\n    AdminPanel\n  },\n  data() {\n    return {\n      currentScreen: 'login',\n      currentUser: null\n    }\n  },\n  mounted() {\n    // Verifica se há usuário logado ao carregar a aplicação\n    this.checkSession()\n    \n    // Criar usuário admin de exemplo se não existir\n    this.createAdminUser()\n  },\n  methods: {\n    checkSession() {\n      const userData = localStorage.getItem('ifwave_current_user')\n      if (userData) {\n        try {\n          this.currentUser = JSON.parse(userData)\n          this.currentScreen = 'feed'\n        } catch (error) {\n          // Se há erro no JSON, limpa os dados corrompidos\n          localStorage.removeItem('ifwave_current_user')\n        }\n      }\n    },\n    \n    handleLogin(userData) {\n      this.currentUser = userData\n      this.goToFeed()\n    },\n    \n    logout() {\n      this.currentUser = null\n      localStorage.removeItem('ifwave_current_user')\n      this.currentScreen = 'login'\n      \n      // Feedback visual do logout\n      setTimeout(() => {\n        alert('Logout realizado com sucesso!')\n      }, 100)\n    },\n    \n    goToLogin() {\n      this.currentScreen = 'login'\n    },\n    \n    goToFeed() {\n      this.currentScreen = 'feed'\n    },\n    \n    toggleDarkMode() {\n      document.body.classList.toggle('dark-mode')\n    },\n    \n    openAdmin() {\n      // Alternar para tela do painel admin\n      this.currentScreen = 'admin'\n    },\n    \n    goBackFromAdmin() {\n      this.currentScreen = 'feed'\n    },\n    \n    handleRegistration(userData) {\n      // Usuário foi cadastrado e logado automaticamente\n      this.currentUser = userData\n      this.goToFeed()\n      \n      // Verificar se os dados estão realmente salvos\n      const savedUser = JSON.parse(localStorage.getItem('ifwave_current_user') || 'null')\n      if (!savedUser) {\n        console.warn('Usuário não encontrado no localStorage após registro')\n        // Recriar dados se necessário\n        localStorage.setItem('ifwave_current_user', JSON.stringify(userData))\n      }\n    },\n    \n    createAdminUser() {\n      // Criar usuário admin se não existir\n      const users = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\n      const adminExists = users.find(user => user.role === 'admin')\n      \n      if (!adminExists) {\n        const adminUser = {\n          id: 'admin-' + Date.now(),\n          name: 'Administrador',\n          email: 'admin@ifmt.edu.br',\n          username: 'admin',\n          password: 'admin123',\n          role: 'admin',\n          course: 'Administração',\n          campus: 'Cuiabá',\n          bio: 'Administrador do sistema IF Wave',\n          avatar: null,\n          isActive: true,\n          emailVerified: true,\n          preferences: {\n            theme: 'light',\n            notifications: true,\n            privacy: 'public'\n          },\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n        \n        users.push(adminUser)\n        localStorage.setItem('ifwave_users', JSON.stringify(users))\n        console.log('Usuário admin criado:', adminUser.email)\n        \n        // Criar dados de exemplo\n        this.createSampleData()\n      }\n    },\n    \n    createSampleData() {\n      // Criar usuários de exemplo\n      const users = JSON.parse(localStorage.getItem('ifwave_users') || '[]')\n      const sampleUsers = [\n        {\n          id: 'user-1',\n          name: 'João Silva',\n          email: 'joao@ifmt.edu.br',\n          username: 'joao.silva',\n          password: 'senha123',\n          role: 'student',\n          course: 'Informática',\n          campus: 'Cuiabá',\n          bio: 'Estudante de informática',\n          isActive: true,\n          emailVerified: true,\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: 'user-2', \n          name: 'Maria Santos',\n          email: 'maria@ifmt.edu.br',\n          username: 'maria.santos',\n          password: 'senha123',\n          role: 'teacher',\n          course: 'Matemática',\n          campus: 'Várzea Grande',\n          bio: 'Professora de matemática',\n          isActive: true,\n          emailVerified: true,\n          createdAt: new Date().toISOString()\n        }\n      ]\n      \n      sampleUsers.forEach(user => {\n        if (!users.find(u => u.email === user.email)) {\n          users.push(user)\n        }\n      })\n      localStorage.setItem('ifwave_users', JSON.stringify(users))\n      \n      // Criar posts de exemplo\n      const posts = JSON.parse(localStorage.getItem('ifwave_posts') || '[]')\n      if (posts.length === 0) {\n        const samplePosts = [\n          {\n            id: 'post-1',\n            content: 'Bem-vindos ao IF Wave! 🎉',\n            userId: 'user-1',\n            type: 'text',\n            likesCount: 15,\n            commentsCount: 3,\n            isPublic: true,\n            createdAt: new Date().toISOString()\n          },\n          {\n            id: 'post-2',\n            content: 'Terminei meu TCC! 📚',\n            userId: 'user-2',\n            type: 'text',\n            likesCount: 8,\n            commentsCount: 2,\n            isPublic: true,\n            createdAt: new Date().toISOString()\n          }\n        ]\n        localStorage.setItem('ifwave_posts', JSON.stringify(samplePosts))\n      }\n      \n      console.log('Dados de exemplo criados!')\n    },\n  }\n}",
          "style": ":root {\n  --azul-ifmt: #003D7C;\n  --verde-energia: #2ECC71;\n  --amarelo-alegria: #F1C40F;\n  --roxo-inovador: #8E44AD;\n  --branco-puro: #FFFFFF;\n  --preto-profundo: #000000;\n\n  --background: var(--branco-puro);\n  --foreground: var(--preto-profundo);\n  --card: #fff;\n  --border: #dbdbdb;\n  --primary: var(--azul-ifmt);\n  --secondary: var(--verde-energia);\n  --accent: var(--amarelo-alegria);\n  --special: var(--roxo-inovador);\n}\n\nbody.dark-mode {\n  --background: #18191a;\n  --foreground: #f5f6fa;\n  --card: #242526;\n  --border: #333;\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  transition: background 0.3s, color 0.3s;\n}\n\n#app {\n  text-align: center;\n  margin-top: 40px;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 20px;\n  margin-bottom: 20px;\n}\n\n.header h1 {\n  margin: 0;\n  flex-grow: 1;\n}\n\n.header-controls {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n}\n\n.dark-btn, .logout-btn, .admin-btn {\n  background: var(--primary);\n  color: var(--branco-puro);\n  border: 1px solid var(--border);\n  border-radius: 6px;\n  padding: 8px 16px;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 13px;\n  transition: all 0.2s ease;\n  white-space: nowrap;\n}\n\n.admin-btn {\n  background: var(--special);\n}\n\n.admin-btn:hover {\n  background: #7239ca;\n}\n\n.dark-btn:hover {\n  background: var(--roxo-inovador);\n}\n\n.logout-btn {\n  background: #ed4956;\n}\n\n.logout-btn:hover {\n  background: #c73e47;\n}\n\n@media (max-width: 768px) {\n  .header {\n    flex-direction: column;\n    gap: 10px;\n    text-align: center;\n  }\n  \n  .header-controls {\n    justify-content: center;\n  }\n  \n  .dark-btn, .logout-btn {\n    padding: 6px 12px;\n    font-size: 12px;\n  }\n}"
        },
        "features": [
          {
            "name": "user_authentication",
            "category": "core",
            "weight": 10,
            "confidence": 100
          },
          {
            "name": "user_profile",
            "category": "core",
            "weight": 8,
            "confidence": 80
          },
          {
            "name": "post_creation",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "feed_display",
            "category": "core",
            "weight": 9,
            "confidence": 100
          },
          {
            "name": "notifications",
            "category": "core",
            "weight": 7,
            "confidence": 40
          },
          {
            "name": "search",
            "category": "core",
            "weight": 6,
            "confidence": 40
          },
          {
            "name": "admin_panel",
            "category": "core",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "likes_reactions",
            "category": "interaction",
            "weight": 7,
            "confidence": 40
          },
          {
            "name": "comments",
            "category": "interaction",
            "weight": 8,
            "confidence": 40
          },
          {
            "name": "mentions",
            "category": "interaction",
            "weight": 4,
            "confidence": 100
          },
          {
            "name": "hashtags",
            "category": "advanced",
            "weight": 5,
            "confidence": 100
          },
          {
            "name": "mobile_responsive",
            "category": "technical",
            "weight": 8,
            "confidence": 20
          },
          {
            "name": "dark_mode",
            "category": "technical",
            "weight": 3,
            "confidence": 100
          },
          {
            "name": "accessibility",
            "category": "technical",
            "weight": 6,
            "confidence": 60
          }
        ],
        "complexity": {
          "lines": 346,
          "functions": 4,
          "conditions": 42,
          "loops": 6,
          "score": 22.601156069364162
        },
        "imports": [
          "./components/RegisterForm.vue",
          "./components/LoginForm.vue",
          "./components/Feed.vue",
          "./admin/components/AdminPanel.vue"
        ],
        "exports": [
          "default"
        ],
        "events": [],
        "props": [],
        "quality": {
          "hasComments": true,
          "hasValidation": false,
          "hasErrorHandling": true,
          "hasTypeChecking": false,
          "usesModernSyntax": true,
          "hasAccessibility": true,
          "score": 67
        }
      }
    ],
    "features": [],
    "architecture": {},
    "codeQuality": {}
  },
  "functionalityMatrix": {
    "implemented": [
      {
        "name": "user_authentication",
        "weight": 10,
        "patterns": [
          "login",
          "register",
          "auth",
          "password"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "LoginForm",
          "MessagesScreen",
          "RegisterForm",
          "SearchScreen",
          "AdminModelView",
          "AdminPanel",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "user_profile",
        "weight": 8,
        "patterns": [
          "profile",
          "avatar",
          "bio",
          "user.*info"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "Feed",
          "IconComponent",
          "MessagesScreen",
          "NotificationsScreen",
          "PostItem",
          "ProfileScreen",
          "PublishScreen",
          "SearchScreen",
          "AdminDashboard",
          "AdminPanel",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "post_creation",
        "weight": 9,
        "patterns": [
          "publish",
          "post",
          "create.*post",
          "share"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "Feed",
          "HomeScreen",
          "IconComponent",
          "NotificationsScreen",
          "PostItem",
          "ProfileScreen",
          "PublishScreen",
          "SearchScreen",
          "AdminDashboard",
          "AdminModelView",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "feed_display",
        "weight": 9,
        "patterns": [
          "feed",
          "timeline",
          "posts.*list"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "Feed",
          "PublishScreen",
          "SearchScreen",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "notifications",
        "weight": 7,
        "patterns": [
          "notification",
          "alert",
          "badge"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "Feed",
          "IconComponent",
          "MessagesScreen",
          "NotificationsScreen",
          "PublishScreen",
          "AdminDashboard",
          "AdminModelView",
          "AdminPanel",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "search",
        "weight": 6,
        "patterns": [
          "search",
          "find",
          "filter"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "Feed",
          "IconComponent",
          "LoginForm",
          "MessagesScreen",
          "NotificationsScreen",
          "ProfileScreen",
          "RegisterForm",
          "SearchScreen",
          "AdminDashboard",
          "AdminModelView",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "messaging",
        "weight": 8,
        "patterns": [
          "message",
          "chat",
          "conversation"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "Feed",
          "IconComponent",
          "LoginForm",
          "MessagesScreen",
          "PublishScreen",
          "RegisterForm",
          "AdminDashboard",
          "AdminModelView",
          "AdminTools"
        ],
        "status": "implemented"
      },
      {
        "name": "admin_panel",
        "weight": 5,
        "patterns": [
          "admin",
          "dashboard",
          "management"
        ],
        "category": "core",
        "confidence": 100,
        "components": [
          "AdminDashboard",
          "AdminModelView",
          "AdminPanel",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "likes_reactions",
        "weight": 7,
        "patterns": [
          "like",
          "react",
          "heart",
          "emotion"
        ],
        "category": "interaction",
        "confidence": 100,
        "components": [
          "Feed",
          "IconComponent",
          "NotificationsScreen",
          "ProfileScreen",
          "PublishScreen",
          "SearchScreen",
          "AdminDashboard",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "comments",
        "weight": 8,
        "patterns": [
          "comment",
          "reply",
          "discuss"
        ],
        "category": "interaction",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "Feed",
          "IconComponent",
          "NotificationsScreen",
          "ProfileScreen",
          "PublishScreen",
          "SearchScreen",
          "AdminDashboard",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "sharing",
        "weight": 5,
        "patterns": [
          "share",
          "repost",
          "forward"
        ],
        "category": "interaction",
        "confidence": 80,
        "components": [
          "IconComponent",
          "ProfileScreen",
          "SearchScreen",
          "AdminDashboard",
          "AdminTools"
        ],
        "status": "implemented"
      },
      {
        "name": "following",
        "weight": 6,
        "patterns": [
          "follow",
          "friend",
          "connect"
        ],
        "category": "interaction",
        "confidence": 100,
        "components": [
          "Feed",
          "NotificationsScreen",
          "ProfileScreen",
          "SearchScreen"
        ],
        "status": "implemented"
      },
      {
        "name": "mentions",
        "weight": 4,
        "patterns": [
          "mention",
          "@",
          "tag.*user"
        ],
        "category": "interaction",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "Feed",
          "LoginForm",
          "MessagesScreen",
          "NotificationsScreen",
          "PostItem",
          "ProfileScreen",
          "PublishScreen",
          "RegisterForm",
          "SearchScreen",
          "AdminDashboard",
          "AdminModelView",
          "AdminPanel",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "groups",
        "weight": 7,
        "patterns": [
          "group",
          "community",
          "team"
        ],
        "category": "advanced",
        "confidence": 100,
        "components": [
          "HomeScreen",
          "IconComponent",
          "LoginForm",
          "MessagesScreen",
          "NotificationsScreen",
          "ProfileScreen",
          "PublishScreen",
          "RegisterForm",
          "AdminModelView",
          "AdminPanel",
          "AdminTools"
        ],
        "status": "implemented"
      },
      {
        "name": "events",
        "weight": 5,
        "patterns": [
          "event",
          "calendar",
          "appointment"
        ],
        "category": "advanced",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "IconComponent",
          "LoginForm",
          "MessagesScreen",
          "ProfileScreen",
          "PublishScreen",
          "RegisterForm",
          "SearchScreen",
          "AdminDashboard",
          "AdminModelView",
          "AdminPanel",
          "AdminTools"
        ],
        "status": "implemented"
      },
      {
        "name": "live_streaming",
        "weight": 4,
        "patterns": [
          "live",
          "stream",
          "broadcast"
        ],
        "category": "advanced",
        "confidence": 80,
        "components": [
          "ChatScreen",
          "NotificationsScreen",
          "SearchScreen",
          "AdminTools"
        ],
        "status": "implemented"
      },
      {
        "name": "hashtags",
        "weight": 5,
        "patterns": [
          "hashtag",
          "#",
          "tag"
        ],
        "category": "advanced",
        "confidence": 100,
        "components": [
          "ChatScreen",
          "Feed",
          "HomeScreen",
          "LoginForm",
          "MessagesScreen",
          "NotificationsScreen",
          "PostItem",
          "ProfileScreen",
          "PublishScreen",
          "RegisterForm",
          "SearchScreen",
          "AdminDashboard",
          "AdminModelView",
          "AdminPanel",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "mobile_responsive",
        "weight": 8,
        "patterns": [
          "responsive",
          "mobile",
          "@media"
        ],
        "category": "technical",
        "confidence": 80,
        "components": [
          "ChatScreen",
          "Feed",
          "LoginForm",
          "MessagesScreen",
          "NotificationsScreen",
          "PostItem",
          "ProfileScreen",
          "PublishScreen",
          "RegisterForm",
          "SearchScreen",
          "AdminDashboard",
          "AdminModelView",
          "AdminPanel",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "dark_mode",
        "weight": 3,
        "patterns": [
          "dark.*mode",
          "theme",
          "color.*scheme"
        ],
        "category": "technical",
        "confidence": 100,
        "components": [
          "NotificationsScreen",
          "App"
        ],
        "status": "implemented"
      },
      {
        "name": "accessibility",
        "weight": 6,
        "patterns": [
          "aria",
          "accessibility",
          "a11y",
          "role="
        ],
        "category": "technical",
        "confidence": 100,
        "components": [
          "Feed",
          "MessagesScreen",
          "NotificationsScreen",
          "SearchScreen",
          "AdminDashboard",
          "AdminTools",
          "App"
        ],
        "status": "implemented"
      }
    ],
    "partial": [
      {
        "name": "offline_support",
        "weight": 4,
        "patterns": [
          "offline",
          "pwa",
          "service.*worker"
        ],
        "category": "technical",
        "confidence": 40,
        "components": [
          "ChatScreen"
        ],
        "status": "partial"
      },
      {
        "name": "internationalization",
        "weight": 3,
        "patterns": [
          "i18n",
          "locale",
          "translation"
        ],
        "category": "technical",
        "confidence": 60,
        "components": [
          "ChatScreen",
          "PublishScreen",
          "AdminDashboard",
          "AdminModelView"
        ],
        "status": "partial"
      }
    ],
    "missing": [
      {
        "name": "stories",
        "weight": 6,
        "patterns": [
          "story",
          "stories",
          "temporary.*post"
        ],
        "status": "missing"
      },
      {
        "name": "polls",
        "weight": 4,
        "patterns": [
          "poll",
          "vote",
          "survey"
        ],
        "status": "missing"
      },
      {
        "name": "real_time_updates",
        "weight": 6,
        "patterns": [
          "websocket",
          "socket.io",
          "real.*time"
        ],
        "status": "missing"
      }
    ],
    "optional": [
      {
        "name": "AI Content Moderation",
        "category": "advanced",
        "description": "Moderação automática de conteúdo usando IA",
        "priority": "high",
        "implementation": "Integração com APIs de ML para detectar conteúdo inadequado",
        "effort": "medium"
      },
      {
        "name": "Stories System",
        "category": "interaction",
        "description": "Sistema de stories temporários (24h)",
        "priority": "high",
        "implementation": "Componente StoriesViewer + sistema de expiração",
        "effort": "medium"
      },
      {
        "name": "Voice Messages",
        "category": "messaging",
        "description": "Mensagens de voz no chat",
        "priority": "medium",
        "implementation": "Web Audio API + armazenamento de áudio",
        "effort": "high"
      },
      {
        "name": "Advanced Analytics",
        "category": "admin",
        "description": "Dashboard de analytics avançado",
        "priority": "medium",
        "implementation": "Gráficos interativos + métricas de engajamento",
        "effort": "high"
      },
      {
        "name": "Gamification",
        "category": "engagement",
        "description": "Sistema de pontos, badges e rankings",
        "priority": "medium",
        "implementation": "Sistema de achievements + leaderboard",
        "effort": "medium"
      },
      {
        "name": "AR Filters",
        "category": "media",
        "description": "Filtros de realidade aumentada para fotos",
        "priority": "low",
        "implementation": "WebRTC + bibliotecas de AR",
        "effort": "very_high"
      },
      {
        "name": "Blockchain Integration",
        "category": "advanced",
        "description": "NFTs e verificação descentralizada",
        "priority": "low",
        "implementation": "Web3 + smart contracts",
        "effort": "very_high"
      },
      {
        "name": "Multi-language Support",
        "category": "accessibility",
        "description": "Suporte a múltiplos idiomas",
        "priority": "medium",
        "implementation": "Vue i18n + sistema de traduções",
        "effort": "medium"
      },
      {
        "name": "Progressive Web App",
        "category": "technical",
        "description": "PWA completo com offline support",
        "priority": "high",
        "implementation": "Service Workers + Web App Manifest",
        "effort": "medium"
      },
      {
        "name": "Video Calling",
        "category": "messaging",
        "description": "Chamadas de vídeo entre usuários",
        "priority": "medium",
        "implementation": "WebRTC + signaling server",
        "effort": "very_high"
      }
    ]
  },
  "recommendations": {
    "critical": [],
    "important": [
      {
        "type": "complete_partial",
        "title": "Completar Funcionalidades Parciais",
        "description": "2 funcionalidades estão parcialmente implementadas",
        "action": "Revisar e completar implementações parciais",
        "impact": "medium"
      },
      {
        "type": "code_quality",
        "title": "Melhorar Qualidade do Código",
        "description": "Qualidade média do código: 60.9%",
        "action": "Adicionar comentários, validações e tratamento de erros",
        "impact": "medium"
      }
    ],
    "nice_to_have": [
      {
        "type": "optional_features",
        "title": "Implementar Funcionalidades Opcionais",
        "description": "Base sólida permite adicionar recursos avançados",
        "action": "Considerar implementação de funcionalidades opcionais",
        "impact": "low"
      }
    ]
  },
  "roadmap": {
    "phase1": {
      "title": "Correções Críticas (1-2 semanas)",
      "items": []
    },
    "phase2": {
      "title": "Completar Base (2-4 semanas)",
      "items": [
        {
          "name": "offline_support",
          "weight": 4,
          "patterns": [
            "offline",
            "pwa",
            "service.*worker"
          ],
          "category": "technical",
          "confidence": 40,
          "components": [
            "ChatScreen"
          ],
          "status": "partial"
        },
        {
          "name": "internationalization",
          "weight": 3,
          "patterns": [
            "i18n",
            "locale",
            "translation"
          ],
          "category": "technical",
          "confidence": 60,
          "components": [
            "ChatScreen",
            "PublishScreen",
            "AdminDashboard",
            "AdminModelView"
          ],
          "status": "partial"
        }
      ]
    },
    "phase3": {
      "title": "Melhorias Importantes (1-2 meses)",
      "items": [
        {
          "name": "AI Content Moderation",
          "category": "advanced",
          "description": "Moderação automática de conteúdo usando IA",
          "priority": "high",
          "implementation": "Integração com APIs de ML para detectar conteúdo inadequado",
          "effort": "medium"
        },
        {
          "name": "Stories System",
          "category": "interaction",
          "description": "Sistema de stories temporários (24h)",
          "priority": "high",
          "implementation": "Componente StoriesViewer + sistema de expiração",
          "effort": "medium"
        },
        {
          "name": "Progressive Web App",
          "category": "technical",
          "description": "PWA completo com offline support",
          "priority": "high",
          "implementation": "Service Workers + Web App Manifest",
          "effort": "medium"
        }
      ]
    },
    "phase4": {
      "title": "Recursos Avançados (2-3 meses)",
      "items": [
        {
          "name": "Voice Messages",
          "category": "messaging",
          "description": "Mensagens de voz no chat",
          "priority": "medium",
          "implementation": "Web Audio API + armazenamento de áudio",
          "effort": "high"
        },
        {
          "name": "Advanced Analytics",
          "category": "admin",
          "description": "Dashboard de analytics avançado",
          "priority": "medium",
          "implementation": "Gráficos interativos + métricas de engajamento",
          "effort": "high"
        },
        {
          "name": "Gamification",
          "category": "engagement",
          "description": "Sistema de pontos, badges e rankings",
          "priority": "medium",
          "implementation": "Sistema de achievements + leaderboard",
          "effort": "medium"
        },
        {
          "name": "Multi-language Support",
          "category": "accessibility",
          "description": "Suporte a múltiplos idiomas",
          "priority": "medium",
          "implementation": "Vue i18n + sistema de traduções",
          "effort": "medium"
        },
        {
          "name": "Video Calling",
          "category": "messaging",
          "description": "Chamadas de vídeo entre usuários",
          "priority": "medium",
          "implementation": "WebRTC + signaling server",
          "effort": "very_high"
        }
      ]
    },
    "phase5": {
      "title": "Inovação e Diferenciação (ongoing)",
      "items": [
        {
          "name": "AR Filters",
          "category": "media",
          "description": "Filtros de realidade aumentada para fotos",
          "priority": "low",
          "implementation": "WebRTC + bibliotecas de AR",
          "effort": "very_high"
        },
        {
          "name": "Blockchain Integration",
          "category": "advanced",
          "description": "NFTs e verificação descentralizada",
          "priority": "low",
          "implementation": "Web3 + smart contracts",
          "effort": "very_high"
        },
        {
          "name": "AR Filters",
          "category": "media",
          "description": "Filtros de realidade aumentada para fotos",
          "priority": "low",
          "implementation": "WebRTC + bibliotecas de AR",
          "effort": "very_high"
        },
        {
          "name": "Blockchain Integration",
          "category": "advanced",
          "description": "NFTs e verificação descentralizada",
          "priority": "low",
          "implementation": "Web3 + smart contracts",
          "effort": "very_high"
        },
        {
          "name": "Video Calling",
          "category": "messaging",
          "description": "Chamadas de vídeo entre usuários",
          "priority": "medium",
          "implementation": "WebRTC + signaling server",
          "effort": "very_high"
        }
      ]
    }
  },
  "scores": {
    "completeness": 87,
    "codeQuality": 61,
    "architecture": 100,
    "security": 71,
    "performance": 82,
    "accessibility": 65
  }
}